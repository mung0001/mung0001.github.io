'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/blog/','title':"Home",'content':" 인\n 용\n 구\n      1 2 3     표 쓸때는 중간 두번째줄에 --- 이거 필요합니다.          이탤릭 , 이탤릭\n볼드 볼드\n이탤릭볼드\n이탤릭볼드\n이렇게 할수도\n취소선\n이건데 .. *이렇게*\n😍\nhttps://steemit.com/steemkr-guide/@snow-airline/steemkr-quick-start-guide\n@Link, #Link?\n#이미지 넣기 ? + 컨트롤 z = 자동 주석처리\n# = 강조 ## 두개 = 목차 달기 별 두개 = 강조\n별 새게 = 기울이기 mandat\n 순서 달기 술서 달기 2   번호 달기 번호 달기2  박스 박스박스 ( 들여쓰기 )\n들여쓰기\r 버튼 양식 {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}}\r{{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}\r\rGet Home\r\rContribute\r\rColumns 양식 {{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt;\r# Left Content\rLorem markdownum insigne...\r\u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt;\r# Mid Content\rLorem markdownum insigne...\r\u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt;\r# Right Content\rLorem markdownum insigne...\r{{\u0026lt; /columns \u0026gt;}}\r왼쪽 컬럼 인쪽 내용\r\rMid Content 이러쿵 저러쿵\r\rRight Content 이하 동일\r\r\rExpend {{\u0026lt; expand \u0026gt;}}\r## Markdown content\rLorem markdownum insigne...\r{{\u0026lt; /expand \u0026gt;}}\r\rExpand\r↕\r\rMarkdown content 폼 안의 폼?\r\r\r\r또 다른 폼 {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}}\r## Markdown content\rLorem markdownum insigne...\r{{\u0026lt; /expand \u0026gt;}}\r\rCustom Label\r...\r\rMarkdown content 커스텀 폼폼\r\r\r\rHint {{\u0026lt; hint [info|warning|danger] \u0026gt;}}\r{{\u0026lt;hint n\u0026gt;}}\r내용\r{{\u0026lt; /hint \u0026gt;}}\r{{\u0026lt; /hint \u0026gt;}}\r 칸 정 리 하 기\n n = info\n내용\r\rn = warining\n내용\r\rn =danger\n내용\r\rkatex 이거보샘\nmermaid 이거보샘\ntabs {{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}}\r{{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}}\r{{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}}\r{{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}}\r{{\u0026lt; /tabs \u0026gt;}}\r\rMacOS\rMacOS 설명Linux\rLinux 설명Windows\rWindows 설명\r"});index.add({'id':1,'href':'/posts/creating-a-new-theme/','title':"테스트2",'content':"Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment\r$ echo this is a command\rthis is a command\r## edit the file\r$ vi foo.md\r+++\rdate = \u0026quot;2014-09-28\u0026quot;\rtitle = \u0026quot;creating a new theme\u0026quot;\r+++\rbah and humbug\r:wq\r## show it\r$ cat foo.md\r+++\rdate = \u0026quot;2014-09-28\u0026quot;\rtitle = \u0026quot;creating a new theme\u0026quot;\r+++\rbah and humbug\r$\rSome Definitions There are a few concepts that you need to understand before creating a theme.\nSkins Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta\r$ cd ~/Sites/zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .\rdrwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$\rTake a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$\rSee that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public\rtotal 16\r-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml\r-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml\r$ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop\rConnect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml\rsitemap.xml\rThat\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\rThat second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes\r$ find themes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml\r$ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml\rauthor = \u0026quot;michael d henderson\u0026quot;\rdescription = \u0026quot;a minimal working template\u0026quot;\rlicense = \u0026quot;MIT\u0026quot;\rname = \u0026quot;zafta\u0026quot;\rsource_repo = \u0026quot;\u0026quot;\rtags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;]\r:wq\r## also edit themes/zafta/LICENSE.md and change\r## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot;\rNote that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r$\rUpdate the Configuration File to Use the Theme Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml\rtheme = \u0026quot;zafta\u0026quot;\rbaseurl = \u0026quot;\u0026quot;\rlanguageCode = \u0026quot;en-us\u0026quot;\rtitle = \u0026quot;zafta - totally refreshing\u0026quot;\rMetaDataFormat = \u0026quot;toml\u0026quot;\r:wq\r$\rGenerate the Site Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$\rDid you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public\rtotal 16\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html\r-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js\r-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml\r$\rNotice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rIf it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html\r$ The Magic of Static Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld\rdrwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes\rdrwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js\r$ The Theme Development Cycle When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory.\r##\r$ rm -rf public\r##\r## run hugo in watch mode\r##\r$ hugo server --watch --verbose\rHere\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public\r$ hugo server --watch --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rWatching for changes in /Users/quoha/Sites/zafta/content\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop\rINFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB]\rChange detected, rebuilding site\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 1 ms\rUpdate the Home Page Template The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq\r$\rBuild the web site and then verify the results.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt;\rLive Reload Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rWhen you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md\rERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{}\r$ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md\r+++\rDescription = \u0026quot;\u0026quot;\rTags = []\rCategories = []\r+++\r:wq\r$ find themes/zafta/archetypes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md\r$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md\r/Users/quoha/Sites/zafta/content/post/first.md created\r$ hugo --verbose new post/second.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/second.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md\r/Users/quoha/Sites/zafta/content/post/second.md created\r$ ls -l content/post\rtotal 16\r-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md\r-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md\r$ cat content/post/first.md +++\rCategories = []\rDescription = \u0026quot;\u0026quot;\rTags = []\rdate = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot;\rtitle = \u0026quot;first\u0026quot;\r+++\rmy first post\r$ cat content/post/second.md +++\rCategories = []\rDescription = \u0026quot;\u0026quot;\rTags = []\rdate = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot;\rtitle = \u0026quot;second\u0026quot;\r+++\rmy second post\r$ Build the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$\rThe output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html\r$\rThe new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$\rHugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026quot;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rCongratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html\rWe could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$\rBuild the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html\r$ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rNotice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rBuild the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rCreate a Post Listing We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\rAs with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++\rtitle = \u0026quot;about\u0026quot;\rdescription = \u0026quot;about this site\u0026quot;\rdate = \u0026quot;2014-09-27\u0026quot;\rslug = \u0026quot;about time\u0026quot;\r+++\r## about us\ri'm speechless\r:wq\rGenerate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html\rNotice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://'\r+ (location.host || 'localhost').split(':')[0]\r+ ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/'\r+ 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rNotice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026quot;post\u0026quot;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if eq .Type \u0026quot;page\u0026quot; }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\rGenerate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html\rKnowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml\r[permalinks]\rpage = \u0026quot;/:title/\u0026quot;\rabout = \u0026quot;/:filename/\u0026quot;\rGenerate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r:wq\r$ vi themes/zafta/layouts/partials/footer.html\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\rUpdate the Home Page Template to Use the Partials The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }}\rversus\n{{ partial \u0026quot;header.html\u0026quot; . }}\rBoth pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026quot;post\u0026quot;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials $ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\rPosts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post\r$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rNow we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rNote that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"});index.add({'id':2,'href':'/posts/migrate-from-jekyll/','title':"테스트4",'content':"Yes I can!! print(\u0026#34;그만~하자~\u0026#34;)\rprint(\u0026#34;그만~하자~\u0026#34;)\rMove static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/\r▾ images/\rlogo.png\r should become\n▾ \u0026lt;root\u0026gt;/\r▾ static/\r▾ images/\rlogo.png\r Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site\rgit rm _site\rgit submodule add -b gh-pages git@github.com:your-username/your-repo.git public\r   Or, change the Hugo configuration to use _site instead of public.\n {\r..\r\u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;,\r..\r}\r   Convert Jekyll templates to Hugo templates That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll\rclass ImageTag \u0026lt; Liquid::Tag\r@url = nil\r@caption = nil\r@class = nil\r@link = nil\r// Patterns\rIMAGE_URL_WITH_CLASS_AND_CAPTION =\rIMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i\rIMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i\rIMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i\rIMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i\rdef initialize(tag_name, markup, tokens)\rsuper\rif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK\r@class = $1\r@url = $3\r@caption = $7\r@link = $9\relsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION\r@class = $1\r@url = $3\r@caption = $7\relsif markup =~ IMAGE_URL_WITH_CAPTION\r@url = $1\r@caption = $5\relsif markup =~ IMAGE_URL_WITH_CLASS\r@class = $1\r@url = $3\relsif markup =~ IMAGE_URL\r@url = $1\rend\rend\rdef render(context)\rif @class\rsource = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot;\relse\rsource = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot;\rend\rif @link\rsource += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot;\rif @link\rsource += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption\rsource += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot;\rsource\rend\rend\rend\rLiquid::Template.register_tag('image', Jekyll::ImageTag)\r is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt;\r\u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt;\r{{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }}\r\u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt;\r{{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }}\r{{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}}\r\u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }}\r{{ .Get \u0026quot;title\u0026quot; }}{{ end }}\r{{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt;\r{{ .Get \u0026quot;caption\u0026quot; }}\r{{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }}\r{{ .Get \u0026quot;attr\u0026quot; }}\r{{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }}\r\u0026lt;/p\u0026gt; {{ end }}\r\u0026lt;/figcaption\u0026gt;\r{{ end }}\r\u0026lt;/figure\u0026gt;\r\u0026lt;!-- image --\u0026gt;\r Usage I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}\r to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}\r As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches Fix content Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"});index.add({'id':3,'href':'/docs/blog/study/','title':"Study",'content':"Collapsed Level of Menu Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  "});index.add({'id':4,'href':'/docs/blog/study/openstack/','title':"Open Stack",'content':"Collapsed Level of Menu Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  "});index.add({'id':5,'href':'/docs/blog/study/web/','title':"Web",'content':"Collapsed Level of Menu Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  "});index.add({'id':6,'href':'/docs/blog/study/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/','title':"정보처리기사",'content':"Collapsed Level of Menu Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  "});index.add({'id':7,'href':'/posts/','title':"Blog",'content':""});index.add({'id':8,'href':'/posts/goisforlovers/','title':"테스트",'content':"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}\r Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}\r Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}\r Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}\r Variables Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}}\r{{ $address }}\r Functions Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}\r Includes When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}\r Logic Go templates provide the most basic iteration and conditional logic.\nIteration Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }}\r{{ . }}\r{{ end }}\r Example 2: Declaring value variable name\n{{range $element := array}}\r{{ $element }}\r{{ end }}\r Example 2: Declaring key and value variable name\n{{range $index, $element := array}}\r{{ $index }}\r{{ $element }}\r{{ end }}\r Conditionals If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}\r Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{else}}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\r Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}\r Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{ else if isset .Params \u0026quot;caption\u0026quot; }}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Pipes One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}\r is the same as\n{{ eq 1 1 | if }} Same {{ end }}\r It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}\r Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\rStuff Here\r{{ end }}\r Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }}\rStuff Here\r{{ end }}\r Context (aka. the dot) The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }}\r{{ range .Params.tags }}\r\u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt;\r{{ end }}\r Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n---\rtitle: \u0026quot;Permalinks\u0026quot;\rdate: \u0026quot;2013-11-18\u0026quot;\raliases:\r- \u0026quot;/doc/permalinks/\u0026quot;\rgroups: [\u0026quot;extras\u0026quot;]\rgroups_weight: 30\rnotoc: true\r---\rHere is the corresponding code inside of the template:\n {{ if not .Params.notoc }}\r\u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt;\r{{ .TableOfContents }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r Using Site (config) Parameters In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams:\rCopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34;\rTwitterUser: \u0026#34;spf13\u0026#34;\rSidebarRecentLimit: 5\rWithin a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt;\r\u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt;\r\u0026lt;/footer\u0026gt;{{end}}\rAn alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt;\r\u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt;\r\u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot;\ralt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\r\u0026lt;/span\u0026gt;{{end}}\rFinally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt;\r\u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt;\r\u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}\r\u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r{{end}}\u0026lt;/ul\u0026gt;\r\u0026lt;/nav\u0026gt;\r"});index.add({'id':9,'href':'/posts/hugoisforlovers/','title':"테스트3",'content':"Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo\rcd hugo\r/path/to/where/you/installed/hugo server --source=./docs\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Press ctrl+c to stop\r Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content\r\u0026gt; Press ctrl+c to stop\r Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 26 ms\r Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun The best way to learn something is to play with it.\n"});index.add({'id':10,'href':'/docs/blog/cloud/','title':"Cloud",'content':"3rd Level of Menu Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r "});index.add({'id':11,'href':'/docs/blog/database/','title':"Data Base",'content':"3rd Level of Menu Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r "});index.add({'id':12,'href':'/docs/blog/hidden/','title':"Hidden",'content':"This page is hidden in menu Quondam non pater est dignior ille Eurotas Latent te facies Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer),\rpad.property_data_programming.sectorBrowserPpga(dataMask, 37,\rrecycleRup));\rintellectualVaporwareUser += -5 * 4;\rtraceroute_key_upnp /= lag_optical(android.smb(thyristorTftp));\rsurge_host_golden = mca_compact_device(dual_dpi_opengl, 33,\rcommerce_add_ppc);\rif (lun_ipv) {\rverticalExtranet(1, thumbnail_ttl, 3);\rbar_graphics_jpeg(chipset - sector_xmp_beta);\r}\r Fronde cetera dextrae sequens pennis voce muneris Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software;\rif (internic \u0026gt; disk) {\remoticonLockCron += 37 + bps - 4;\rwan_ansi_honeypot.cardGigaflops = artificialStorageCgi;\rsimplex -= downloadAccess;\r}\rvar volumeHardeningAndroid = pixel + tftp + onProcessorUnmount;\rsector(memory(firewire + interlaced, wired)); "});index.add({'id':13,'href':'/docs/blog/network/','title':"Network",'content':"3rd Level of Menu Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r "});index.add({'id':14,'href':'/docs/blog/network/packet/','title':"Packet",'content':"네트워크 패킷 ( Network Packet )    패킷이란 데이터의 묶음 단위로 한번에 전송할 데이터의 크기\n  제 3계층 이상 ( Network 계층 ) 에서는 이 데이터의 묶음을 패킷이라고 부르며, 제 2계층에서는 프레임( Frame )\n  패킷의 크기는 네트워크의 종류에 따라 크기가 다름\n  패킷을 이렇게 나눠 보내는 이유는 컴퓨터는 동시다발적으로 데이터를 전송하는 데, 한 데이터에게만 데이터를 줄 경우, 한 컴퓨터와의 통신밖에 하지 못하기에, 데이터를 나눠 모두에게 통신할 수 있게 하며, 중간에 에러가 날 경우를 대비\n     패킷의 기본 구조      크게 패킷은 헤더 ( header ) 와 페이로드 ( Payload ) 두 부분으로 나누어 진다.\n Hader: 출발 주소, 도착 주소, 패킷 길이 등 ( 헤더에 종류에 따라 내용이 달라질 수 있음 ) Payload: 전송되는 실제 콘텐츠나 데이터 ( 이메일, 메시지, 인터넷 전화, 웹서핑 세션 등)    즉 위의 그림과 같이 데이터는 계층의 헤더 ( Hader ) + 페이로드 ( Payload )로 이루어져 있으며, 헤더가 붙은 계층에 따라 비트, 프레임, 패킷, 세그먼트, 데이터 라 한다.\n     각 네트워크 계층의 단위 \rNetwork Layer \r...\r\r 데이터 (Data): 상위 계층 ( OSI 7-5 Layer Sesstion, Presentation, Application )\n 세그먼트 ( Segment ): ( OSI 4 Layer Transport )\n 패킷 ( Packet ): ( OSI 3 Layer Network )\n 프레임 ( Frame ): ( OSI 2 Layer DataLink )\n 비트 ( Bit ): ( OSI 1 Layer Physical )\n     \r\r\r  헤더는 우편 봉투에 적혀있는 주소와 유사한 열할을 하며, 페이로드는 편지봉투 안의 편지 내용을 뜻한다 할 수 있다\n  데이터는 데이터 상태로 상대방에게 바로 전달해주지 못한다. 그렇기에 상대방이 데이터를 볼 수 있게 송신과정을 거쳐야 하는 데 이를 인 캡슐레이션 이라 하며, 수신자는 반대로 수신과정을 거치는 데 이를 디 캡슐레이션 이라 한다.\n   네트워크 인 캡슐레이션 ( Network Encapsulation )  \rNetwork Encapsulation \r...\r\r   위에 언급한 듯이 송신자가 수신자에게 데이터를 볼 수 있도록 포장하는 것을 인캡슐레이션이라 하며 이는 OSI L7에서 L1 방향으로 진행 된다.\n  Payload를 4 계층 TCP 헤더로 캡슐화( 세그먼트 ) -\u0026gt; IPv4, TCP 헤더로 캡슐화 ( 패킷 ) -\u0026gt; IPv4, TCP, Ethernet( 프레임 )으로 캡슐화 하는 것을 인 캡슐레이션이라 한다.\n  \r\r\r 네트워크 디 캡슐레이션 ( Network Depsulation )  \rNetwork Decapsulation \r...\r\r  인캡슐레이션 되어진 ( 포장되어진 ) 페이로드를 읽기위해서 포장되어진 역 순서로 다시 헤더를 제거하는 것을 디 캡슐레이션이라 하며, OSI L1에서 L7 방향으로 진행 된다.\n  Payload를 IPv4, TCP, Ethernet ( 프레임 ) -\u0026gt; IPv4, TCP, ( 패킷 ) -\u0026gt; TCP ( 세그먼트 ) -\u0026gt; 데이터로 캡슐화를 해제하는 것을 디 캡슐레이션이라 한다.\n  \r\r\r   각 계층의 Protocol   각 프로토콜은 2진수 1개 = 1bit 2진수 8개 = 8bit 2진수 4개 = 16진수 1개 16진수 2개 = 2진수 8개 16진수 2개 8bit = 1byte를 뜻함   2계층 ( Data-Link )    2계층은 하나의 네트워크 대역 즉, 네트워크 상에 존재하는 여러 장비들 중에서 어떤 장비에게 보내는 데이터를 전달하는 역할 을 수행.\n  추가적으로 오류제어, 흐름제어 수행.\n  하나의 네트워크 대역 LAN에서만 통신할 때 사용하며,다른 네트워크와 통신 할 때에는 3계층이 도와주어야만 통 신이 가능\n    Ethernet 14byte Destination Address: 데이터를 전달받은 상대방의 시스템 MAC 주소 6byte Source Address: 데이터를 전달하는 시스템의 MAV 주소 6byte 상위 프로토콜 타입: 2byte, IPv4 ( 0x0800 ), ARD ( 0x0806 )     3계층 ( Network )  ARP Protocol    ARP 프로토콜은 같은 네트워크 대역에서 통신을 하기 위해 필요한 MAC주소를 IP주소를 이용해서 알아오는 프로토콜\n  같은 네트워크 대역에서 통신을 한다고 하여도 데이터를 보내기 위해서는 7계층부터 캡슐화를 통해 데이터를 보내기 때문에 IP주소와 MAC주소가 모두 필요하며, 이 때 IP주소는 알고 있어도 MAC 주소는 모르더라도 ARP를 통해 통신이 가능\n  ARP는 같은 대역에서만 사용가능\n     Hardware type, Protocol type, Hardware Address Length, Protocol affress Length는 모두 고유의 값을 가짐\n  Opcode: 세팅이 1이면 요청, 2면 답하는 것으로 세팅 됨\n  최소는 60byte, 최대는 1514byte\n   \rARP Process\r...\r\r  목적지 주소를 알지 못해, 목적지 주소 ( MAC )자리에는 0으로 비워둠\n  인캡슐레이션 후, 주소를 알지 못해 브로드캐스트 방식으로 모두에게 요청을 보낸 후, 아이피가 맞지 않으면 버리고, 맞는 아이피를 가지고 있는 PC는 자기의 주소를 다시 송신하고, 그러면 초기 송신자는 목적지 주소( MAC )를 알 수 있게 되어지는 원리\n   발신자\n 수신자\n\r\r\r   IPv4 Protocol    IPv4는 네트워크 상에서 데이터를 교환하기 위한 프로토콜이지만, 데이터가 정확하게 전달될 것을 보장하지는 않음\n  복된 패킷을 전달하거나 패킷의 순서를 잘못 전달할 가능성도 있음 (악의적으로 이용되면 DoS 공격이 됨 )\n  데이터의 정확하고 순차적인 전달은 그보다 상위 프로토콜인 TCP에서 보장\n    구조 설명   Version: IP 프로토콜의 버전 ( 대부분이 4, 16진수 중 하나 )\n  IHL ( Hearder Length ): 헤더의 길이 표현법 = n/4 최소 20 ~ 60\n  Type of Service ( TOS ): 데이터의 형식으로 현재는 잘 쓰이지 않으며 0으로 비워둠\n  Total Length: 모두를 합친 전체의 길이를 뜻함\n  Identification: 조각화 된 데이터의 ID를 부여하는 것\n  IP Flags X: 쓰이지 않음, D: 데이터를 송싱자가 안쪽에서 설정하는 것, M: 조각화가 진행될 경우 1로 세팅, 그렇지 않을 경우 0\n  Fragment Offset: 조각화가 발생했을 때 조각들의 시작 위치를 나타내는 값\n  offset: 어느 기준으로부터 얼마만큼 떨어져있는 지를 나타냄\n  Time to Live ( TTL ) : 패킷이 유지 될 수 있는 시간 ( 횟수 ), 네트워크 장비를 지나갈 때마다 1씩 줄어듬\n       ICMP Protocol   8 ( 요청 )/ 0 ( 정상적인 응답 ) 3 ( 목적지 도착 불가능 ) / 11 ( 시간 초과 ) 5 ( 리 다이렉트, 라우팅 테이블 수정 )    4계층 ( Transport )    4계층 전송 계층 ( Transprot layer )은 송신자의 프로세스와 수신자의 프로세스를 연결하는 서비스 를 제공하는 계층이다.\n  전송 계층은 연결 지향 데이터의 스트림 지원, 신뢰성, 흐름 제어, 그리고 다중화와 같은 편리한 서비를 제공한다.\n  전송 프로토콜 중 가장 장 알려진 것은 연결 지향전송박시으로 사용하는 전송제어 프로토콜( TCP ) 단순한 전송에 사용되는 사용자 데이터 프로토콜 ( UDP ) 가 있다\n   UDP Protocol    UDP 프로토콜 ( User Datagram Protocol )은 데이터 그램 프로토콜 ( Universal Datagram Protocol )이라고 일컫기도 한다.\n  UDP의 전송 방식은 너무 단순해서 서비스의 신뢰성이 낮고, 데이터그램의 도착 순서가 바뀌거나, 중복되거나, 심지어는 통보 없이 누락 시키기도 한다.\n  UDP는 일반적으로 오류의 검사와 수정이 필요 없는 프로그램에서 수행할 것으로 가정해야 한다.\n      TCP Protocol    전송 제어 프로토콜 (Transmission Control Protocol ) 은 인터넷에 연결된 컴퓨터에서 실행되는 프로그램 간에 통신을 안정적으로, 순서대로 에러없이 교환 할 수 있다\n  TCP의 안정성을 필요로 하지 않은 애플리케이션의 경우 일반적으로 TCP 대신 비접속형 사용자 데이터그램 프로토콜 ( User Datagream Protocol )을 사용하여, TCP는 UDP보다 안전하지만 느리다\n    TCP Fags  Window: 상대방과 데이터를 주고 받을 때, 얼마만큼의 데이터를 보낼 지 정하는 역할을 수행 ( 남아있는 TCP 공간을 알려줌 ) TCP Flags : 어떤값을 보낼지 세팅하는 값 C, E: 사용하지 않음 U: Uregent ( 긴급 bit ) - 우선순위가 포함되어있음 ( 1- 급한 데이터 ) A: Acknowledgment ( 승인 bit ) P: Push ( 밀어넣기 bit ) R: Reset ( 초기화 bit ) S: Syn ( 동기화 bit ) - 상대방과 연결을 시작할 때 반드시 사용 F: Fin ( 종료 bit )     3Way Handshake \r3Way Handshake\r...\r\r  TCP를 이용한 데이터 통신을 할 때 프로세스와 프로세스를 연결하기 위해 가장 먼저 수행되는 과정\n  클라이언트가 서버에게 요청 패킷을 보내고\n  서버가 클라이언트의 요청을 받아 패킷을 보내고\n  클라이언트는 이를 최종적으로 수락하는 패킷을 보낸다.\n      과정설명   보낸 쪽에서 보낼 때는 SEQ번호와 ACK번호가 그대로이다.\n  받는 쪽에서 SEQ번호는 받은 ACK번호가 된다.\n  받는 쪽에서 ACK번호는 받은 SEQ번호 + 데이터 크기가 된다.\n    \r\r\r   7계층 ( Application )  HTTP Protocol ****    IP( Internet Protocol )은 네트워크 계층에서 사용하는 주소로, 컴퓨터는 MAC주소를 사용하지만, 사람이 읽기 힘들어 읽기 편한 IP주소를 사용 한다.\n  3계층은 다른 네트워크 대역 즉, 멀리 떨어진 곳에 존재하는 네트워크까지 어떻게 데이터를 전달할지 제어하는 일을 담당, 발신에서 착신까지의 패킷의 경로를 제어하는 역할을 수행 하며 거리가 먼 다른 기기와 통신을 위해서는 3계층이 필요하다\n   "});index.add({'id':15,'href':'/docs/blog/security/','title':"Security",'content':"3rd Level of Menu Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r "});index.add({'id':16,'href':'/docs/blog/study/openstack/openstack/','title':"Openstack",'content':"인프라 환경 변화의 시작, 클라우드 클라우드 컴퓨팅의 정의와 종류 클라우드 컴퓨팅(Cloud Computing)  인터넷이 가능한 디바이스(스마트폰, 스마트패드, 스마트TV 등)로 클라우드에서 데이터를 처리하며, 저장 및 관리하는 컴퓨팅 시스템  클라우드 서비스의 종류   IaaS(Infrastrcture as a Service): 서버, 스토리지, 네트워크를 가상화 환경으로 만 들어 필요에 따라 인프라 자원을 제공하는 서비스\n  PaaS(Platform as a Service): 웹에서 개발 플랫폼을 제공하는 서비스\n  SaaS(Software as a Service): 온디맨드 소프트웨어(On-demand Software)라고도 하며, 중앙에서 호스팅 되는 소프트웨어를 웹 브라우저 등 클라우이언트로 이용하는 서비스\n  Daas(Desktop as a Service): 클라우드 인프라를 이용해 os가 설치된 인스턴스를 제공하는 서비스\n  BaaS(Backend as a Service): 모바일 환경에 맞춰 구현하기 힘든 백엔드 부분을 제공하는 서비스\n  Public Cloud: 언제든지 접근이 가능한 클라우드 서비스\n  Private Cloud: 외부에서는 접근이 불가능한 사내 클라우드 서비스\n  Hybrid Cloud Management System: 퍼블릭 클라우드와, 프라이빗 클라우드를 혼용하는 클라우드 서비스\n  클라우드 핵심 서비스 컴퓨트와 스토리지   컴퓨트 서비스(Compute Service)\n 사용자가 원하는 운영체제가 탑재된 컴퓨터나 서버를 인터넷에서 사용할 수 있게 제공하는 서비스    스토리지 서비스(Storage Service)\n 사용자가 소유한 데이터나 음악, 동영상, 문서 파일을 인터넷에 있는 스토리지에 저장, 삭제 공유할 수 있는 서비스    하이퍼바이저의 정의와 종류   하이퍼바이저(Hypervisor)\n 가상 머신 모니터라고도 하며, 호스트 컴퓨터 한 대에서 운영체제 다수를 동시에 실행하는 논리적 플랫폼을 의미    하이퍼바이저의 분류\n Native, 베어메탈 방식: 하드웨어에 직접 설치해서 실행되는 방식 Hosted 방식: 애플리케이션처럼 프로그램으로 설치되는 방식    가상화 방식에 따른 하이퍼바이저의 분류\n 전가상화 방식(Full Virtualization): 하드웨어를 모두 가상화하는 방식으로, 게스트 운영체제를 변경하지 않고, 다양한 운영체제로 이용할 수 있음. Native 방식이 이에 해당 반가상화 방식(Para Virtualization): 하이퍼바이저로만 제어가 가능한 방식으로, 높은 성능의 유지가 가능하지만, 오픈 소스가 아니면 운영이 불가능    하이퍼바이저의 종류   KVM(for Kerne-based VirtualMachine):\n 오픈스택의 거본 하이퍼바이저로 전가상화 방식을 지원 반드시 Inter VT나 AMD-V가 있어야만 사용이 가능 리눅스, 윈도 이미지를 수정하지 않고 여러 가상 머신으로 실행이 가능    Xen과 Xen Server: Center를 이용한 관리 기능, 스토리지 지원과 실시간 마이그레이션, 고가용성 기능처럼 데이터센터에서 요구하는 확장 기능을 제공\n  Hyper-V:\n 디바이스 드라이버가 부모 파티션 위에서 동작하며, 콘솔 OS의 역할을 부모 파티션이 수행 다른 하이퍼바이저의 비해 크기가 작아 오류 코드가 포함될 확류이 낮음 Inter VT, AMD-V x64를 지원하는 하드웨어가 있어야 가상화가 가능    VMware vSphere ESX:\n 적은 하드웨어서도 애플리케이션을 통합할 수 있도록 서버를 가상화해주는 무료 베어메탈 하이퍼바이저 ESX는 가상 머신의 업무를 지원하는 역할을 수행, 가상 머신이 발생시킨 명령어를 하이퍼바이저가 받아 재작업 후, 가상 환경에서 잘 구동하도록 바이너리 변환 방식을 사용 Inter, VT, AMD-V 같은 가상화를 지원하는 디바이스가 없어도 가상화를 구현할 수 있음    Docker:\n 리눅스 기반의 컨테이너 런타임 오픈 소스로, 가상 머신과 기능이 유사하며, 가상 머신보다 훨씬 가벼운 형태로 배포가 가능 컨테이너의 개념으로 가상 머신처럼 Docker Engine을 호스트 웨어서 수행하며, 리눅스 기반의 운영체제만 수행이 가능 가상 머신처럼 하드웨어를 가상화하는 것이 아니라, 게스트 OS를 분리시켜 제공 호스트 운영체제의 프로세스 공간을 공유한다고 할 수 있음    VirtualBox:\n 리눅스, OS X, 솔라리스, 윈도를 게스트 운영체제로 가상화하는 x86 가상화 소프트웨어 다른 하이퍼바이저와 비교했을 때는 기능이 부족 원격 데스크톱 프로토콜(RDP), iSCSI 지원, RDP를 거치는 원격 디바이스의 USB 지원처럼 원격 가상 컴퓨터를 제어할 수 있는 기능이 있음 Inter VT와 AMD-V를 지원    VMware Workstation:\n 게스트 운영체제에 설치할 수 있는 다리이버 및 기타 소프트웨어의 묶음 게스트 머신이 고해상도 화면에 접근할 수 있게 하는 VESA호한 그래픽, 네트워크 인터페이스 카드용 네트워크 드라이버, 호스트와 게스트 간 클립보드 공유, 시간 동기화 기능 등을 제공    Parallels Desktop:\n 맥용 인텔 프로세서가 있는 매킨토시 컴퓨터에 하드웨어 가상화를 제공하려고 만든 소프트웨어 MS-DOS, 윈도, 맥, 리눅스, 솔라시스 등 다양한 운영체제를 가상화 할 수 있음    하이퍼바이저별 이미지 포맷  KVM: img, qcow2, vmdk VMWARE: vmdk 오라클 VirtualBOx: vdi, vmdk, qcow2, vhd 마이크로소프트 Hyper-V: vhd, vmdk, vdi Xen, Xen Server: qcow2, vhd  이미지포맷 설명  qcow2: QEMU Copy On Write 2 vdi: Virtual Disk Image vmdk: VMware Virtual Disk DevelopmentKit vhd: Virtual Hard Disk  클라우드에서 알아야 할 네트워크 상식   고정 IP, 유동 IP\n 고정IP (Fixed IP): 인터넷 공유기를 연결해 고정으로 할당받는 IP 유동IP (Floating IP): 가상 인스턴스가 외부에서 접근할 수 있도록 할당하는 인터넷이 가능한 IP    클래스의 범위\n A 클래스: 1 ~ 126 B 클래스: 128 ~ 191 C 클래스: 192 ~ 223 D 클래스: 224 ~ 239 E 클래스: 240 ~ 254 멀티캐스트는 D 클래스, E 연구 개발 목적으로 예약된 클래스    CIDR(Classless Inter-Domain Routing)  클래스가 없는 도메인간 라우팅 기법으로 기존 IP할당 방식인 네트워크 클래스를 대체 급격히 부족해지는 IPv4 주소를 좀 더 효율적으로 사용 접두어를 이용한 주소 지정 방식의 계층적 구조를 사용해 인터넷 라우팅의 부담을 덜어 줌  SDN(Software Defined Networking)  네트워크 제어 기능이 물리적 네트워크와 분리되도록 프로그래밍한 네트워크 구조를 뜻함 네트워크 제어 기능을 데이터 전달 기능과 분리해서 구현해야 한다. 네트워크 제어 기능이 개발되고 실행될 수 있는 환경을 분리해 낮은 성능의CPU가 있는 하드위어 위에 스위치에 더 이상 위치시키지 않는다.  오픈플로(OpenFlow)  SDN의 근간이 되는 기술로 SDN 아키텍처의 컨트롤 레이어와 인프라스트럭처 레이어 사이에 정의된 최초의 표준 통신 인터페이스 흐름정보로 패킷의 전달 경로와 방식을 제어 오픈플로는 오픈플로 컨트롤러와 오픈플로로 지원 네트워크 장비(라우터, 스위치) 사이에서 커뮤니케이션 역할을 담당 일반적인 네트워크 장비(라우터, 스위치)는 플로 테이블을 이용해서 네트워크 트래픽을 처리하는 반면, 오픈플로는 소프트웨어 컨트롤러로 플로테이블을 조작하고 데이터 경로를 설정  네트워크 장비   라우터(Router):\n 인터넷 등 서로 다른 네트워크를 연결할 때 사용하는 장비 데이터 패킷이 목적지까지 갈 수 있는 경로를 검사하여 최적의 경로를 탐색하는 것을 라우팅이라 함 경로가 결정되면 결정된 길로 데이터 패킷하는 것을 스위칭이라고 함    허브(Hub):\n 인터넷이 등장하기 이전, 컴퓨터와 컴퓨터를 연결해 네트워크를 구성하는 장비 멀티포트(Multiport) 또는 리피터(Repeater)라고도 할 수 있습니다.    CSMA/CD(Carrier Sense Multiple Access/Collision Detect): 이더넷 전송 프로토콜로 IEEE 802.3 표준에 규격화되어 있습니다.\n  브리지(Bridge):\n 콜리전(충돌) 도메인을 나누어 서로 통신이 가능하도록 다리처럼 연결해 주는 네트워크 장비 분리된 콜리전 도메인을 세그먼트라고 한다.    스위치(Switch)\n 브리지와 역할이 동일하지만, 소프트웨어적으로 처리하는 스위치가 소프트웨어적으로 처리하는 브리지보다 속도가 더 빠르다. 스위치가 브리지 보다 많은 포트 개수를 제공(20~ 100) 브리지는 Store-and-forward라는 프레임 처리 방식만 지원하지만, 스위치는 Cut-through, Store-and-forward라는 프레임 처리 방식을 지원    스위치 관련 용어\n 프레임: 데이터를 주고받을 때 데이터를 적절한 크기로 묶어 놓은 것 프레임 처리 방식: 입력되는 프레임을 스위칭하는 방식입니다. Store-and-forward: 들어오는 프레임 전부를 일단 버퍼에 담아 두고, CRC 등 오류 검출을 완전히 처리한 후 전달(포워딩)하는 스위칭 기법 Cut-through: 스위칭 시스템에서 수신된 패킷 부분만 검사해 이를 곧바로 스위칭하는 방식    블록 스토리지와 오브젝트 스토리지의 차이  블록 스토리지(Block Storage)와 오브젝트 스토리지(Object Storage)   블록 스토리지: 컴퓨터의 용량을 추가하는 것처럼 클라우드 상의 하드 디스크를 블록 스토리지라고 함\n  오브젝트 스토리지:사용자 계정별로 저장 공간을 할당할 수 있는 스토리지 시스템으로 블록 스토리지와는 다르게 단독으로 구성이 가능하며, 계정의 컨테이너 파일이나 데이터를 저장할 수 있는 저장 공간\n  대표적인 스토리지 서비스\n  아마존의 EBS와 S3:\n EBS(Elastic Block Store)는 블록 스토리지에 해당하는 서비스 EC2(Elastic Compute Cloud)은 생성한 인스턴스에 확장해서 사용할 수 있는 스토리지 서비스 S3는 오브젝트 스토리지에 해당하는 서비스로 사용자 계정에 해당하는 Owner, 컨테이너에 해당하는 Bucket, 파일이나 해당데이터에 해당하는 오브젝트로 구성되어있다.    오픈스택의 Cinder와 Swift\n Cinder는 오픈스택의 기본 서비스 중 하나로 블록 스토리지 서비스를 제공한다. Cinder는 cinder-volume, cinder-backup, cinder-scheduler, Volume Provider, cinder-api로 구성 Nova에서 제공하는 인스턴스의 확장 스토리지로 사용할 수 있다. Swift는 오픈스택의 기본 서비스 중 하나로 오브젝트 스토리지 서비스를 제공한다. Swift는 proxy-server, account-server, container-server, object-server, swift-api로 구성된다. proxy-server는 여러 대의 스토리지 노드로 구성된 account-server, container-server, object-server을 관리한다.    Ceph의 RBD와 RADOS\n Ceph는 모든 종류의 스토리지 서비스를 모아 놓은 오픈 소스 서비스라고 할 수 있다. RADOS라는 스토리지 노드 위에 LIBRADOS라는 RADOS 라이브러리가 있다. 아마존의 S3, 오픈스택의 Swift와 연동하는 RADOSGW(게이트웨이)가 있다 QEMU나 KVM에서 생성한 인스턴스를 블록 스토리지로 사용하는 RBD(Rados Block Device), 사용자의 편의성을 제공하려고 POSIX(표준 운영체제 인터페이스)를 제공하는 Ceph FS로 구성되어 있다.        1.6 클라우드 컴퓨팅을 활용한 다양한 IT 산업\n2장. 오픈스택이란?\n2.1 오픈스택의 역사 오픈스택 릴리스 웹 사이트 http://releases.openstack.org/ Nalee의 IT 이야기: http://naleejang.tistory.com/\n오픈스택 파운데이션과 커뮤니티\r- 오픈스택 파운데이션:\r- 나라별로 오픈스택 사용자 그룹을 운영하고 있다.\r- 사용자 그룹은 공식 사용자 그룹과 일반 사용자 그룹으로 나뉨\r- 오픈스택 사용자 그룹은 총 112개, 이중 공시기 사용자 그룹은 18개이며, 엠버서더로 활동하는 구성원은 총 12명, 아시아는 6명이다.\r- 오픈스택은 버전별 컨트리뷰터 활동을 그래프와 표로 보여주는 http://stackalytics.com/을 운영한다.\r 2.2 오픈스택과 아키텍처\n오픈스택: 오픈스택은 컴퓨트, 오브젝트 스토리지, 이미지, 인증 서비스 등이 유기적으로 연결되어 하나의 커다한 클라우드 컴퓨팅 시스템을 구축하는 것.\r개념 아키텍처로 살펴보는 오픈스택의 변화\r- 백사버전부터는 컴퓨트 서비스에는 Nova 추가\r- 스토리지 서비스에는 Swift 추가\r- 이미지 관리 서비스에는 Glance 추가\r- Nova, Swift, Glance의 인증을 담당하는 Keystone 추가\r- 서비스를 보다 쉽게 이용하려고 사용자에게 대시보드를 제공하는 Horizon 추가\r- 폴섬 버전부터는 네트워크 서비스와 블록 스로리지 서비스를 Quantum와 Cinder 로 분류함\r- Quantum은 기존 nova-network와 다르게 OpenFlow를 사용해서 여러 네트워크 컨트롤러의 지원이 가능\r- 하바나버전부터는 오케스트레이션 서비스인 Heat와 텔레미터 서비스인 Ceilometer가 있습니다.\r- 킬로 이후 버전부터는 빅데이터 프로세싱 프레임워크인 Sahara 추가\r- 데이터베이스 서비스인 Trove 추가\r- PXE나 IPMI를 사용해 베어메탈을 프로비저닝하는 Ironic 추가\r- 코어 서비스 6개와 이를 지원하는 많은 서비스를 표현한 빅텐트(Big-tent)라는 개념 추가\r논리 아키텍처로 살펴보는 오픈스택의 변화\r- 개념 아키텍처를 좀 더 자세히 표현한 오픈스택의 전체 구조\r상황별 오픈스택 구성 요소\r- 사내 클라우드 컴퓨팅 환경을 구축할 때나 퍼블릭 클라우드 서비스를 구성할 때 오픈스택을 주로 채택\r- 회사의 클라우드 환경을 어떤 목적으로 사용하느냐에 따라 선택해야할 서비스가 달라질 수 있음\rHTC(High Throughput Computing):\r- HTC 사용자는 종종 Nova 컴퓨트로 전환해 Horizon 대시보드로 단일 API 엔드포인트를 사용자에게 제공함.\r- Keystone은 일반적으로 사용자 계정이 저장되는 LDAP 백엔드를 연결하는 데 사용\r- 이런 종류의 프로젝트를 구성하려면 다음이 서비스가 필요함\r- 대시보드 서비스 Horizon\r- 텔레미터 서비스 Ceilometer\r- 블록 스토리지 서비스 Cinder\r- 오케스트레이션 서비스 Heat\r- 이미지 서비스 Glance\r- 인증 서비스 keystone\r- 컴퓨트 서비스 Nova\r웹 호스팅:\r- 웹 호스팅 회사 중 하나로 수백만 개의 호스팅 사용하는 데 오픈스택을 활용\r- Nova, Neutron, Keystone, Glance, Horizon 같은 일반적인 코어 서비스를 이용\r- 사용자 계정 데이터를 수집하고 요금을 청구할 때 일부 기술로 Ceilometer를 활용\r- 네트워크 서비스 Neutron\r- 대시보드 서비스 Horizon\r- 텔레미터 서비스 Ceilometer\r- 이미지 서비스 Glance\r- 인증 서비스 keystone\r- 컴퓨트 서비스 Nova\r퍼블릭 클라우드:\r- 오픈스택은 전 세계 사용자에에 IaaS를 제공하는 퍼블릭 클라우드를 지원\r- Nova, Glance, Keystone, Cinder, Neutron 같은 서비스를 제공\r- Swift를 사용해 오브젝트 스토리지 서비스를 제공, Designate는 DNSaaS(DNS as a Service)를 제공함\r- 네트워크 서비스 Neutron\r- 도메인 네임 서비스 Designate\r- 블록 스토리지 서비스 Cinder\r- 오브젝트 스토리지 서비스 Swift\r- 이미지 서비스 Glance\r- 인증 서비스 Keystone\r- 컴퓨트 서비스 Nova\r웹 서비스, 전자상거래:\r- 이베이, 오버스톡닷컴, 베스트바이 등 많은 회사가 오픈스택을 이용해 웹 서비스도 하고 전자상거래의 백엔드로도 사용\r- 상황에 맞춰 오픈스택 클라우드는 PCI 표준처럼 구성하기도 함\r- Trove는 내부 고객에게 데이터베이스 서비스인 DaaS를 제공, 네트워크 정의 소프트웨어 SDN은 Neutron을 제공\r- 네트워크 서비스 Neutron\r- 대시보드 서비스 Horizon\r- 데이터베이스 서비스 Trove\r- 블록 스토리지 서비스 Cinder\r- 이미지 서비스 Glance\r- 인증 서비스 Keystone\r- 컴퓨트 서비스 Nova\r컴퓨트 스타터 키트(Compute Starter Kit):\r- 더 많은 사람이 오픈스택을 사용할 수 있도록 하는 것이 컴퓨터 스타터 키트라고 함\r- 스타터 키트는 추가 기능으로 클라우드 확장할 수 있는 방법을 문서화로 제공하는 단순한 프로젝트를 의미함\r- 네트워크 서비스 Neutron\r- 이미지 서비스 Glance\r- 인증 서비스 Keystone\r- 컴퓨트 서비스 Nova\r빅데이터:\r- 다양한 리소스 데이터를 분석하는 빅데이터에도 활동 됨\r- 빅데이터 분석 서비스인 Sahara 프로젝트는 오픈스택 위에 빅데이터 응용프로그램(Hadoop, Spark)을 간단하게 제공할 수 있음\r- 네트워크 서비스 Neutron\r- 대시보드 서비스 Horizon\r- 베이메탈 서비스 Ironic\r- 빅데이터 서비스 Sahara\r- 이미지 서비스 Glance\r- 인증 서비스 Keystone\r- 컴퓨트 서비스 Nova\rDBaaS:\r- 대부분의 회사는 응용프로그램을 백업하려 데이터베이스에 크게 의존하며 일반적인 관리 자동화 및 스케일 아웃을 최우선으로 생각\r- 오픈스택 Trove 프로젝트는 이 기능을 제공 및 여러 SQL 및 NoSQL 백엔드를 지원\r- Ironic 프로젝트는 데이터베이스의 성능을 극대화하려고 베어메탈 프로비저닝을 제공\r- 네트워크 서비스인 Neutron\r- 대시보드 서비스 Horizon\r- 데이터베이스 서비스 Trove\r- 도메인 네임 서비스 Designate\r- 베어메탈 서비스 Ironic\r- 블록 스토리지 서비스 Cinder\r- 오브젝트 스토리지 서비스 Swift\r- 이미지 서비스 Glance\r- 인증 서비스 Keystone\r- 컴퓨트 서비스 Nova\r비디오 처리와 콘텐츠 전달:\r- 제작 스튜디오나 주요 케이블 서비스 제공 업체 같은 곳의 비디오 처리(Video Processing), 콘텐츠 전달(Contents Delivery)은 오픈스택의 보편적인 사용 예시임\r- Keystone에서 선보인 인증 표준은 이제 동일한 대시보드와 인증을 사용해 프라이빗 클라우드 및 퍼블릭 클라우드에서 비디오 콘텐츠를 원할하게 이동시킬 수 있음\r- 네트워크 서비스 Neutron\r- 오브젝트 스토리지 서비스 Swift\r- 인증 서비스 Keystone\r- 컴퓨트 서비스 Nova\r컨테이너 서비스:\r- 가상머신, 컨테이너, 베어메탈에서 실행되는 워크로드를 단일 클라우드에서 운영할 수 있도록 개발되었음\r- Kubernetes, Mesos, Docker 같은 새로운 컨테이너 오케스트레이션 엔징(COE, container Orchestration Engices)와 통합하려고 Magnum 프로젝트에 엑세스 할 수 있음\r- 네트워크 서비스 Neutron\r- 대시보드 서비스 Horizon\r- 베어메탈 서비스 Ironic\r- 블록 스토리지 서비스 Cinder\r- 이미지 서비스 Glance\r- 인증 서비스 Keystone\r- 컨테이너 서비스 Management\r- 컴퓨트 서비스 Nova\r 2.3 가상 서버를 생성하는 컴퓨트 Nova - 오픈 스택 Nova는 컴퓨트 서비스의 핵심이며, 하이퍼바이저, 메시지 Queue, 인스턴스 접속을 하는 콘솔 등의 다양한 기능이 유기적으로 연결되어 가상 서버를 생성할 수 있는 시스템을 구성\n논리 아키텍처 Nova\r- Nova는 대시보드나 콘솔에서 호출하는 nova-api에서 시작\r- Queue를 이용해 nova-compute에 인스턴스를 생성하라는 명령을 전달\r- nova-compute는 하이퍼바이저 라이브러리를 이용해 하이퍼바이저에 인스턴스를 생성하려는 명령어를 전달\r- 하이퍼바이저가 인스턴스를 생성\r- 생성된 인스턴스는 nova-api로 접근할 수 있으며 Nova의 몯느 기능은 메시지 Queue로 처리할 수 있음\rNova가 지원하는 하이퍼바이저의 종류\r- 기본 하이퍼바이저는 KVM과 QEMU\r- 프로바이더가 테스트하는 Hyper-V, VMware, XenServer, Sen via libvirt\r- 몇 번의 테스트만 하는 하이퍼바이저 드라이버인 베어메탈, Docker, LXC via libvirt\r노드별로 설치되는 Nova\r- nova-api: Nova의 REST API 서버를 담당\r- nova-cert: X509 인증서 서비스를 제공하는 서버 데이터 데몬\r- nova-conductor: 코디네이션과 데이터베이스 쿼리를 지원하는 서버 데몬\r- nova-consoleauth: nova-console 인증을 제공\r- nova-novncproxy: novnc-console과 호환되는 웹 소켓 프록시\r- nova-scheduler: VM 인스턴스를 실행할 컴퓨터 노드를 선택하는 역할을 수행\r- nova-novaclient: nova REST API를 사용하는 클라이언트 프로그램\r컴퓨터 노드에 설치\r- nova-compute-kvm: 인스턴스(가상 머신)와 관련된 모든 프로세스를 처리\r- python-guestfs: 파일 생성 기능을 지원하는 Python 라이브러리\r- qemu-kvm: KVM 하이퍼바이저\r 2.4 오브젝트 스토리지 Swift - 다른 서비스와는 다르게 단독으로 구성되며, 클라우드 스토리지 서비스를 구축 할 수 있음\n논리 아키텍처의 Swift\r- 오픈스택 Swift는 swift-proxy-server, swift-account-server, swift-container-server, swift-object-server로 구성\r- swift-proxy-server는 swift-account-server, swift-container-server, swift-object-server를 관리\r- 어카운트, 컨테이너는 별도의 메타데이터가 데이터베이스로 관리됨\r- 오브젝트는 저장 공간에 직접 저장되는 방식으로 설계되어 있음\r- swift-proxy-server는 오픈스택의 Object API를 제공\r- 사용자는 API를 사용해 데이터를 저장하거나 내려받을 수 있음\rSwift의 논리적 구성 요소\r- Swift의 구성은 스토리지 공간 여러 개를 합쳐 하나의 커다란 공간으로 가상화하고, 그 안에서 사용자만의 별도 스토리지 공간이 있는 것처럼 다시 가상화를 진행\r- 사용자는 특성에 따라 데이터를 분류해서 저장할 컨테이너를 생성하고 해당 컨테이너에 데이터를 저장\r- swift-proxy-server는 스토리지 노드 여러 개를 관리하며 사용자 인증을 담당, 최근에는 Keystone으로 인증을 처리하며, 프록시 서버와 함께 설치되기도 함\r- 스토리지 노드에는 swift-account-server, swift,compute-server, swift-object-server가 실행되며 실제 메타데이터파일이나 오브젝트에 해당하는 데이터 파일을 저장\rSwift의 특징\r- 인증: 사용자의 인증을 담당하는 기능\r- 어카운트(Account): 사용자 계정 및 컨테이너를 관리\r- 컨테이너: 저장 공간 단위로 컨테이너 안의 오브젝트 정보를 관리\r- 오브젝트: 실제 데이터\rSwift Ring\r- Swift 역시도 Nova를 구성할 떄와 마찬가지로 스토리지 노드가 여러 대 있음\r- 각 스토리지 노드에는 swift-account-server, swift-container-server, swift-object-server가 실행됨\r- 서버들은 관리자가 설정한 해당 포트로 서로 통신\r- 스토리지 노드 중 하나라도 손상이 되면 데이터를 잃지 않도록 데이터 복제(Replica)프로세스가 함께 실행됨\r- 스토리지 파일은 자신이 관리하는 데이터를 서로 공유하려고 Ring인 파일이 어느 노드에, 어떤 데이터가 들어 있는 지를 인지함\r- Ring파일은 프록시 노드에서 생성해 모든 스토리지 노드가 동일하게 가지고 있음\r- Ring 파일에는 디바이스 정보가 들어 있는데,\r- 디바이스를 구분하는 ID\r- 존(Zone) 번호\r- 스토리지 노드 IP\r- 포트\r- 디바이스 이름\r- 디바이스 비중\r- 기타 디바이스 정보\rSwift의 데이터 관리 방법\r- Swift는 사용자 게정을 관리하는 어카운트, 디렉터리 개념의 컨테이너, 실제 파일을 표현하는 오브젝트로 구성\r- Swift는 어카운트가 컨테이너를 포함하고, 컨테이너가 오브젝트를 포함하도록 관리함\r- 보통 Swift에서는 프록시 노드 한 대에 스토리지 노드 다섯 대를 구성하기를 권장\r- 프록시 노드들은 로드밸런서로 묶여 있어 사용자는 특정 URL 하나만 호출해도 스토리지 서비스를 자유롭게 사용가능\r- 파일을 올릴 때는 설정된 리플리카로 여러 스토리지 노드로 분산해서 저장, 다운로드 시 그 중 한 곳을 사용\rSwift와 Keystone\r- Swift에는 SwAuth를 이용하는 인증 방법과 Keystone을 이용하는 인증 방법이 있음\r- 최근에는 Keystone을 이용해서 주로 인증하며, Keystone에는 프로젝트, 사용자, 롤이 있음\r- 관리자(admin, swiftoperator)는 사용자와 컨테이너를 생성, 삭제할 수 있음\r- 관리자는 오브젝트도 올리기, 내려받기, 삭제를 할 수 있음\r- 일반 사용자(member)은 사용자와 컨테이너를 생성할 수 없음\r- 일반 사용자는 관리자가 미리 생성해서 권한을 준 컨테이너만 사용할 수 있음\r- 일반 사용자는 관리자가 설정한 권한으로 오브젝트 목록을 확인할 수 있음\r- 일반 사용자는 관리자가 설장한 권한으로 데이터를 올리고 내릴 수 있음\r- 특정 사용자에게 관리자(admin) 권한을 부여하려면 리셀러어드민(ResellerAdmin) 롤을 주어야 함\r- 해당 사용자는 관리자가 할 수 있는 기능을 모두 사용할 수 있음\rSwift의 이레이저 코딩(Eraure Coding) 기능과 스토리지 정책\r- 스토리지 저장 공간을 효율적으로 관리하는 것이 이레이져 코딩\r- 다양한 물리 스토리지 디바이스를 정책별로 사용할 수 있게 지원하는 스토리지 정책(Storage Policy)기능이 있음\r- 이레이져 코딩은 HDFS, RAID 외의 스토리지에서 데이터 저장 공간의 효율성을 높이려고 설계된 데이터 복제 방식\r- 이레이져 코딩은 이레이져 코드를 사용해 데이터를 인코딩하고, 데이터가 손실되면 디코딩 과정을 거쳐 원본 데이터를 복구하는 기법 중 하나\r- 이레이저 코드와 각 코드마다 사용하는 알고리즘은 다양한데 이런 알고리즘에 Reed-Solom on Code, Tahoe-Lafs, Weaver Code 등이 있음\r- 스토리지 정책은 여러 오브젝트링을 생성해 다양한 목적으로 클러스터를 세그먼트화 할 수 있음\r- 수정된 해시링을 통해 클러스터에서 데이터가 있어야 할 위치를 결정\r- 이레이저 코드를 사용해 콜드 스토리지(Cold Storage: 저전력 스토리지)도 정의 할 수 있음\r 2.5 운영체제 이미지를 관리하는 Glance - 이미지 서비스인 Glance는 Nova에서 생성하는 인스턴스의 운영체제에 해당하는 이미지를 관리 - 가상머신을 생성해 컴퓨터를 대신 사용, 이 때 필요한 운영체제의 이미지 파일을 Glance이 다양한 하이퍼바이저에서 사용할 수 있는 VM 이미지를 관리 및 VM에 설치된 운영체제를 보관, 관리 함\n논리 아키텍처의 Glance\r- Glance 사용자들은 glance-api로 이미지를 등록, 삭제, 관리할 수 있음\r- glance-api는 glance-registry와 Glance database에서 이미지를 관리함\r- 이미지를 등록할 때는 glance-registry로 Glance database에 저장됨\r- 등록된 이미지를 사용할 때는 Glance database에 바로 사용을 요청\r- 관리자는 운영하려는 운영체제의 이미지를 glance-registry로 Glance database에 등록\r- 이미 저장된 이미지만으로도 인스턴스를 생성할 수 있음, 즉 Glance는 Nova 옆에 항상 따라다님\r가상 머신 이미지 포맷\r- 대체적으로 이미지를 내려받아 Glance에 등록할 때는 raw 포맷이나, qcow2 포맷으로 등록함\raki: 아마존 커널 이미지\rami: 아마존 머신 이미지\rari: 아마존 ram 디스크 이미지\riso: 광학 디스크나 CD-ROM의 데이터 콘텐츠를 지원하는 아카이브 포맷\rqcow2: QEMU 에뮬레이터가 지원하는 포맷, 동적으로 확장할 수 있으며, Copy on Write를 지원\rraw: 구조화되지 않은 디스크 포맷\rvdi: VirtalBox 모니터와 QEMU 에뮬레이터가 지원하는 디스크 포맷\rvhd: VHD 디스크 포맷은 VMware, Xen 마이크로소프트, VirtualBox 같은 가상 머신 모니터가 사용하는 일반적인 디스크 포맷\rvhdx: VHDX 디스크 포맷은 큰 디스크 크기를 지원하는 VHD 형식의 향상된 버전\rvmdk: 일반적인 디스크 포맷으로 여러 가상 머신 모니터가 지원\r컨테이너 포맷(container Format)\r- 컨테이너 포맷은 VM 이미지가 실제 VM 메타데이터를 포함하는 파일 포맷인지를 나타냄\raki: 아마존 커널 이미지\rami: 아마존 머신 이미지\rbare: 아마존 ram 디스크 이미지\rdocker: Docker 컨테이너 포맷\rova: tar 파일의 OVF 패키지\rovf: OVF 컨테이너 포맷\r지원하는 운영체제 이미지\r- 오픈스택 Nova에서 인스턴스를 생성할 때는 이미 하이퍼바이저에서 생성한 가상 머신에 운영체제를 설치한 이미지를 Glance에 등록시키고, 등록시킨 이미지를 이용해서 인스턴스를 생성\r 2.6 인증을 관리하는 Keystone - 인증 서비스인 Keystone은 인증 토큰을 비롯해 테넌트 및 사용자 관리, 서비스의 엔드포인트 URL 등을 관리하는 기본 서비스\n논리 아키텍처의 Keystone\r- 논리 아키텍처에서 Keystone은 Keystone-all, Database와 LDAP로 구성\r- Keystone-all에는 토큰(Token), 카탈로그(Catalog), 정책(Poliy), 인증(Identity) 등이 포함되어 있음\r- Token Backend는 사용자별 토큰을 관리\r- Catalog Backend는 오픈스택에서 모든 서비스의 엔드포인트 URL을 관리\r- Policy Backend는 테넌트, 사용자 계정, 롤 등을 관리\r- Identity Backend로 사용자 인증을 관리\r오픈스택에서 Keystone 위치\r- 오픈스택 Keystone은 모든 서비스를 관장하는 위치이 있음\r- Keystone은 타인이나 해커에게서 시스템을 안전하게 보호하고 사용자 등록, 삭제, 권한 관리, 사용자가 접근할 수 있는 서비스 포인트 관리까지 전반적인 사용자 인증을 관리\r도메인, 프로젝트, 그룹, 사용자, 롤의 개념과 관계\r- Keystone은 사용자 인증 부분과 서비스 인증 부분을 관리함\r- 사용자일 때는 사용자 ID와 패스워드, 사용자 권한의 롤(Roll)을 등록\r- 서비스일 때는 서비스를 등록하고 해당 서비스의 엔드포인트 URL을 등록\r- 도메인(Domain)은 서로 분리되어 있음\r- 각 도메인에는 프로젝트와 사용자가 있음\r- 프로젝트는 사용자를 가질 수 있음\r- 사용자에게는 롤이 있으며, 여러 프로젝트의 구성원이 될 수 있음\r- 관리자 롤(Admin Role)을 가진 사용자끼리, 일반 사용자롤(Member Role)을 가진 사용자끼리 그룹핑(Grouping)을 할 수 있음\r- Keystone의 속성비교\r- 회사의 Keystone은 도메인에 해당\r- 관리자와 일반 사용자는 Keystone의 프로젝트에 해당\r- 시스템을 잘 개발하는 직원은 관리자이면서 사용자에 해당\r- 관리자가 시스템을 이용해 할 수 있는 역할은 롤에 해당\r- 메뉴는 서비스에 해당하며, 메뉴에 연결할 링크는 엔드포인트 URL에 해당\r 2.7 네트워크를 관리하는 Neutron - 폴섬 버전에서는 Quantum, 그리즐리 버전에서는 Neutron으로 릴리스 되었음 - 기존 오픈스택의 네트워크 서비스는 nova-network가 담당했으나, SDN(Software Defined Network) 개념이 들어오면서 별도의 네트워크 프로젝트로 분리되었음\n논리 아키텍처의 Neutron\r- Neutron은 neutron-server, Neutron L2 Agent* 및 neutron-l3-agent*, neutron-dhcp-agent, Queue, Neutron Database, Neutron 3rd Party Plugin으로 구성\r- Neutron은 다양한 네트워크 플러그인이나 네트워크 모델을 지원\r- 사용자는 Neutron API를 이용해 neutron-server로 IP 할당을 요청\r- neutron-server 들어온 요청을 Queue로 다시 요청\r- Queue는 neutron-dhcp-agent와 Neutron 3rd Party plugin으로 IP 할당 지시를 내림\r- neutron-dhcp-agent와 Neutron 3rd Party Plugin은 지시 받은 작업 수행을 시작\r- neutron-server는 수시로 작업 상태를 Neutron database에 저장\r- 할당된 IP를 인스턴스에서 사용 가능\rNeutron이 지원하는 플러그인의 종류\r- 사이트 참조\rNeutron과 VRRP, DVR\r- VRRP(Virtual Router Redundancy Protocl)로 랜에서 정적으로 설정된 기본 라우터를 사용할 때, 하나 이상의 백업 라우터를 사용하는 방법을 제공하는 인터넷 프로토콜\r- DVR(Distributed Virtual Router)이란 VRRP 기능을 향상시키고, 분산 라우팅 기능과 HA(High Availability), 로드밸런싱 기능을 사용할 수 있음\r- 기존 레거시 HA 라우터와 마찬가지로 DVR/ SNAT(Static NAT), HA 라우터는 다른 노드에서 실행되는 L3 Agent의 백업 DVR/ SNAT 라우터에서 SNAT 서비스 장애를 빠르게 해결 가능\r 2.8 블록 스토리지를 관리하는 Cinder - Nova에서 생성된 인스턴스에서 확장해서 사용할 수 있는 저장 공간을 생성, 삭제하고 인스턴스에 연결 할 수 있는 기능을 제공\n논리 아키텍처의 Cinder\r- 논리 아키텍처의 Cinder은 cinder-api, Queue, Cinder Database, cinder-volume, Volume Provider, cinder-scheduler로 구성되어짐\r- 아키텍처의 특징\r- cinder-api로 볼륨을 추가, 삭제할 수 있음\r- cinder-volume은 볼륨을 실제서 생성 및 Cinder Database에 볼륨 정보를 업데이트\r- Cinder는 물리 하드 디스크를 LVM(Logical Volume Manager)으로 설정\r- 설정된 LVM은 cinder-conf와 nova.conf의 환경을 설정해서 cinder-volume을 할당할 수 있음\r- cinder-api로 생성된 볼륨은 단일 인스턴스 또는 여러 인스턴스에 할당 할 수 있음\rCinder가 지원하는 블록 스토리지 드라이버\r- Cinder 기본 블록 스토리지 드라이버는 iSCSI 기반의 LVM\r- LVM이란 하드 디스크를 파티션 대신 논리 볼륨으로 할당하고, 디스크 여러 개를 좀 더 효율적이고 유연하게 관리할 수 있는 방식을 의미\r- 블록 장치는 물리 볼륨으로 초기화해야 하며, 논리 볼륨으로 생성하려면 물리 볼륨을 볼륨 그룹으로 통합해야 함\r 2.9 대시보드 Horizon - 사용자가 웹 UI로 인스턴스 생성, 삭제, 관리 등을 쉽고 빠르게 처리할 수 있게 지원 - Horizon은 아파치 웹 서버를 사용 및 Python, Django 프레임워크로 구현되어 있음\n논리 아키텍처의 Horizon\r- 논리 아키텍처에서 보이는 Horizon은 단순히 Horizon 자체 모듈만 있음\r- 모든 서비스의 API와 연동해서 사용자에게 웹 서비스를 제공 할 수 있음\r 2.10 옵셔널 서비스 - 컴퓨트, 오브젝트 스토리지, 이미지, 인증, 네트워크, 블록 스토리지, 대시보드 서비스만으로도 오픈스택을 구축할 수 있음 - 텔레미터, 오케스트레이션, 데이터베이스 같은 서비스를 제대로 사용한다면 효율적인 클라우드 관리와 운영에 많은 도움을 많을 수 있음\n텔레미터 서비스 Ceilometer\r- 클라우드에서 배포된 자원의 사용량과 성능을 측정해 사용자가 자원 상태를 모니터링 할 수 있는 기능을 제공\r- Ceilometer는 다음 요소로 구성됨\r- ceilometer-colletcor: 중앙 관리 서버에서 실행되며, 메시지 Queue(에이전트에서 오는 미터링 데이터 알림)을 모니터링 할 수 있음\r- ceilometer-agent-notification: ceilometer-collector와 함꼐 중앙 관리서베에서 실행, 메시지 Queue를 이용해 이벤트와 미러링 데이터를 기록\r- ceilometer-agent-compute: 각 컴퓨팅 노드에 설치해서 실행, 자원 활용 통계로 사용\r- ceilometer-account-central: 중앙 관리 서버에서 실행, 인스턴스에 연결되지 않은 자원이나 컴퓨터 노드의 활용 가능한 자원 통계를 폴링\r- ceilometer-alarm-evaluator: 하나 이상의 중앙 관리 서버에서 실행, 슬라이딩 시간대에 임계 값을 추가할 때 발생하는 경보 시점을 결정\r- ceilometer-alarm-nottifier: 하나 이상의 중앙 관리 서버에서 실행되며, 샘플을 수집하는 임계 값 평가에 따라 알람을 설정 할 수 있음\r- ceilometer database: 수집한 데이터를 저장할 Ceilometer 데이터 베이스\r- ceilometer-api: 하나 또는 그 이상의 중앙 관리 서버에서 실행되며 데이터베이스에서 데이터 엑세스를 제공\r- Ceilometer는 리버티 버전에서 기존에 알람 서비스를 하던 부분을 aodh로 분리, 알람서비스를 위해서는 별도로 aodh를 설치해야 됨\r오케스트레이션 서비스 Heat\r- 오케스트레이션은 자원 관리, 배치, 정렬을 자동화하는 것\r- 오케스트레이션은 인스턴스 생성에 대한 일련의 과정을 자동화해서 인프라를 쉽게 배포할 수 있도록 하는 탬플릿 기반 엔진\r- 오케스트레이션에서 사용되는 템플릿 언어는 인프라, 서비스, 응용프로그램, 프로비저닝, 자동화 컴퓨팅, 스토리지, 네트워킹, 자동 스케일링 등에 사용 가능\r- Heat는 다음 요소로 구성\r- Heat: Heat 도그는 AWS CloudFormation API와 Heat API가 서로 커뮤니케이션 할 수 있는 CLI\r- heat-api: RPC heat 엔진에 전송해서 요청된 API를 처리한 REST API를 제공\r- heat-api-cfn: AWS CloudFormation과 호환되는 AWS 타입의 Query API를 제공\r- heat-engine: 템플릿을 생성하고, Consumer(API를 사용하려고 접근하는 애플리케이션이나 서비스)를 다시 이벤트로 제공하는 오케스트레이션의 주 작업을 수행\r데이터베이스 서비스 Trove\r- 관계형 데이터베이스 기능을 활용가능, 클라우드 사용자와 데이터 베이스 관리자는 필요에 따라 Trove를 통해 데이터베이스 인스턴스를 제공, 관리가 가능\r- Trove는 다음 요소로 구성\r- python-troveclient: 클라이언트에서 콘솔로 trove-api를 실행할 수 있게 지원\r- trove-api: RESTful API 방식의 JSON을 지원, Trove인스턴스를 관리하고 프로비저닝\r- trove-taskmanager: 인스턴스 프로비저닝을 지원, 라이프 사이클 관리 및 운영하는 작업을 수행\r- trove-conductor: 호스트에서 실행되는 서비스로 호스트 정보를 업데이트 및 게스트 인스턴스 메시지를 수신\r- trove-guestagent: 게스트 인스턴스 안에서 실행, 데이터 베이스 작업을 실행, 관리\r데이터 프로세싱 서비스 Sahara\r- 오픈스택 위 빅데이터를 다루기 위한 Hadoop이나 Spark를 쉽게 제공할 수 있게 도와주는 서비스\r- Sahara는 다음 요소로 구성\r- Auth: 클라이언트 인증 및 권한을 부여, 오픈스택 인증 서비스 Keystone과 통신\r- DAL: Data Access Layer의 약어로 데이터 엑세스 계층을 의미, DB의 내부 모델을 유지\r- Secure Storage Access Layer: 암호 및 개인 키 같은 인증 데이터를 안전한 저장소에 보관\r- Provisioning Engine: 오픈스택 컴퓨트 서비스 Nova, Heat, Cinder, Glance, Designate와 통신을 담당하는 구성 요소\r- Vendor Plugins: 프로비저닝된 VM에서 데이터 처리 프레임워크를 구성하고 시작하는 기능을 담당하는 플러그 가능한 메커니즘\r- EDP: Elastic Data Processing의 약어로 Sahara가 제공하는 클러스테에서 데이터 처리 작업을 예약하고 관리\r- REST API: REST HTTP 인터페이스로 Sahara 기능을 호출\r- Python Sahara Client: 다른 오픈스택 구성 요소와 마찬가지로 Sahara에는 자체 Python 클라이언트가 있음\r- Sahara Pages: Sahara용 GUI로 오픈스택 대시보드인 Horizon에 있음\r베어메탈 서비스 Ironic\r- 물리적인 컴퓨터를 관리하고 자원을 제공하는 구성요소의 모음\r- Ironic은 구성에 따라 다음과 같은 다른 여러 오픈스택 서비스와 상호 작용할 수 있음\r- IPMI 메트릭을 사용하는 오픈스택 텔레미터 모듈(Ceilometer)\r- 인증 요청 및 다른 오픈스택 서비스를 인증하는 오픈스택 인증 서비스(Keystone)\r- 이미지 및 이미지 메타데이터를 검색할 수 있는 오픈스택 이미지 서비스(Glance)\r- DHCP 및 네트워크를 구성하는 오픈스택 네트워크 서비스(Neutron)\r- 오픈스택 네트워크 서비스인 Nova는 베어메탈 서비스와 함꼐 작동하고, 인스턴스를 관리하는 사용자용 API를 제공\r- 오픈스택 컴퓨트 서비스는 베어메탈 서비스가 제공하지 않는 예약 기능, 테넌트 할당량, IP 할당, 기타 서비스를 제공\r- 오픈스택 오브젝트 스토리지 서비스인 Swift는 드라이브 설정, 사용자 이미지, 배포 로그 및 점검 데이터 임시 저장 장소를 제공\r- Ironic은 다음 요소로 구성\r- ironic-api: 응용프로그램 요청을 원격 프로시저 호출(RPC)을 이용해서 ironic-conductor로 전송한 후 응용프로그램 요청을 처리하는 RESTful API\r- ironic-conductor: 노드를 추가, 편집, 삭제하며 IPMI 또는 SSH를 사용해 노드를 켜고 끌수 있음, 베어메탈 노드를 프로비저닝, 배치 정리 수행\r- ironic-python-agent: 원격 엣세스, 하드웨어 제어, 하드웨어 기본 스펙으로 ironic-conductor 및 ironic-inspector 서비스를 제공하려고 임시 RAM 디스크에서 실행되는 python 서비스\r기타 서비스\r- 메시징 서비스 Zaqar\r- 공유 파일 시스템 서비스 Manila\r- DNS 서비스 Designate\r "});index.add({'id':17,'href':'/docs/blog/study/web/css/','title':"C S S",'content':" #css\r태그 {\r스타일\r}\r*{\r}\r전체선택\r.클래스명{\r스타일\r}\r\u0026lt;h1 class=\u0026quot;클래스명\u0026quot;\u0026gt;\rid 선택자\r#아이디명{\r스타일\r}\r단위: em, ex, px, pt\rfont-family: \u0026lt;글꼴 이름[,\u0026lt;글꼴 이름\u0026gt;, \u0026lt;글꼴 이름\u0026gt;];\rfont-size: \u0026lt;절대 크기\u0026gt; | \u0026lt;상대 크기\u0026gt; | \u0026lt;크기\u0026gt; | \u0026lt;백분율\u0026gt;\rfont-weight: noraml | bold | bolder | lighter | 100 | 200 ...\rfont-variant: normal | small-caps\rfont-style: normal | italic | oblique\rfont: .....\r#text 스타일\rcolor: \u0026lt;색상\u0026gt;\rrgb(0,200,0). rgba(n,n,n,n), #0000ff, blue\rtext-decoration: none | underline | overline | line-through\rtext-transform: none | capitalize | uppercase | lowercase | full-width\rtext-shadow: none | \u0026lt;가로 거리\u0026gt; \u0026lt;세로 거리\u0026gt; \u0026lt;번짐 정도\u0026gt; \u0026lt;색상\u0026gt;\rwhite-space: normal | nowrap | pre | pre-line | pre-wrap\rletter-spacing: normal | \u0026lt;크기\u0026gt;\rword-spacing: normal | \u0026lt;크기\u0026gt;\r#문단 스타일\rdirection: ltr | rtl\rltr 왼쪽에서 오른쪽으로 표시\rrtl 오른쪽에서 왼쪽으로 표시\rtext-align: start | end | left | right | center | justtify | match-parent\rtext-justfy: auto | none | inter-word | distribute\rtext-indent: \u0026lt;크기\u0026gt; | \u0026lt;백분율\u0026gt; 들여쓰기\rtext-overflow: clip | ellipsis 너치는 텍스트를 자르기 | ...로 표시\rline-height: normal | \u0026lt;숫자\u0026gt; | \u0026lt;크기\u0026gt; | \u0026lt;백분율\u0026gt; | inherit 줄 간격 조절하기\r#리스트\rlist-style-type: 타입\rlist-style-image: url(\u0026lt;이미지\u0026gt;) | none\rlist-style-position: inside | outside 안쪽 들여쓰기 | 비깥 쪽 들여쓰기\r#색\rbackground-color:#000000\rbackground-clip: border-box | padding-box | content-box 박스 외곽까지 적용 | 테두리를 뺸 페딩까지 적용 | 내용부분에만 적용\rbackground-image: url('파일 경로')\rbackground-repeat: repeat | repeat-x | repeat-y | no-repeat 반복 | 가로로 반복 | 세로로 반복 | 반복 x\rbackground-size: auto | contain | cover | \u0026lt;크기 값\u0026gt; | \u0026lt;백분율\u0026gt; 원래 사이즈 | 다 표시되게 | 전체맞춤\rbackground-positon: \u0026lt;수평 위치\u0026gt; \u0026lt;수직 위치\u0026gt;\r수평 위치: left | center | right | \u0026lt;백분율\u0026gt; | \u0026lt;길이 값\u0026gt;\r수직 이치: top | center | bottom | \u0026lt;백분율\u0026gt; | \u0026lt;길이 값\u0026gt;\rbackground-origin: border-box | padding-box | content-box 박스 모델의 가장 외곽인 테두리가 기준 | 패딩 기준 | 내용이 기준\rbackground-attachment: scroll | fixed 화면 스크롤과 함께 배경이미지가 이동 | 이미지 고정\r#그라데이션\rlinear-gradient( \u0026lt;각도\u0026gt; to \u0026lt;방향\u0026gt;, color-stop, [color-stop,..])\rbackground:linear-gradient(to bottom, #06f, white 30%, #06f)\r방향 값: to top | to left | to right | to bottom\rradial-gradient( \u0026lt;최종 모양\u0026gt; \u0026lt;크기\u0026gt; at \u0026lt;위치\u0026gt;, color-stop, [color-stop..])\rbackground radial-gradient(cicrle at 10% 10%, white,blue) background: repeating-linear-gradient(yellow, yellow 20px, red 20px, red40px)\r#박스모델\rwidth: \u0026lt;크기\u0026gt; | \u0026lt;백분율\u0026gt; | auto\rheight: \u0026lt;크기\u0026gt; | \u0026lt;백분율\u0026gt; | auto\rdisplay: none | contents | block | inline | inline-block | table | table-cell\rborder:style: none | hidden | dashed | dotted | double | groove | inset | outset | ridge | solid\r테두리 없음 | 투명 | 점선 | 작은 점선 | 이중선 | 파인 홈 | n | n | n | 실선\rborder-top | right | bottom | left | width -width: \u0026lt;크기\u0026gt; | thin | medium | thick\rborder-radius-top | bottom-left | right-radius: \u0026lt;크기\u0026gt; | \u0026lt;백분율\u0026gt;\rbox-shadow: none | \u0026lt;그림자 값\u0026gt; [, \u0026lt;그림자 값\u0026gt;]*\r\u0026lt;그림자 값\u0026gt; = \u0026lt;수평 거리\u0026gt; \u0026lt;수직 거리\u0026gt; \u0026lt;흐림 정도\u0026gt; \u0026lt;번짐 정도\u0026gt; \u0026lt;색상\u0026gt; inset\rmargin- top | right | bottom | left: \u0026lt;크기\u0026gt; | \u0026lt;백분율\u0026gt; | auto\rmargin: \u0026lt;크기\u0026gt; | \u0026lt;백분율\u0026gt; | auto\rpadding- top | right | bottom | left: \u0026lt;크기\u0026gt; | \u0026lt;백분율\u0026gt; | auto\rpadding: \u0026lt;크기\u0026gt; | \u0026lt;백문율\u0026gt; | auto\rhover{\r마우스가 올라가져 있을 때의 반응\r}\r "});index.add({'id':18,'href':'/docs/blog/study/web/html/','title':"H T M L",'content':"HTML \rExpand\r↕\r\rHTML 기본양식 \u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt;\r\u0026lt;style\u0026gt;\r\u0026lt;/style\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;/body\u0026gt;\r \r\r\r태그 줄 바꾸기  \u0026lt;br\u0026gt;\r 구분선  \u0026lt;hr\u0026gt;\r 제목  \u0026lt;h1- h6\u0026gt; \u0026lt;/hn\u0026gt;\r 문단  \u0026lt;p\u0026gt; \u0026lt;/p\u0026gt;\r 입력을 그대로 표시하는 태그  \u0026lt;pre\u0026gt; \u0026lt;/pre\u0026gt;\r 인용문을 넣는 태그  \u0026lt;blockquote\u0026gt; \u0026lt;/blockquote\u0026gt;\r 인용문을 인 라인에 넣는 태그  \u0026lt;q\u0026gt; \u0026lt;/q\u0026gt;\r text 밑줄  \u0026lt;u\u0026gt; \u0026lt;/u\u0026gt;\r 굵은 텍스트  \u0026lt;b\u0026gt; \u0026lt;/b\u0026gt;\r 텍스트 강조  \u0026lt;strong\u0026gt; \u0026lt;/strong\u0026gt;\r 형광펜 텍스트  \u0026lt;mark\u0026gt;\u0026lt;/mark\u0026gt;\r 동아시아 글자 표시 rt는 읽는 방법표기법  \u0026lt;ruby\u0026gt; \u0026lt;rt\u0026gt; \u0026lt;/rt\u0026gt; \u0026lt;/ruby\u0026gt;\r 이탤릭 체 Emphasized tag  \u0026lt;em\u0026gt; \u0026lt;/em\u0026gt;\r 줄 찍  \u0026lt;del\u0026gt; \u0026lt;/del\u0026gt;\r 인설트 태그  \u0026lt;ins\u0026gt; \u0026lt;/ins\u0026gt;\rThis is \u0026lt;sub\u0026gt; sub \u0026lt;sub\u0026gt; text \u0026lt;/sub\u0026gt; \u0026lt;/sub\u0026gt;  \u0026lt; \u0026gt; 태그 요소  \u0026amp;lt; \u0026amp;gt;\r 스페이스바  \u0026amp;nbsp;  약자 속성, title 속성을 함께 사용가능  \u0026lt;addr\u0026gt; \u0026lt;/addr\u0026gt;\r 포스트에서 참고 내용을 표시  \u0026lt;cite\u0026gt; \u0026lt;/cite\u0026gt;\r 컴퓨터 인식코드  \u0026lt;code\u0026gt; \u0026lt;/code\u0026gt;\r 키보드, 음성 입력  \u0026lt;kbd\u0026gt; \u0026lt;/kbd\u0026gt;\r 작게 표시 (부가정보)  \u0026lt;small\u0026gt; \u0026lt;/small\u0026gt;\r 아래 첨자  \u0026lt;sub\u0026gt; \u0026lt;/sub\u0026gt;\r 위 첨자  \u0026lt;sup\u0026gt; \u0026lt;/sup\u0026gt;\r 취소선  \u0026lt;s\u0026gt; \u0026lt;/s\u0026gt;\r List #list\r\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt; \u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt; \u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\rul의 종류: disc, circle, sqaure, none\r\u0026lt;ol\u0026gt;\r\u0026lt;li\u0026gt; \u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt; \u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt; \u0026lt;/li\u0026gt;\r\u0026lt;ol\u0026gt;\rol의 종류: 1, i, l, a, A, none\r\u0026lt;dl\u0026gt;\r\u0026lt;dt\u0026gt; \u0026lt;/dt\u0026gt;\r\u0026lt;dd\u0026gt; \u0026lt;/dd\u0026gt;\r\u0026lt;dt\u0026gt; \u0026lt;/dt\u0026gt;\r\u0026lt;dd\u0026gt; \u0026lt;/dd\u0026gt;\r\u0026lt;/dl\u0026gt;\r p { color : xx; background: xx; adding: xx; }\nxx-color: rgb(x,x,x); #xxxxxx; hsl(x,x%,x%)\n링크태그 인터넷 링크  \u0026lt;a href=\u0026quot;링크할 주소\u0026quot; [속성=\u0026quot;속성 값\u0026quot;]\u0026gt; \u0026lt;/a\u0026gt;\r\u0026lt;a href =\u0026quot;도메인 주소\u0026quot;\u0026gt; \u0026lt;/a\u0026gt;\ra 태그 안에서 사용 가능한 요소\rhref\r링크한 문서나 사이트의 주소를 입력\rtarget\r링크한 내용이 표시될 위치를 지정\rtarget =\u0026quot;_blank\u0026quot; 링크 내용이 새 창이나 새 탭에서 열림\rtarget =\u0026quot;_slef\u0026quot; target 속성의 기본 값으로 링크가 있는 화면에서 열림\rtarget =\u0026quot;_parent\u0026quot; 프레임을 사용했을 때 링크 내용을 부모 프레임에 표시\rtarget =\u0026quot;_top\u0026quot; 프레임을 사용했을 떄 프레임을 벗어나 링크 내용을 전체 화면에 표시\rdownload\r링크한 내용을 보여주는 것이 아니라 다운로드\rrel\r현재 문서와 링크한 문서의 관계를 알려줌\rhreflang\r링크한 문서의 언어를 지정\rtype\r링크한 문서의 파일 유형을 알려줌\ra 대신 iframe을 사용시 액자식 구성 사용 가능\r#앵커 기능\r\u0026lt;태그 id=\u0026quot;앵커 이름\u0026quot;\u0026gt; 텍스트 또는 이미지\u0026lt;/태그\u0026gt;\r\u0026lt;a href=\u0026quot;#앵커 이름\u0026quot;\u0026gt;텍스트 또는 이미지\u0026lt;/a\u0026gt;\r 이미지 링크  \u0026lt;img src=\u0026quot;이미지의 경로\u0026quot; 속성값=\u0026quot;\u0026quot;\u0026gt;\rwidth=\u0026quot;n\u0026quot;\r이미지의 넓이를 지정\rheight=\u0026quot;n\u0026quot;\r이미지의 높이를 지정\ralt=\u0026quot;설명\u0026quot;\r이미지의 설명을 지정\r\u0026lt;figure\u0026gt; 요소 \u0026lt;/figure\u0026gt;\r\u0026lt;figcaption\u0026gt; 설명 \u0026lt;/figcaption\u0026gt;\r요소로 묶은 것에 대한 설명을 붙임\r\u0026lt;map name=\u0026quot;이름\u0026quot;\u0026gt;\r\u0026lt;area\u0026gt;\r\u0026lt;area shape=\u0026quot;rect\u0026quot; coords=\u0026quot;n,n,n,n\u0026quot; href=\u0026quot;주소\u0026quot; alt=\u0026quot;설명\u0026quot;\u0026gt;\r...\r\u0026lt;/map\u0026gt;\r\u0026lt;img src=\u0026quot;이미지 파일\u0026quot; usemap=\u0026quot;#맵이름\u0026quot;\u0026gt;\r맵의 속성\ralt\r대체할 텍스트를 지정\rcoords\r링크로 사용할 영역을 시작 좌표와 끝 좌표를 이용해 지정\rdownload\r링크를 클릭했을 때 링크 문서를 다운로드\rhref\r링크 문서(사이트) 경로를 지정\rmedia\r링크 문서(사이트)를 어떤 미디어에 최적화시킬지 지정\rrel\r현재 문서와 링크 문서 사이의 관계를 지정\rshape\r링크로 사용할 영역의 형태를 지정\rtarget\r링크를 표시할 대상을 지정\rtype\r링크 문서의 미디어 유형을 지정\r#talbe\r\u0026lt;table\u0026gt;\r\u0026lt;th\u0026gt;제목 칸\u0026lt;/th\u0026gt;\r\u0026lt;tr\u0026gt; 1행\r\u0026lt;th\u0026gt; 1열 \u0026lt;/th\u0026gt;\r\u0026lt;td colspan=\u0026quot;2\u0026quot;\u0026gt;\u0026lt;/td\u0026gt;\r\u0026lt;tr\u0026gt; 2행\r\u0026lt;th\u0026gt; 1열 \u0026lt;/th\u0026gt;\r\u0026lt;td rowspan=\u0026quot;2\u0026quot;\u0026gt;\u0026lt;/td\u0026gt;\r\u0026lt;/table\u0026gt;\r\u0026lt;caption\u0026gt; \u0026lt;/caption\u0026gt;\rtable 태그 뒤에 오며 표 제목\r\u0026lt;figcaption\u0026gt; \u0026lt;/figcaption\u0026gt;\r제목을 표 앞이나 뒤에 붙일 수 있음\r\u0026lt;p id=\u0026quot;summary\u0026quot;\u0026gt; 설명\u0026lt;/p\u0026gt;\r\u0026lt;talbe aria-describedby=\u0026quot;summary\u0026quot;\u0026gt;\r서머리의 설명 값을 출력\r\u0026lt;/talbe\u0026gt;\r\u0026lt;colgroup\u0026gt;\r\u0026lt;col style=\u0026quot;\u0026quot;\u0026gt;\r\u0026lt;col span=\u0026quot;n\u0026quot;\u0026gt;\r\u0026lt;/colgroup\u0026gt;\r inline 타그\n#form tag\r\u0026lt;form 속성=\u0026quot;속성 값\u0026quot;\u0026gt; 여러 폼 요소\u0026lt;/form\u0026gt;\rform 태그의 속성\rmethod\r사용자가 입력한 내용들을 서버 쪽 프로그램으로 어떻게 넘겨줄지 지정합니다.\rget - 주소 표시줄을 사용자가 입력한 내용이 그대로 드러납니다.\rpost - 대부분 이 방식을 이용 입력 내용에 길이에 제한을 받지 않음\rname\r폼의 이름을 지정\raction\r태그 안의 내용들을 처리해 줄 서버 상의 프로그램을 지정\rtarget\r태그에서 지정한 스크립트 파일을 현재 창이 아닌 다른 위치에서 열도록 지정\rautocomplete\r자동완성기능 (자동으로 켜져있음)\r\u0026lt;label [속성 =\u0026quot;속성 값\u0026quot;] \u0026gt; 레이블 \u0026lt;input ...\u0026gt; \u0026lt;/label\u0026gt;\r\u0026lt;label for=\u0026quot;id이름\u0026quot;\u0026gt; 레이블 \u0026lt;/label\u0026gt;\r\u0026lt;input id=\u0026quot;id이름\u0026quot; [속성 = \u0026quot;속성 값\u0026quot;]\u0026gt;\r\u0026lt;fieldset [속성=\u0026quot;속성 값\u0026quot;]...\u0026gt; \u0026lt;/fieldset\u0026gt;\r태그 사이의 폼들을 하나의 영역으로 묶어 줌\r\u0026lt;legend\u0026gt; 제목 \u0026lt;/legend\u0026gt;\rfieldset의 안에 사용하며 내용을 나눠주는 데 사용되어짐\r input 태그  \u0026lt;input type=\u0026quot;유형\u0026quot; [속성 =\u0026quot;속성 값\u0026quot;]\u0026gt;\rinput 타입의 요소\rhidden\r사용자에게 보이지 않지만 서버로 넘겨지는 값을 가짐\rtext\r한 줄 짜리 텍스트를 입력할 수 있는 상자를 넣음\rname - 텍스트 필드를 구별할 수 있도록 이름을 붙임\rsize - 텍스트 필드의 길이를 지정\rvalue - 텍스트 필드 요소가 화면에 표시될 때 텍스트 필드 부분에 표시될 내용\rmaxlengh - 텍스트 필드에 입력할 수 있는 최대 문자 개수\r\u0026lt;textarea name=\u0026quot;\u0026quot; id=\u0026quot;\u0026quot; cols=\u0026quot;30\u0026quot; rows=\u0026quot;10\u0026quot;\u0026gt;\u0026lt;/textarea\u0026gt;\rsearch\r검색상자\rtel\r전화번호 입력 필드\rurl\rURL 주소 입력 필드\remail\r메일 주소 입력 필드\rpassword\r비밀번호 입력 필드\rdatetime\r국제 표준시로 설정된 날짜와 시간\rdatetime-local\r사용자가 있는 지역을 기준 지정\rdate\rmonth\rweek\rtime\r사용자가 있는 지역을 기준으로 지정\rmin 날짜나 시간의 최솟값을 지정\rmax 날짜나 시간의 최댓값을 지정\rstep 스핀 박스의 화사룦를 누를 때마다 날짜나 시간을 얼마나 조절할지를 지정\rvalue 화면에 표시할 초기값을 지정\rnumber\r숫자를 조절할 수 있는 화살표를 지정\rrange\r숫자를 조절할 수 있는 슬라이드 막대를 넣음\rmin - 필드에 입력할 수 있는 최솟값을 지정\rmax - 필드에 입력할 수 있는 최댓값을 지정\rstep - 짝수나 홀수 등 특정 숫자로 제한하려고 할 떄 숫자 간격을 지정할 수 있음\rvalue - 필드에 표시할 초기 값\rcolor\r색상표를 넣음\rcheckbox\r주어진 항목에서 2개 이상 선택 가능한 체크 박스를 넣음\rradio\r주어진 항목에서 1개만 선택할 수 있는 라이도 버튼을 넣음\rname - 이름 값을 지정\rvalue - 필수 속성이며 서버로 알려줄 값\rchecked - 체크 되어 있는지 아닌지 기본 0 file\r파일을 첨부할 수 있는 버튼을 넣음\rsubmit\r서버 전송 버튼을 넣음\rimage\rsubmit 버튼 대신 사용할 이미지를 넣음\rreset\r리셋 버튼을 넣음\rbutton\r버튼을 넣음\rautofocus\r실행시 여기 칸으로 실행\rplaceholder\r힌트 표시하기\rreadonly\rtrue or false 읽기전용으로 바꿈\rrequired\r필수 값\rformaction\r실행할 프로그램을 연결 submit, image일 때 사용가능\rformenctype\r서버로 전송할 때의 폼 데이터를 결정 submit, image일 때 사용가능\rformmethod\r서버로 전송하는 방식 get, post를 지정\rformnovalidate\r유효성 여부를 확인\rmultiple 여러 값을 입력\rselect\r여러 선택사항 표시\r\u0026lt;select 속성=\u0026quot;속성 값\u0026quot;\u0026gt;\r\u0026lt;option value=\u0026quot;값\u0026quot; [속성=\u0026quot;속성 값\u0026quot;]\u0026gt; 내용1\u0026lt;/option\u0026gt;\r\u0026lt;option value=\u0026quot;값\u0026quot; [속성=\u0026quot;속성 값\u0026quot;]\u0026gt; 내용2\u0026lt;/option\u0026gt;\r\u0026lt;option value=\u0026quot;값\u0026quot; [속성=\u0026quot;속성 값\u0026quot;]\u0026gt; 내용3\u0026lt;/option\u0026gt;\r\u0026lt;/select\u0026gt;\r속성값 size, multiple\r\u0026lt;option\u0026gt;태그의 속성\rvalue, selected(화면에 표시될 때 기본 속성)\r\u0026lt;optgroup label= \u0026quot;제목\u0026quot;\u0026gt; \u0026lt;/optgroup\u0026gt;\r옵션끼리 묶기\r\u0026lt;datalist id=\u0026quot;값\u0026quot;\u0026gt;\r\u0026lt;option value=\u0026quot;값\u0026quot; label=\u0026quot;값\u0026quot;\u0026gt;\u0026lt;/option\u0026gt;\r\u0026lt;/datalist\u0026gt;\rbutton\r\u0026lt;button [type=\u0026quot;submit | reset | button\u0026quot;]\u0026gt; 내용 \u0026lt;/button\u0026gt;\r\u0026lt;output [속성=\u0026quot;속성 값\u0026quot;]\u0026gt; 내용 \u0026lt;/output\u0026gt;\r\u0026lt;progress value = \u0026quot;값\u0026quot; [max = \u0026quot;값\u0026quot;]\u0026gt; \u0026lt;/progress\u0026gt;\r 데이터를 전송하는 용도로 사용되는 태그 Form 내부에 입력된 데이터를 서버로 전송하거나 JavaScript에서 사용할 수 있다\naction attribute 데이터가 전송될 곳의 주소를 입력\nmethod attribute 데이터가 전송될 방식을 입력\n #style\r#sns \u0026gt; ul \u0026gt; li{\r가능\r}\r input 태그\n\u0026lt;type = \u0026quot; text, password, radio, checkbox, color, date, email, file\u0026quot;\u0026gt;\n = \u0026quot;range\u0026quot; min =\u0026quot;n\u0026quot; max=\u0026quot;n\u0026quot;\r "});index.add({'id':19,'href':'/docs/blog/study/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/1.-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%84%A4%EA%B3%84/','title':"1. 소프트웨어 설계",'content':"플랫폼 ( Platform )  애플리케이션을 구동시키는 데 필요한 하드웨어와 소프트웨어의 결합 동일 플랫폼 내에서의 상호 호환이 가능하도록 만들어진 결합체를 의미 소프트웨어의 개발과 운영비용을 감소시키고, 생산성이 향상 동일 플랫폼의 커뮤니티가 형성되고 네트워크 효과를 유발  플랫폼의 유형  유형 | 설명 | 사례\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r싱글 사이드 플랫폼 (Single-Side platform) | 제휴 관계를 통해 소비자와 공급자를 연결하는 형태 | 아이튠즈, 안드로이드 마켓\r투 사이드 플랫폼 (Two-Side Platform) | 두 그룹을 중개하고 모두에게 개방하는 형태 | 소개팅 앱\r멀티 사이트 플랫폼 (Multi-Side Platform) | 다양한 이해관계 그룹을 연결하여 중개하는 형태 | 페이스북, 인스타그램\r 플랫폼의 기능 분석  플랫폼 성능 분석을 통해 사용자의 서비스 이용 시 적정성을 알 수 있다. 사용자 요구사항 중 성능에 대한 개선요청 항목은 현재 시스템 플랫폼 성능이 느린 것으로 제기될 가능성이 높음  플랫폼 기능 분석 절차  순서 | 절차 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r1 | 현행 플랫폼 자료 수집 | 현행 시스템 담당자 제시 자료와 인터뷰를 통해 필요 자료 수집/ 파악\r2 | 수집 자료 분석 | 수집된 자료에 산발적으로 존재하는 정보들의 취합/ 정제 작업을 실시\r3 | 결과 산출물 작성 | 다양한 이해관계자 그룹을 연결하여 중개\r 플랫폼 기능 분석 기법  기법 | 설명 | 산출물\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r사용자 인터뷰 | 현행 플랫폼 사용자 인터뷰를 통해 속도의 적정성 확인 | 인터뷰 결과서\r성능 테스트 | 현행 플랫폼을 대상으로 성능, 부하 테스트를 수행 | 성능 테스트, 부하 테스트 결과서\r산출물 점검 | 현재 플랫폼과 유사한 타사 제품의 성능 자료 등을 분석 | 벤치마킹 테스트 결과서\r 운영체제 (Operating System) 분석  하드웨어 및 소프트웨어 자원을 효율적으로 관리하며 공통된 기능을 제공하는 소프트웨어  운영체제의 현행 시스템 분석  관점 | 고려사항 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r품질 측면 | 신뢰도 | 장기간 시스템 운영 시 운영체제의 장래 발생 가능성,, 운영체제의 버그로 인한 재기동 여부\r| 성능 | 대규모 및 대량 파일 작업 (배치 작업 처리), 지원 가능한 메모리 크기(Bit)\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r지원 측면 | 기술지원 | 공급사들의 안정적인 기술 지원\r| 주변기기 | 설치 가능한 하드웨어, 다수의 주변 기기 지원 여부\r| 구축비용 | 지원 가능한 하드웨어 비용, 설치할 응용 프로그램의 라이센스, 유지 및 관리 비용\r 운영체제의 종류 및 특성   리눅스 기반 시스템이 하드웨어 및 소프트웨어 소유 비용이 가장 적게 소요된다.\n  유지 및 관리 비용 측면에서는 윈도우즈(Windows) 기반 시스템이 강점을 가진다.\n  안정적이고 신뢰할 수 있으며 대용량 처리를 위해서는 유닉스기반 시스템이 선호된다.\n 구분 | 종류 | 저작자 | 특징\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rPC | 윈도우즈 (Windows) | Microsoft | 중. 소규모 서버, 일반 PC 등 유지, 관리 비용 장점\r| 유닉스 (UNIX) | IBM, HP, SUN | 대용량 처리, 안정성 높은 엔터프라이즈 급 서버\r| 리눅스 (Linux) | Linus Torvalds | 중/ 대규모 서버 대상, 높은 보안성 제공\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r모바일 | 안드로이드 | Google | 스마트폰, 태블릿PC, 다양한 기기의 호환성 제공\r| IOS | Apple | 스마트폰, 태블릿PC, 높은 보안성과 고성능 제공\r   네트워크 분석  컴퓨터 장치들을 노드 간 연결(데이터 링크)을 사용하여 서로에게 데이터를 교환하는 기술 데이터 링크들은 광케이블과 같은 유선 매체 또는 와이파이(Wi-Fi)와 같은 무선 매체를 통해 성립 백본망, 라우터, 스위치, 게이트 웨이, 방화벽 등을 대상으로 분석 물리적인 위치 관계 파악, 조직 내 보안 취약성 분석 및 대응이 쉽다. 현행시스템이 구성된 네트워크 구조를 네트워크 구성도를 통해 분석 및 네트워크 구성도의 작성을 통해 서버 위치, 서버 간 연결 방식을 파악할 수 있다.  OSI 7계층  계층 | 설명 | 프로토콜 | 전송단위\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r응용 계층 (Application Layer) | 사용자와 네트워크 간 응용서비스 연결, 데이터 생성 | HTTP, FTP | Data\r표현계층 (Presentaion Layer) | 데이터 형식 설정, 부호 교환, 암/ 복호화 | JPEG, MPEG 세션 계층 (Session Layer) | 연결 접속, 동기 제어 | SSH, TLS 전송 계층 (Transport Layer) | 신뢰성 있는 통신 보장, 데이터 분할, 재조립, 흐름 제어, 오류 제어, 혼잡 제어 | TCP, UDP | Segment\r네트워크 계층 (Network Layer) | 단말기 간 데이터 전송을 위한 최적화된 경로 제공 | IP, ICMP | Packet\r데이터링크 계층 (Data Link Layer) | 인접 시스템 간 데이터 전송, 전송 오류 제어, 오류 검출/ 재전송 | Ethernet | Frame\r물리 계층 (Physical Layer) | 0과 1의 비트 정보를 회선으로 보내기 위한 전기적 신호 변환 | RS-232C | Bit\r DBMS 분석  데이터베이스의 가용성, 성능, 기술지원, 호환성, 구축 비용 등을 분석한다.  DBMS의 기능  기능 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r증복 제어 | 동일한 데이터가 여러 위치에 중복으로 저장되는 현상을 방지\r접근 통제 | 권한에 따라 데이터에 대한 접근 제어\r인터페이스 제공 | 사용자에게 SQL 및 CLI, GUI 등 다양한 인터페이스 제공\r관계 표현 | 서로 다른 데이터 간의 다양한 관계를 표현할 수 있는 기능 제공\r샤딩/ 파티셔닝 | 구조 최적화를 위해 작은 단위로 나누는 기능 제공\r무결성 제약조건 | 무결성에 관한 제약조건을 정의/ 검사하는 기능 제공\r백업 및 회복 | 데이터베이스 장애 발생 시 데이터의 보존 기능 제공\r DBMS의 현행 시스템 분석  관점 | 고려사항 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r성능 측면 | 가용성 | 장기간 시스템을 운영할 때 장애 발생 가능성, 백업 및 복구 편의성\r| 성능 | 대규모 데이터 처리 성능, 대량 거래 처리 성능, 다양한 튜닝 옵션 지원 여부\r| 상호 호환성 | 공급 업체들의 안정적인 기술 지원, 다수의 사용자 간의 정보 공유, 오픈 소스 여부\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r지원 측면 | 기술 지원 | 설치 가능한 운영체제의 종류\r| 구축 비용 | 유지 및 관리 비용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r 비즈니스 융합  융합기술이 제공하는 기회나 융합의 언리를 적용해서 새로운 제품, 서비스, 산업을 창울하거나 기존 제품을 혁신하기 위한 기업 활동  비즈니스 융합 유형  유형 | 설명 | 사례\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r고객 가치 (Why) | 개인, 사회, 인류의 행복과 번영을 위한 가치 창출 | 신재생 에너지 개발, 친환경 농산물 생산\r시장 유통 (Whom) | 신시장 개척 또는 미래시장 선점 | 자율주행 자동차, 글로벌 통신망\r가치 제안 (What) | 시장/ 고객의 미 충족 욕구 대응 신상품 개발 | 드론 배송, 협동 로봇, 소셜 로봇\r공급 역량 (Who) | 신기술, 신규역량을 활용한 상품생산 및 판매 | 스마트 밴드, 스마트 헬스케어\r생산 방식 (How) | 제품/ 서비스의 생산, 판매 프로세스의 혁신 | 스마트 팩토리, 옴니채널\r 비즈니스 융합 분석 절차  기업전략 분석 -\u0026gt; 영역 및 방향 설정 -\u0026gt; 포트폴리오 선정 -\u0026gt; 융합모델 설계/ 평가 -\u0026gt; 비즈니스 융합 실행/ 개선\r 요구분석의 개념   도출된 요구사항 간 상충을 해결하고 소프트웨어의 범위를 파악하여 외부환경과의 상호작용을 분석하는 과정\n  외부 사용자와 인터페이스 및 내부 시스템 구성요소 간 인터페이스를 정확히 분석해 시스템을 계층적이고 구조적으로 표현한다.\n 기법 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r요구사항 분류 | 요구사항이 기능인지 비기능인지, 소프트웨어에 미치는 영향의 범위를 파악, 소프트웨어 생명주기 동안 변경이 발생하는지를 확인\r개념 모델링 | 개념 모델은 문제 도메인의 엔터니 (Entity)들과 개별 관계 및 종속성을 반영\r요구사항 할당 | 요구사항을 만족시키기 위한 아키텍처 구성요스를 식별하는 활동, 추가적인 요구사항 발견 가능\r요구사항 협상 | 두 명의 이해관계자가 서로 상충되는 내용을 요구하는 경우, 어느 한쪽을 지지하기보다는 적절한 지점에서 합의하기 위한 기법\r정형 분석 | 형식적으로 정의된 의미를 지닌 언어로 요구사항을 표현, 요구사항 분석의 마지막 단계에서 이루어짐\r   UML (Unified Modeling Language)  객체지향 소프트웨어 개발과정에서 산출물을 명세화, 시각화, 문서화 할 시 사용되는 모델링 기술과 방법론을 통합해 만든 표준화된 범용 모델링 언어  UML 특징  특징 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r가시화 언어 | 개념 모델 작성 시 오류가 적고 의사소통이 용이\r구축 언어 | 실행 시스템에 대한 시각적 예측 가능\r명세화 언어 | 정확한 모델 제시, 완전한 모델 작성 가능\r문서화 언어 | 시스템에 대한 평가 및 의사소통의 문서\r UML 구성요소  구성요소 | 내용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r사물 (Things) | 추상적인 개념으로, 주제를 나타내는 요소, 단어 관점에서 '명사' 또는 '동사'를 의미\r관계 (Relationships) | 사물의 의미를 확장하고 명확히 하는 요소, 사물과 사물을 연결하여 관계를 표현하는 요소\r다이어그램 (Diagrams) | 사물과 관계를 모아 그림으로 표현한 형태, 형식과 목적에 따라 9가지로 정의\r UML 다이어그램  구분 | 다이어그램 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r요구사항 | 유스케이스 (Usecase) | 사용자 관점에서 시스템의 활동을 표현, 유스케이스는 시스템의 기능적 요구 정의\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r정적 모델링 | 클래스 (Class) | 시스템 내 클래스의 정적 구조를 표현, 속성과 동작으로 구성\r| 객체 (Object) | 객체 인스턴스를 나타내는 대신 실제 클래스를 사용\r| 상태 (State) | 모든 가능한 상태와 전이 표현, 진입 조건, 탈출 조건, 상태 전이 등 기술\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r동적 모델링 | 시퀸스 (Sequence) | 객체 간 상호작용을 메시지 흐름으로 표현\r| 협업 (Collaboration) | 객체 간 연관성을 표현\r| 활동 (Activity) | 활동의 순서대로 흐름을 표현\r| 컴포넌트 (Component) | 코드 컴포넌트 기반의 물리적 구조 표현\r| 배포 (Deployment) | 컴포넌트 사이의 종속성을 표현\r 애자일 (Agile)  처음부터 끝까지 계획을 수립하고 개발하는 폭포수 (Waterfall)방법론과 달리 개발과 함께 즉시 피드백을 받아서 유동적으로 개발하는 방법 소프트웨어 개발 트렌드가 모바일 환경으로 변화, 시장 적시성과 잦은 배포의 중요성이 부각되면서 중요해지기 시작 전통적 방법론은 문서 절차 위주로 변화에 신속한 대응이 어려워, 빠르게 적응하고 효율적으로 개발할 수 있는 방법론의 필요성 대두  애자일 선언문  공정과 도구보다 개인과 상호작용 계획을 따르기보다 변화에 대응하기 포괄적인 문서보다 등장하는 소프트웨어 계약 협상보다 고객과의 협력  애자일 방법론 유형  종류 | 내용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rXP (eXtreme Programming) | 의사소통 개선과 즉각적 피드백으로 소프트웨어 품질을 높이기 위한 방법론 (1~3주의 반복 개발 주기 및 용기, 단순성, 의사소통, 피드백, 존중 5가지 가치)\r스크럼 (SCRUM) | 매일 정해진 시간, 장소에서 짧은 시간에 개발을 하는 팀을 위한 프로젝트 관리 중심 방법론 (백로그, 스프린트, 스크럼 미팅, 스크럼 마스터)\r린 (LEAN) | 도요타의 린 시스템 품질기법을 소프트웨어 개발 프로세스에 적용해서 낭비 요소를 제거하여 품질을 향상시킨 방법론\r 애자일과 전통적 방법론 비교  비교 대상 | 애자일 방법론 | 전통적 방법론\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r계획 수립 | 유동적 범위 설정 | 확정적 범위 설정\r업무 수행 | 팀 중심 업무 수행 | 관리자 주도적 명령과 통제, 개인 단위의 업무 수행\r개발/ 검증 | 반복 주기 단위로 소프트웨어를 개발/ 검증 | 분석/ 설계/ 구현/ 테스트를 순차적으로 수행\r팀관리 | 업무 몰입, 팀 평가 | 경쟁, 개별 평가\r문서화 | 문서화보다는 코드를 강조 | 상세한 문서화를 강조\r성공요소 | 고객 가치 전달 | 계획/ 일정 준수\r 모델링 (Modeling)기법  실세계의 물리현상을 특정한 목적에 대응하여 이용하기 쉬운 형식으로 표현하는 기법 실세계 문제에 대한 모델링이 소프트 웨어 요구사항 분석의 핵심  모델링의 절차  요구사항 분석 -\u0026gt; 개념 모델링 -\u0026gt; 논리 모델링 -\u0026gt; 물리 모델링\r 분석 자동화 도구   요구사항을 자동으로 분석하고, 요구사항 분석 명세서를 기술하도록 개발된 요구사항 분석을 위한 자동화 도구(CASE)\n  분석 자동화 도구는 소프트웨어 위기의 극복 대응방안이 대두되면서 산업적 측면에서의 등장배경을 가지고 있다.\n  분석 자동화 도구는 사용자의 요구사항과 실제 시스템 간의 차이 발생 극복, 시스템의 재사용성과 생산성과 유지보수의 향상 등 관리측면에서의 등장배경을 가지고 있다.\n  표준화 적용과 문서화를 통한 보고를 통해 품질 개선이 가능하며, 변경사항과 변경으로 인한 영향에 대한 추적이 쉽다.\n  명세에 대한 유지보수 비용의 축소가 가능하다.\n 분류 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r상위 (Upper) CASE | 계획수립, 요구분석, 기본설계 단계를 다이어그램으로 표현\r| 모델들 사이의 모순 검사 지원, 모델의 오류 검증 및 자료흐름도 작성 지원\r중간 (Middle) CASE | 상세 설계 작업 지원 및 화면 출력 등의 작성 지원\r하위 (Lower) CASE | 시스템 명세서 생서어 지원, 소스 코드 생성 지원\r   요구사항 관리 도구   요구사항 관리 도구는 요구사항을 기반으로 하는 프로젝트 관리, 설계, 개발, 테스트 등을 수행할 수 있는 역할을 지원하는 도구이다.\n 구분 | | 설명\r-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r기본기능 | 프로젝트 생성 | 프로젝트 타입 및 기본 모듈 템플릿, 프로젝트 생성 및 재사용 가능\r| 요구사항 작성 | 요구사항 별 고유 ID, 식별자 사용 구분\r| 요구사항 불러내기/ 내보내기 | .doc, .xls, .html 등 다양한 확장자 제공\r-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r핵심기능 | 요구사항 이력 관리 | 요구사항별 변경 이력 관리 기능 제공\r| 요구사항 베이스 라인 | 요구사항 확정을 위한 베이스 라인 제공\r| 요구사항 추적성 | 요구사항 이력 추적 가능\r-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r부가기능 | 협업 환경 | 요구사항 산출물의 동시편집 기능 제공\r| 외부 인터페이스 | 형상 관리 도구(SVN, Git)와의 연동 지원\r| 확장성 | API 등을 통한 타 시스템 연동 제공\r   요구사항 관리 도구의 종류  구분 | 관리 도구 | 설명\r-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r상용제품 | 헬릭스 RM(Helix Rm) | 요구사항 추적성 매트릭스 제공, 요구사항의 재사용을 통해 검증 시간과 반복 업무를 줄임\r| 지라 (Jira) | 애플리케이션 생명주기 관리 (ALM; Application Lifecycle Management)와 요구사항 관리에 사용하는 도구\r| 오르카노스 (Orcanos) | 기업을 대상으로 요구사항 관리용 단일 저장소 (Repository)를 제공, 임베디드 보고서, 맞춤형 템플릿 지원\r| 리큐테스트 (ReQtest) | 요구사항을 파악 및 관리하는 프로세스를 단순화, 비즈니스 요구사항은 트리 구조로 저장 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r오픈소스 | 레드마인 (RedMine) | 웹 기반의 프로젝트 관리와 버그 추적 기능을 제공하는 도구, 이소 추적, 형상 관리 기능 제공\r| 테스트링크 (Testlink) | 테스트 케이스와 요구사항의 매핑 지원\r UI (User Interface)  넓은 의미에서 사용자와 시스템 사이에서 의사소통할 수 있도록 고안된 물리적, 가상의 매개체 좁은 의미로는 정보 기기나 소프트웨어의 화면 등에서 사람이 접하게 되는 화면을 의미 UI 구동환경은 운영체제 확인, 웹 브라우저 확인, 모니터 해상도 확인, 프레임 세트 확인으로 구분 됨  UI 유형  유형 | 특징 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rCLI (Command Line Interface) | 정적인 텍스트 기반 인터페이스 | 명령어를 텍스트로 입력하여 조작하는 사용자 인터페이스\rGUI (Graphical User Interface) | 그래픽 반응 기반 인터페이스 | 그래픽 환경을 기반으로 한 마우스나 전자펜을 이용하는 사용자 인터페이스\rNUI (Natural User Interface) | 직관적 사용자 반응 기반 인터페이스 | 사용자가 가진 경험을 기반으로 키보드나 마우스 없이 신체 부위를 이용하는 사용자 인터페이스\rOUI (Organic User Interface) | 유기적 상호작용 기반 인터페이스 | 입력장치가 곧 출력장치가 되고, 현실에 존재하는 모든 사물이 입출력장치로 변화 할 수 있는 사용자 인터페이스\r UI 분야  분야 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r물리적 제어 분야 | 정보 제공과 기능 전달을 위한 하드웨어 기반\r디자인적 분야 | 콘텐츠의 정확하고 상세한 표현과 전체적 구성\r기능적 분야 | 사용자의 편의성에 맞춰 쉽고 간편하게 사용 가능\r UI 설계 원칙  설계 원칙 | 설명 | 부특성\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r직관성 (Intuitiveness) | 누구나 쉽게 이해하고, 쉽게 사용할 수 있어야 함 | 쉬운 검색, 쉬운 사용성, 일관성\r유효성 (Efficiency) | 정확하고 완벽하게 사용자의 목표가 달성될 수 있도록 제작 | 쉬우누 오류 처리 및 복구\r학습성 (Learnability) | 초보와 숙련자 모두가 쉽게 배우고 사용할 수 있게 제작 | 쉽게 학습, 쉬운 접근, 쉽게 기억\r유연성 (Flexibility) | 사용자의 인터랙션을 최대한 포용하고, 실수를 방지할 수 있도록 제작 | 오류 예방, 실수 포용, 오류 감지\r UI 표준   UI 표준은 디자인 철학과 원칙 기반하에 전체 시스템에 공통으로 적용되는 화면 간 이동, 화면 구성 등에 관한 규약\nUI 표준 구성 | 설명 전체적인 UX 원칙 | 사용자의 관점에서 사용자 업무를 효율적으로 수행할 수 있는 UX 원칙 정의 정책 및 철학 | 조직의 목표나 정체성으르 포함하는 정책 및 철학 설정 UI 스타일 가이드 | UI에 대한 구동 환경 및 레이아웃 등을 정의 UI 패턴 모델 정의 | CRUD 방식을 기반으로 데이터 입력, 출력 패턴 모델 정의 UI 표준 수립을 위한 조직 구성 | UI 팀 및 표준 개발 팀을 주축으로 추진 조직 구성\nUI 표준 수립 시 고려사항 | 사용자가 불편해하지 않아야 한다. | 많은 업무 케이스를 포함해야 한다. | 다양한 상황에 대처할 수 있어야 한다. | 표준 적용이 쉽도록 충분한 가이드와 활용 수단 제공이 필요하다. | 변화하는 상황에 맞게 빠르게 변경할 수 있는 관리조직 수반이 필요하다.\n  프레임 세트 적용  구분 | 프레임 구분 | 단일 프레임 | 웹 애플리케이션\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r콘텐츠 구성 | 프레임 별 콘텐츠 구성, 메뉴 배너 구성 등의 일괄 적용 | 전체 페이지에서 각 영역 별 콘텐츠를 자유롭게 구성 가능 | 페이지 별 구성 콘텐츠에 구성이 동일한 패턴, 페이지 별로 특화된 배너를 적용하는 경우는 적음\r디자인 | 각 프레임별 이미지 적용, 프레임 내 배경 이미지 적용 | 전체 페이지에 적용되는 이미지 가능 | 업무 처리가 주목적으로 페이지 전체에 이미지 적용하는 경우는 적음\r속도 | 변경되는 프레임만 새로 로딩됨 (브라우저 속도 향상) | 페이지 전체가 새로 로딩됨 (브라우저 속도 지연) | 메뉴 변경시 페이지 로딩이 빨라야 함  UI지침 (Guideline)   UI표준에 따라 사용자 인터페이스 설계, 개발 시 지켜야할 세부 사항을 규정하는 것을 의미\n  UI지침은 목표 정의, 프로젝트 계획, 요구사항 정의, 설계 및 구현, 테스트, 배포 및 관리의 순서로 이루어진다.\n  UI 설계 프로세스  UI 설계 프로세스는 문제 정의, 사용자 모델, 작업 분석, 컴퓨터 오브젝트 및 기능 정의, 사용자 인터페이스 정의, 디자인 평가 순으로 이루어진다. UI 흐름 설계는 화면에 표현되어야 할 기능 작성, 화면의 입력 요소 확인, UI 요구사항을 기반으로 유스케이스 설계, 기능 및 양식 확인 순으로 되어있다.  감성공학  인간의 감성을 정성적, 정략적으로 측정 및 평가하고, 과학적으로 분석하여 이를 구체적인 제품 설계로 실현해 내는 공학 감성공학의 연구영역은 인간의 생리적, 심리적 특성에 기반한 인간과 기계 또는 인간과 환경 사이를 연계시키는 인터페이스 설계 분야  감성공학의 접근 방법  구분 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r1류 접근 방법 | 의미 미분법 (인간의 감성을 표현하는 어휘를 이용하여 제품 이미지를 조사하고 연계시키는 접근방법)\r2류 접근 방법 | 문화적 감성의 일부 반영 (개인의 연령, 성별 등의 개별적 특성과 생활 방식으로부터 개인이 갖고 있는 이미지를 구체화 시키는 방법으로 감성의 심리적 특성을 강조한 접근 방법)\r3류 접근 방법 | 기존의 감성적 어휘 대신 공학적인 방법으로 접근하여 인간의 감각을 측정 이를 바탕으로 수학적 모델을 구착하여 활용한 방법이다.\r 화면 설계 도구  도구 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r파워 목업 (Power Mockup) | 파워 목업은 파워포인트에 추가 메뉴를 설치해 목업 기능을 사용할 수 있도록 지원하는 툴\r발사믹 목업 (Balsamiq Mockup) | 스케치한 느낌으로 빠르고 심플하게 서비스 콘셉트를 전달할 수 있는 목업 도구\r카카오 오븐 (oven) | 카캌오에서 제작한 온라인 프로토타이핑 도구, 직관적인 인터페이스가 장점\r 프로토타이핑 도구  도구 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rUX (UXpin) | 웹 브라우저를 통해 와이어 프레임과 프로토타이핑 작업을 동시에 할 수 있는 도구\r액슈어 (AXURE) | UI 설계보다는 스토리보드에 포함되는 정책, 플로 차트, 디스크립션까지 모두 작성 가능한 도구\r네이버 프로토나우 (ProtoNOW) | 네이버에서 만든 프로토타이핑 툴로 스토리보드, 플로 차트 등의 기능 지원 가능 도구\r 공통모듈설계  전체 프로그램의 기능 중 특정 기능을 처리할 수 있는 실행 코드를 의미 자체적으로 컴파일이 가능하며, 다른 프로그램에서의 재사용이 가능 여러 기능 및 프로그램에서 공통으로 사용할 수 있는 모듈을 의미, 날짜 처리를 위한 유틸리티 모듈 등이 해당  공통 모듈 원칙  원칙 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r정확성 (Correctness) | 해당 기능이 실제 시스템 구현 시 필요한지 아닌지를 알 수 있도록 정확하게 작성\r명확성 (Clarity) | 해당 기능에 대해 일관되게 이해되고 한 가지로 해석될 수 있도록 작석\r완전성 (Completeness) | 시스템이 구현 될 때 필요하고 요구되는 모든 것을 기술\r일관성 (Consistency) | 공통 기능 간에 상호 출돌이 없도록 작성\r추적성 (Traceability) | 공통 기능에 대한 요구사항 출처와 관련 시스템 등의 유기적 관계에 대한 식별이 가능하도록 설정\r 모듈화 (Modularity)  프로그램이 효율적으로 관리될 수 있도록 시스템을 분해하고 추상화함으로써 소프트웨어 제품의 성능을 향상시키거나 시스템의 수정 및 재사용, 유지 관리를 쉽게 하는 기법을 의미 모듈의 크기가 너무 작아 모듈 개수가 많아지면 모듈 간 통합 비용이 많이 발생하며, 크기가 너무 커지면 비용은 줄어들지만 개발 비용이 커진다.  모듈화 유형  유형 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r응집도 | 모듈 내부에서 구성요소 간에 밀접한 관계를 맺고 있는 정도, 응지보가 높을 수록 필요한 요소들로 구성되어 있고 낮을수록 관련이 적은 요소를 나타냄\r결합도 | 모듈과 모듈 간에 어느 정도 관련성이 있는지를 나타내는 정도, 관련이 적을수록 모듈의 독립성이 높아 모듈 간 영향이 적어짐\r 응집도 유형  유형 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r우연적 응집도 (Coincidental Cohesion) | 모듈 내부의 각 구성요소들이 연관이 없을 경우\r논리적 응집도 (Logical Cohesion) | 유사한 성격을 갖거나 특정 형태로 분류되는 처리 요소들이 한 모듈에서 처리되는 경우\r시간적 응집도 (Temporal Cohesion) | 연관된 기능이라기보다는 특정 시간에 처리되어야 하는 활동들을 한 모듈에서 처리할 경우\r절차적 응집도 (Procedural Cohesion) | 모듈의 다수의 관련 기능을 가질 때, 모듈 안의 구성요소들이 그 기능을 순차적으로 수행할 경우\r통신적 응집도 (Communication Cohesion) | 동일한 입력과 출력을 사용하여 다른 기능을 수행하는 활동들이 모여 있을 경우\r순차적 응집도 (Sequential Cohesion) | 모듈 내에서 한 활동으로부터 나온 출력 값을 다른 활동이 사용할 경우\r기능적 응집도 (Functional Cohesion) | 모듈 내부의 모든 기능이 단일한 목적을 위해 수행되는 경우\r 결합도 유형  유형 | 설명 | 결합도와 품질 0 (낮음) ~ 10 (높음)\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r내용 결합도 (Content Coupling) | 다른 모듈 내부에 있는 변수나 기능을 다른 모듈에서 사용하는 경우 | 0 공통 결합도 (Common Coupling) | 파라미터가 아닌 모듈 밖에 선언된 전역 변수를 참조하고 전역 변수를 갱신하는 식으로 상호 작용하는 경우 | ~\r외부 결합도 (External Coupling) | 모듈이 다수의 관련 기능을 가질 때 모듈 안의 구성요소들이 그 기능을 순차적으로 수행할 경우 | ~\r제어 결합도 (Control Coupling) | 단순 처리할 대상인 값만 전달되는 게 아니라 어떻게 처리해야 한다는 제어 요소가 전달되는 경우 | ~\r스탬프 결합도 (Stamp Coupling) | 모듈 간의 인터페이스로 배열이나 오브젝트, 스트럭처 등이 전달되는 경우 | ~ 자료 결합도 (Data Coupling) | 모듈 간의 인터페이스로 전달되는 파라미터를 통해서만 모듈 간의 상호작용이 일어나는 경우 | 10\r 설계모델링  요구하항 분석 단계에서 규명된 필수 기능들의 구체적인 구현 방법을 명시하는 기법 소프트웨어에 요구되는 기능과 성능 조건들을 만족하는 소프트웨어의 내부기능, 구조 및 동적 행위들을 모델링하여 표현, 분석, 검증하는 과정 설계 모델링의 유형에는 시스템의 구성요소들과 이들 사이의 구조적인 관계와 특성을 모델링한 구조 모델링과 어떠한 순서로 수행되는가와 같은 동적인 특성의 행위 모델링이 있음  소프트웨어 설계 유형  설게 유형 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r자료 구조 설계 (Data Structure Design) | 요구 분석 다녜에서 생성된 정보를 바탕으로 소프트웨어를 구현하는 데 필요한 자료 구조로 변환하는 과정\r아키텍처 설계 (Architecture Design) | 예비 설계 또는 상위 수준 설계, 소프트웨어 시스템의 전체 구조를 기술, 소프트웨어를 구성하는 컴포넌트 간의 관계를 정의\r인터페이스 설계 (Interface) | 소프트웨어와 상호 작용하는 컴퓨터 시스템, 사용자 등이 어떻게 통신하는지를 기술\r프로시저 설게 (Procedure Design) | 프로그램 아키텍처의 컴포넌트를 소프트웨어 컴포넌트의 프로시저서술로 변환하는 과정\r 소프트웨어 아키텍처 (Software Architecture)  여러 가지 소프트웨어의 구성요소와 그 구성요소가 가진 특성 중에서 외부에 드러나는 특성, 그리고 구성요소 간의 관계를 표현하는 시스템의 구조나 구조체를 의미  소프트웨어 아키텍처 프레임워크 구성요소  구성요소 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r아키텍처 명세서 | 아키텍처를 기록하기 위한 산출물들, 이해관계자들의 시스템에 대한 관심을 관점에 맞추어 작성한 뷰로 표현\r이해관계자 | 시스템 개발에 관련된 모든 사람과 조직, 고객, 최종사용자, 개발자, 프로젝트 관리자, 유지보수자 등\r관심사 | 시스템에 대해 이해관계자들의 서로 다른 의견과 목표 (사용자 입장, 유지보수자 입장, 개발자 입장)\r관점 | 개별 뷰를 개발할 때 토대가 되는 패턴이나 양식, 이해관계자들이 서로 다른 역할이나 책임으로 시스템이나 산출물들에 대해 보고 싶은 관점\r뷰 | 서로 관련 있는 관심사들의 집합이라는 관점에서 전체 시스템을 표현\r근거 | 아키텍처 결정 근거, 회의 결과, 보고 결과\r 소프트웨어 아키텍처 4+1 뷰  뷰 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 유스케이스 뷰 (Use-Case View) | 유스케이스는 아키텍처를 도출하고 설계하는 작업을 주도, 아키텍처의 다른 뷰를 검증하는 데 사용\r논리 뷰 (Logical View) | 시스템의 기능적인 요구사항 지원, 설계 모델의 추상화이며, 주요 설계 패키지의 서브 시스템, 클래스를 식별\r프로세스 뷰 (Process View) | 런타임 시의 시스템의 태스크 (Task), 스레드 (Thread), 프로세스(Process)와 이들 사이의 상호작용 등의 관계를 표현\r구현 뷰 (Implementaion View) | 개발 환경 안에서 정적인 소프트웨어 모듈 (소스 코드, 데이터 파일, 컴포넌트, 실행 파일 등)의 구성 표현, 컴포넌트 다이어그램으로 표현, 컴포넌트 뷰라고도 함\r배포 뷰 (Deployment View) | 다양한 실행 파일과 다른 런타임 컴포넌트가 해당 플랫폼 또는 컴퓨팅 노드에 어떻게 매핑되는가를 보여주며, 가용성, 신뢰성, 성능, 확장성 등의 시스템의 비기능적인 요구사항으 고려\r 소프트웨어 아키텍처 비용 평가 모델 종류  종류 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ SAAM (Software Architecture Analysys Method) | 변경 용이성과 기능성에 집중, 평가가 용이하여 경험이 없는 조직에서도 활용 가능\rATAM (Architecture Trade-off Analysys Method) | 아키텍처 품질 속성을 만족시키는지 판단 및 품질 속성들의 상충관계까지 평가\rCBAM (Cost Benefit Analysis Methood) | 경제적 의사결정에 대한 요구를 충족, ATAM 바탕의 시스템 아키텍처 분석 중심, 경제적 모델링 방법\rADR (Active Design Review) | 소프트웨어 아키텍처 구성요소 간 응집도 평가\rARID (Active Reviews for Intermediate Designs) | 전체 아키텍처가 아닌 특정 부분에 대한 품질요소에 집중  객체지향 (Object Oriented)  실세계의 개체를 속성과 매서드가 결합한 형태의 객체로 표현하는 개념  객체지향 구성요소  구성요소 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r클래스 (Class) | 같은 종류의 집단에 속하는 속성과 행위, 속성은 변수의 형태로, 행위는 매서드 형태로 선언, 객체지향 프로그램의 기번족인 사용자 정의 데이터형\r객체 (Object) | 객체의 행위는 클래스에 정의된 행위에 대한 정의를 공유함으로써 메모리를 경제적으로 사용\r메서드 (Method) | 클래스로부터 생성된 객체를 사용하는 방법, 전통적 시스템의 함수(Function) 또는 프로시저(Procedure)에 해당하는 연산기능\r메시지 (Message) | 객체에게 어떤 행위를 하도록 지시하기 위한 방법\r인스턴스 (Instance) | 객체지향 기법에서 클래스에 속한 각각의 객체, 실제로 메모리상에 할당\r속성 (Property) | 한 클래스 내에 속한 객체들이 가지고 있는 데이터 값들을 단위별로 정의\r 객체지향 기법  기법 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r캡슐화 | 서로 관련성이 많은 데이터와 이와 관련된 함수들을 한 묶음으로 처리하는 기법, 결합도가 낮아지고 재사용에 용이\r상속성 | 상위 클래스의 속성과 메소드를 하위 클래스에서 재정의 없이 물려받아 사용하는 기법\r다형성 | 하나의 메시지에 대해 각 객체가 가지고 있는 고유한 방법으로 응답하라 수 있는 능력, 오버로딩, 오버라이딩이 대표적\r추상화 | 공통 성질을 추출하여 추상 클래스를 설정하는 기법, 기능 추상화, 자료 추상화, 제어 추상화가 있음\r정보은닉 | 코드 내부 데이터와 메소드를 숨기고 공개 인터페이스를 통해서만 접근이 가능하도록 하는 코드 보안 기술\r 객체지향 설계 원칙(SOLID)  원칙 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r단일 책임의 원칙 (Single Responsibility Principle) | 하나의 클래스는 하나의 목적을 위해서 생성되며, 클래스가 제공하는 모든 서비스는 하나의 책임을 수행하는 데 집중되어 있어야 한다는 원칙\r개방 폐쇄 원칙 (Opne Close Principle) | 소프트웨어의 구성요소 (컴포넌트, 클래스, 모듈, 함수)는 확정에는 열려 있고, 변경에는 닫혀있어야 한다는 원칙\r리스코프 치환의 원칙 (Liskov Substitution) | 자식 클래스 (서브 타입)은 언제나 자신의 부모 클래스 (기반 타입)을 대체한다는 원칙\r인터페이스 분리의 원칙 (Interface Segregation Principle) | 한 클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다는 원칙\r의존성 역전의 원칙 (Dependency Inversion Principle) | 실제 사용 관계는 바뀌지 않으며, 추상을 매개로 메시지를 주고받음으로써 관계를 최대한 느슨하게 만드는 원칙\r 객체지향 방법론의 종류  종류 | 설명 | 특징\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rOOSE (Object Oriented Software Engineering) | 유스케이스에 의한 접근 방법으로 유스케이스를 모든 모델의 근간으로 활용 | 분석, 설계, 구현 단계로 구성 (기능적 요구사항 중심의 시스템)\rOMT (Object Modeling Technology) | 객체지향 분석, 시스템 설계, 오브젝트 설계 및 구현의 4단계로 구성 | 복잡한 대형 프로젝트에 유용\rBooch (OOD: Object Oriented Design) | 설계부분만이 존재하며, 설계 문서화를 강조하여 다이어그램 중심으로 개발 | 분석과 설계 분리 불가능, 분석하는 데 이용된 객체 모델의 설계시 적용\r 디자인패턴 (Design Pattern)  어떤 분야에서 반복적으로 나타나는 문제점들에 대해 전문가들의 경험을 정리하여 해결 방안을 제시한 패턴 디자인 패턴을 참고하여 개발할 경우 개발의 효율성과 유지 보수성, 운용성 등의 품질이 높아지며, 프로그램의 최적화에 도움이 된다.  디자인 패턴 구성요소  구성요소 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r패턴 이름 | 설계 의도를 표현할 수 있도록 문제와 해법을 설명\r문제 | 해결하고자 하는 문제와 배경, 패턴 사용 시점을 서술\r해법 | 패턴을 구성하는 요소, 요소 간의 관계, 책임, 상호관계를 서술\r결과 | 패턴을 적용해서 얻은 결과와 장단점을 서술\r 디자인 패턴 유형  구분 | 유형 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r목적 | 생성 | 객체 인스턴스 생성에 관여, 클래스 정의와 객체 생성 방식을 구조화, 캡슐화를 수행하는 패턴\r| 구조 | 더 큰 구조 형성 목적으로 클래스나 객체의 조합을 다루는 패턴\r| 행위 | 클래스나 객체들이 상호작용하는 방법과 역할 분담을 다루는 패턴\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r범위 | 클래스 | 클래스 간 관련성, 즉 상속 관계를 다루는 패턴 (컴파일 타임에 정적으로 결정)\r| 객체 | 객체 간 관련성을 다루는 패턴 (런타임 동적으로 결정)\r 내, 외부 인터페이스 요구사항   내, 외부 인터페이스란 조직 내, 외부에 존재하는 시스템이 연동을 통해 상호 작용하기 위한 접속 방법이나 규칙을 의미\n  내, 외부 인터페이스 요구사항이란 조직 내, 외부에 존재하는 시스템들이 상호 접속을 통하여 특정 기능을 수행하기 위한 접속 방법이나 규칙에 대한 필수적 요구사항\n  내, 외부 인터페이스 요구사항을 위해서는 구성요소들 간의 사전에 연동 방안에 대한 협의가 필요하다.\n  내, 외부 인터페이스의 요구사항에는 수행될 기능과 관련되어야 하는 기능적 요구사항과 연계시 용이성, 신뢰도, 보안성 등 시스템 전반과 관련된 요구사항인 비기능적 요구사항이 있다.\n  내, 외부 인터페이스 관련 요구사항 식별 및 분류 방안\n 요구사항 식별 -\u0026gt; 명세서 및 현황 자료 준비 -\u0026gt; 기능 요구사항 및 비기능 요구사항 분류    내, 외부 인터페이스 요구사항 명세서 구체화 프로세스\n 내, 외부 인터페이스 요구사항 정의서 세분화 -\u0026gt; 내, 외부 인터페이스 요구사항 내용의 이해 및 수정 -\u0026gt; 누락된 내, 외부 인터페이스 요구사항 신규 정의 -\u0026gt; 내 외부 인터페이스 요구 사항 정리    요구공학 (Requirements Engineering)  요구공학은 사용자의 요구가 반영된 시스템을 개발하기 위하여 사용자 요구사항에 대한 추출, 분석, 명세, 검증, 관리하는 구조화된 활동 이해관계자 사이에 효과적인 의사소통 수단을 제공 및 시스템 개발의 요구사항에 대한 공통된 이해를 설정 요구사항 누락 방지 및 이해 오류로 인한 불필요한 비용을 절감하고 요구사항 변경 추적을 가능하게 한다. 요구공학의 기본은 시스템의 요구사항에 대한 파악  요구사항의 분류  구분 | 기능적 요구 사항 | 비기능적 요구사항\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r개념 | 시스템이 제공하는 기능, 서비스에 대한 요구 사항 | 시스템이 수행하는 기능 이외의 사항, 시스템 구축에 대한 제약사항에 관한 요구사항\r도출 방법 | 특정 입력에 대해 시스템이 어떻게 반응해야 하는지에 대한 기술 | 품질 속성에 관련하여 시스템이 갖춰야 할 사항에 관한 기술\r특성 | 기능성, 완전성, 일관성 | 신뢰성, 사용성, 효율성, 유지 보수성, 이식성\r사례 | 온라인 홈페이지에서는 쇼핑카트에 주문하고자 하는 품목을 저장할 수 있는 장바구니 | 특정 함수의 호출시간은 3초를 넘지 않아야 하며, 시스템은 하루 24시간 가동되어야 함\r 요구공학 프로세스  요구공학 프로세스는 개발 단계와 요구사항 관리 단계로 구성된다.  요구사항 개발 단계  프로세스 | 내용 | 기법/ 산춘물\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r요구사항 추출 | 고객으로부터 제시되는 추상적 요구에 대해 관련 정보를 식별\u0026amp; 수집하여 요구사항으로 표현하는 활동 | 인터뷰, 브레인스토밍, 델 파이 기법\r요구사항 분석 | 추출된 요구사항에 대해 충돌, 중복, 누락 등의 분석을 통해 완정성과 일관성을 확보하는 활동 | 유스케이스 기반 분석 (UML, 모델링)\r요구사항 명세 | 동의한 요구사항을 하나 이상의 형태로 저장하여 정형화된 요구사항을 생성하는 활동 | 요구사항 명세서를\r요구사항 검증 | 요구사항 명세서에 사용자의 요구가 올바르게 기술되었는지에 대해 검토하고 베이스라인으로 설정하는 활동 | 베이스라인 수립, 요구사항 추적표\r 요구사항 개발 단계의 주요 기법 - 주요 기법 | 설명 \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; 인터뷰 (Interview) | 이해관계자와 직접 대화를 통해 정보를 구하는 공식적, 비공식적 정부 수집 방법 델파이 기법 (Delphi Method) | 전문가의 경험적 지식을 통한 문제 해결 및 미래예측을 위한 기법 롤 플레이 (Role Playing) | 현실에 일어나는 장면을 설정하고, 여러 사람이 각자가 맡은 역을 연기하여 요구사항을 분석하여 수집하는 방법 UML (Unified Modeling Language) | 객체지향 소프트웨어 개발과정에서 산출물을 명세화, 시각화, 문서화 할 시 사용되는 모델링 기술과 방법론을 통합해 만든 표준화된 범용 모델링 언어 모델링 (Modeling) | 실세계의 물리현상을 특정한 목적에 대응하여 이용하기 쉬운 형식으로 표현하는 기법을 의미 요구사항 명세서 (Requirements Specification) | 소프트웨어 개발 프로세스의 시작인 소프트웨어의 요구사항을 분석하고 정의하는 단계에서 작성되는 최종 산출물 베이스 라인 (Baseline) | 생명주기 내에서 공학적, 관리적, 획득적 측면을 고려하여 정한 하나의 분기점 요구사항 추적표 | 요구사항 정의서를 기준으로 개발단계별 최종 산출물이 어떻게 반영되고, 변경되었는 지 확인이 가능한 문서\n요구사항 명세 원리 및 검증 항목  항목 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r명확성 | 각각의 요구사항 명세 내용은 하나의 의미만 부여해야 함\r완전성 | 기능, 성능, 속성, 인터페이스, 설계 제약 등에 관한 모든 시스템 요구사항이 포함되어야 함\r검증 가능성 | 요구사항 내용의 충족 여부와 달성 정도에 대한 확인이 가능해야 함\r일관성 | 요구사항의 내용 간 상호 모순이 없어야 함\r수정 용이성 | 요구사항 변경 시 쉽게 수정 가능해야 함\r추적 가능성 | 각 요구사항 근거에 대한 추적과 상호참조가 가능해야 함\r개발 후 이용성 | 시스템 개발 후 운영 및 유지보수에 효과적인 이용이 가능해야 함\r 요구사항 관리 프로세스  순서 | 프로세스 | 내용 | 기법/ 산출물\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r1 | 요구사항 협상 | 가용한 자원과 수용 가능한 위험 수준에서 구현 가능한 기능을 협상하기 위한 기법 | 우선순위 설정, 시뮬레이션\r2 | 요구사항 기준선 | 공식적으로 검토되고 합의된 요구사항 명세서 | 공식 회의, 형상 관리\r3 | 요구사항 변경관리 | 요구사항 기준선을 기반으로 모든 변경을 공식적으로 통제하기 위한 기법 | 형상통제 위원회, 영향도 분석\r4 | 요구사항 확인 및 검증 | 구축된 시스템이 이해관계자가 기대한 요구사항에 부합하는 지 확인하기 위한 방법 | 확인 및 검증\r 요구사항 검증 절차  순서 | 프로세스 | 내용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r1 | 요구사항 검토, 계획 수립 | 품질 관리자 또는 프로젝트 관리자가 요구사항 검토기준과 검토방법, 검토 일정과 참여자 등을 포함한 요구사항 검토 계획 수립\r2 | 요구사항 명세서, 검토 및 오류 수정 | 요구사항 검토 계획 수립 시 선저한 검토 방법과 검토 기준에 따라 요구사항 명세서 검토\r3 | 요구사항 베이스라인 설정 | 요구사항 검토를 통해 검증된 요구사항을 공식적으로 승인하고 소프트웨어 설계와 구현을 할 수 있도록 요구사항 명세서의 베이스 라인을 결정\r 시스템 아키텍처 (System Architecture)  시스템 아키텍처는 시스템의 구조, 행위, 동작 원리를 설명하는 프레임워크이다 시스템 아키텍처는 시스템 목적을 달성하기 위해서 시스템 각 컴포넌트가 무엇이며 어떻게 상호작용하는지, 정보가 어떻게 교환되는지를 설명한다.  시스템 아키텍처 설계 시 중점 고려사항  고려사항 | 내용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r기술적 제약사항 | 계획된/ 계획되지 않은 중단시간 최소화 설계\r| 중단 없는 운영 확보를 통한 가용성 확보\r| DB 서버의 부하를 최대한 경감하는 방안 고려\r| 수직 확장성이 높은 하드웨어 또는 분산 DB 고려\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r기술 요구사항 | UI 개발 도구는\r| 미들웨어 기반 기술에 적합한 아키텍처 설계\r| 개발 프레임워크 도입에 따른 개발 및 인터페이스 방식 검토\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r기존 운영상의 문제점 개선 | 장애 발생을 감안한 용량 산정\r| 데이터 손실 없이 신속히 서비스를 복구할 수 있는 아키텍처 설계\r| 트랜잭션 부하 폭증에 대한 대처 방안 수립\r| 대용량 트랜잭션 및 스토리지 운영 관리에 적합한 서버, 스토리지 물리 설계  시스템 아키텍처 설계 원칙  설계 원칙 | 아키텍처 설계 방안\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r대규모 트랜잭션 처리 및 온라인 성능 보장 | 피크타임 용량 확보, 대용량 배치 처리, 부하 분산 최적화, DB 용량 경량화\r시스템 아키텍처 확장성 보장 | 다계층 아키텍처 구성, 하드웨어 확장성, 아키텍처 확장성\r서비스 고가용성 보장 | 장애 예방, 서비스 중단시간 최소화, 비상 시스템 구성\r운영관리 효율성 | 트랜잭션 관리, 성능 및 장애 관리, 통합 백업 관리\r시스템 보안 강화 | 정보 보호 전략 수립, 네트워크 보안, 시스템 보안\r 시스템 아키텍처 물리 설계  1-Tier (비즈니스 로직 + 데이터) 2-Tier (UI + 비즈니스 로직, 데이터) 3-Tier (UI로직, 비즈니스 로직, 데이터)  인터페이스 시스템 개념  인터페이스 시스템은 서로 다른 두 시스템, 장치, 소프트웨어를 서로 이어주는 접속 및 중계 시스템 인터페이스 시스템은 송신 시스템과 수신 시스템으로 구성할 수 있으며, 연계 방식에 따라 중계 서버를 둘 수 있음  인터페이스 시스테 구성  구성 | 내용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r송신 시스템 | 연계할 데이터를 데이터베이스와 애플리케이션으로부터 연계 테이블 또는 파일 형태로 생성하여 송신하는 시스템\r수신 시스템 | 수신한 연계 테이블 또는 파일의 데이터를 수신 시스템에서 관리하느느 데이터 형식에 맞게 변환하여 데이터베이스에 저장하거나 애플리케이션에서 활용할 수 있게 하는 시스템\r중계 서버 | 송신 시스템과 수신 시스템 사이에서 데이터를 송수신하고, 연계 데이터의 송수신 현황을 모니터링하는 시스템\r 내, 외부/ 송, 수신  내, 외부/ 송, 수신을 위해서 연계 방식과 연계 기술, 통신 유형의 선택은 성능을 위한 가장 중요한 요소이다. 내, 외부 송, 수신의 연계방식은 직접 연계 방식과 간접 연계 방식으로 분류할 수 있다.  내, 외부/ 송, 수신 연계 기술  연계 방식 | 장, 단점 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r직접 연계 방식 | 장점 | 중간 매개체가 없어 연계 처리 속도가 빠르고 구현이 단순, 개발 비용과 기간이 짧음\r| 단점 | 송신 시스템과 수신 시스템 간의 결합도가 높아서 시스템 변경 시 민감\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r간접 연계 방식 | 장점 | 송, 수신 처리 및 현황을 모니터링하고 통제하는 연계 서버를 활용하는 방식\r| 서로 다른 네트워크와 프로토콜 등 다양한 환경을 갖는 시스템들을 연계하고 통합 관리할 수 있음\r| 단점 | 인터페이스 아키텍처와 연계 절차가 복잡하고 연계 서버로 인한 성능저하 및 개발 및 테스트 기간이 오래걸림\r 데이터 명세화  인터페이스 요구사항 분석 과정에서 식별한 연계 정보 그룹에 해당하는 테이블 정의서, 파일 레이아웃, 코드 정의서 등을 분석하여 필요한 데이터 명세를 만드는 작업 인터페이스 요구사항 분석 과정에서 식별한 개체 정의서, 테이블 정의서, 코드 정의서를 분석하여 필요한 정보를 파악한다.  개체 정의서 명세 지침 항목  항목 | 항목 정의 및 작성 지침\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r논리 DB 명 | 엔터티가 설계된 논리 데이터베이스의 명칭\r엔터티 명 | 엔터티의 이름으로 '표준용어 정의서'에 등록된 용어를 사용하여 한글로 기재\r엔터니 설명 | 관련된 업무에 대한 개략적인 설명 및 업무 규칙을 기술\r주 식별자 | 엔터티에서 집합의 유일성을 나타내는 속성 또는 속성의 그룹\r슈퍼타입 엔터티 명 | 해당 엔터티가 슈퍼-서브 타입 관계에 있는 서브 타입 엔터티인 경우에 한하여 상위에 존재하는 슈퍼타입 엔터티의 이름을 기재\r "});index.add({'id':20,'href':'/docs/blog/study/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/2.-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B3%84%EB%B0%9C/','title':"2. 소프트웨어 계발",'content':"데이터 입출력 구현  자료 구조 ( Data Structure )    컴퓨터상 자료를 효율적으로 저장하기 위해 만들어진 논리적인 구조\n  자료 구조의 현명한 선택을 통해 효율적인 알고리즘을 사용할 수 있어 성능을 향샹\n   자료 구조의 분류    자료 구조의 분류는 선형 구조와 비선형 구조로 크게 나뉜다\n  선형 구조에는 배열, 연결 리스트, 스택, 큐 등이 있다\n  비선형 구조엔느 트리, 그래프 등이 존재\n   리스트의 종류  개념 | 설명\r------------------------------------------------------------------------------------------------------\r선형 리스트 ( Linear List ) | 배열과 같이 연속으로 기억 장소에 저장되는 리스트\r| 선형 리스트의 대표적인 구조로는 배열 ( Array ) 등이 있음\r| 가장 간편한 자료 구조로, 접근 구조가 빠름\r| 자료의 삽입, 삭제 시 기존 자료의 이동이 필요\r------------------------------------------------------------------------------------------------------\r연결 리스트 ( Linked List ) | 노드의 포인터 부분으로 서로 연결시킨 리스트\r| 연결하는 방식에 따라 단순 연결 리스트, 원형 연결 리스트, 이중 연결 리스트, 이중원형 연결리스트로 구분\r| 노드의 삽입, 삭제가 선형 리스트와 달리 편리\r| 연결을 위한 포인터를 추가되어 저장 공간이 추가로 필요\r| 포인터를 통해 찾는 시간이 추가되어 순차 리스트에 비해 느림\r    스택 ( Stack )   한 방향으로만 자료를 넣고 뺼 수 있는 LIFO ( Last-in First Out 형식의 자료구조     큐 ( Queue )   스택과 달리 리스트의 한쪽 끝에서는 사입 작업이 이뤄지고 반대쪽 끝에서는 삭제 작업이 이루어지는 FIFO ( First-in First-Out ) 형식의 자료 구조     데크 ( Deque: Double Ended Queue )  큐의 양쪽 끝에서 삽입과 삭제를 할 수 있는 자료 구조     트리 Tree    데이터들을 계층화 시킨 자료구조\n  인덱스를 조작하는 방법으로 가장 많이 사용하는 구조\n  트리는 노드 ( Node )를 연결하는 링크 ( Link )로 구성\n  배열과 달리 노드들이 포인터로 연겨로디어 노드의 상한선이 없음\n  노드의 최대 수 = 2**n-1 ( n = 노드의 깊이 )\n  \rTree 용어\r...\r\r  루트 노드 ( Root Node ): 트리에서 부모가 없는 최상위 노드, 트리의 시작점\n  단말 노드 ( Leaf Node ): 자식이 없는 노드, 트리의 가장 말단에 위치\n  레벨 ( Level ): 루트 노드를 기준으로 특정 노드까지의 경로 길이\n  조상 노드 ( Ancestor Node ): 특정 노드에서 루트에 이르는 경로상 모든 노드\n  자식 노드 ( Child Node ): 특정 노드에 연결된 다음 레벨의 노드\n  부모 노드 ( Parent Node ): 특정 노드에 연결된 이전 레벨의 노드\n  형제 노드 ( Sibling ): 같은 부모를 가진 노드\n  깊이 ( Depth, Height ): 트리의 최대 레벨\n  차수 ( Degree ): 특정 노드에 연결된 자식 노드의 수\n  \r\r\r    트리 순회 방법    전위 순회 ( Pre-Order Traversal ): Root \u0026ndash;\u0026gt; Left \u0026ndash;\u0026gt; Right순으로 방문\n  중위 순회 ( In-Order Traversal ): Left \u0026ndash;\u0026gt; Root \u0026ndash;\u0026gt; Right순으로 방문\n  후위 순위 ( Post-Order Traversal ): Left \u0026ndash;\u0026gt; Right -\u0026gt;Root 순으로 방문\n     이진 트리    포화 이진 트리 ( Full Binary Tree ): 모든 레벨에서 노드가 꽉 채워진 트리\n  완전 이진 트리 ( Complete Binary Tree ): 마지막 레벨을 제외하고 노드가 채워진 트리\n  편향 이진 트리 ( Skewed Binary Tree ): 노드가 왼쪽이나 오른쪽 한 곳만 노드가 존재하는 트리\n     그래프 ( Graph )    노드 ( N: Node )와 노드를 연결하는 간선 ( E: Edge )을 하나로 모아놓은 자료구조\n  트리 ( Tree )는 사이클이 없는 그래프\n  방향성의 우무에 따라 방향 그래프와 무방향 그래프로 구분\n  방향 그래프: 정점을 연결하는 선에 방향이 있는 그래프\n최대 간선수: n(n-1)\n  무방향 그래프: 정점을 연결하는 선에 방향이 없는 그래프\n최대 간선수: n(n-1)/2\n       논리 데이터 저장소    업무를 모델링 표기법으로 형상화한 데이터 저장소\n  물리 데이터 저장소와 별개로 사용자 혹은 개발자가 이해하기 쉬운 논리적인 구조로 추상화하여 제공\n  논리 데이터 자장소의 구조\n 개체 ( Entity ): 관리할 대상이 되는 실체 속성 ( Attribute ): 관리할 정보의 구체적 항목 관계 ( Relationship ): 개체 간의 대응 관계     논리 데이터 저장소 검증 절차    개체 ( Entity ) 확인\n  입력데이터, 출력 데이터 식별 확인\n  관련 업무와의 연계 데이터 식별확인\n  신규 데이터 요구사항 식별 확인\n    속성 ( Attribute ) 확인\n  시스템별 데이터베이스 구조, 분산, 백업 현황 파악 수준 점검\n  데이터 속성, 공통코드 파악 수준 점검\n  외부 연계 데이터 속성 파악 수준 점검\n    관계 ( Relation ) 확인\n  개체 간 관계의 적절성 확인\n  증복 최소화를 통한 무결성 보장 여부 확인\n    데이터 베이스 요구사항 확인\n  저장 데이터 볼륨, 분산구조, 제약조건에 관한 요구사항 도출/ 분석 확인\n  데이터베이스 백업 및 복수정책 요구사항 확인\n  초기 데이터 구축방안에 대한 요구사항 도출/ 분석 확인\n    데이터 흐름 확인\n  프로세스별 입출력 데이터 정의 수준 확인\n  프로세스 간 공유 및 연계 데이터 정의 수준 확인\n    데이터 설계 기준 확인\n  데이터베이스 설계 표준 지침 작성 여부 및 적설성 확인\n  데이터 모델 설계 지침 작성 여부 및 적절성 확인\n    데이터 접근권한 확인\n  데이터에 접근권한 및 통제 분석 적정성 확인\n  데이터 암호화 대상 소프트웨어 아키텍처 설계 가이드라인 확인\n       물리 데이터 저장소   논리 데이터 모델을 사용하고자 하는 각 DBMS의 특성을 고려하여 데이터베이스 저장 구조 ( 물리 데이터 모델 )변환하기 위한 데이터 저장소를 의미   물리 데이터 저장소 모델 변환 절차    단위 개체를 테이블로 변환 ( 논리 모델에서 정의된 개체 (Entity )는 물리 모델에서 테이블로 변환 )\n  일반적으로 테이블과 개체 명칭을 동일하게 하는 것을 권고\n  개체는 한글명을 사용\n  테이블은 소스 코드의 가독성을 위해 영문명을 사용\n    속성을 컬럼으로 변환 ( 논리 모델에서 정의된 속성은 물리 모델에서 컬럼으로 변환 )\n  개발자와 사용자 간 의사소통을 위해 표준화된 약어를 사용하도록 권고\n  SQL 예약어 사용은 피해야 함\n  SQL 문장 가독성을 높이기 위해 컬럼 명칭은 되도록 짧은 것을 권고\n  컬럼명으로 복합단어를 사용할 경우 미리 정의된 표준에 의해 명명해야 함\n    UID 기본 키 ( Primary Key )로 변환 ( 개체의 UID에 해당하는 모든 속성에 대해 기본 키로 선언 )\n  개체의 UID에 해당하는 모든 속성에 대해 기본 키로 선언\n  Not Null, Unique 등의 제약조건을 추가로 정의\n  관계에 의한 외래 키가 기본키에 포함 될 수 있음\n    관계를 외래 키 ( Foreign Key )로 변환 ( 논리 모델에서 정의된 관계는 외래 키로 변환 )\n  외래 키 명은 기본키 이름을 그대로 사용하나 다른 의미를 가질 경우 변경 가능\n  순환 관계에서 자신의 기본 키는 외래 키로 정의\n    컬럼 유형 ( Type )와 길이 ( Length ) 정의\n DBMS에서 제공하는 데이터 유형 중 적절한 유형을 정의하고, 해당 데이터의 최대 길이를 파악하여 길이를 설정 \r자주 사용되는 데아터 유형 ( Oracle )\r...\r\r- CHAR: 최대 2000btye의 고정 길이 문자열 저장 가능\r- VARCHAR2: 최대 4000byte의 가변 길이 문자열 저장 기능\r- NUMBER: 38자릿수의 숫자 저장 가능\r- DATE: 날짜 값을 저장\r- BLOB, CLOB: 바이너리 ( Binary ), 텍스트 데이터 최대 4GB까지 저장 가능\r\r\r\r\r     **** **** **** **** **** "});index.add({'id':21,'href':'/docs/blog/study/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/3.-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EA%B5%AC%EC%B6%95/','title':"3. 데이터베이스 구축",'content':"#DBMS (Database Management System)\n - 사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성해주고 데이터베이스를 관리해주는 소프트웨어\r#DBMS의 필수 3기능\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r유형 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r데이터 정의 (Data Definition) | 다양한 응용 프로그램과 데이터베이스가 서로 인터페이스를 할 수 있는 방법을 제공하는 기능\r데이터 조작 (Data Manipulation) | 사용자와 데이터베이스 사이의 인터페이스를 위한 수단을 제공하는 기능\r데이터 제어 (Data Cotrol) | 공용 목적으로 관리되는 데이터베이스 내용에 대해 상상 정확성과 안정성을 유지 할 수 있도록 데이터를 제어 하는 기능\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#데이터 모델 (Data Model)\r- 현살 세계의 정보를 인간과 컴퓨터가 이해할 수 있도록 추상화하여 표현한 모델이다\r- 데이터 모델 절차는 개념적 데이터 모델, 논리적 데이터 모델, 물리적 데이터 모델 순이다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r절차 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r개념적 데이터 모델 | 현실 세계에 대한 인식을 추상적, 개념적으로 표현하여 개념적 구조를 도출하는 프로세스이다.\r| 개념적 데이터 모델은 DB 종류에 관계가 있다.\r| 주요 산출물은 개체관계도이다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r논리적 데이터 모델 | 업무의 모습을 모델링 표기법으로 형상화하여 사람이 이해하기 쉽게 표현하는 프로세스이다.\r| 논리적 데이터 모델을 통해 \u0026quot;관계 데이터 모델\u0026quot;, \u0026quot;계층 데이터 모델\u0026quot;, \u0026quot;네트워크 데이터 모델\u0026quot;, \u0026quot;객체지향 데이터 모델\u0026quot;, \u0026quot;객체-관계 데이터 모델\u0026quot; 중 하나의 모델에 맞게 설계한다.\r| 트렌젝션 인터페이스를 설계한다.\r| 논리적 데이터 모델링에서 정규화를 수행한다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r물리적 데이터 모델 | 논리 데이터 모델을 특정 DBMS의 특성 및 성능을 고려하여 물리적인 스키마를 만드는 일련의 프로세스이다.\r| 논리 데이터 모델을 사용하고자 하는 각 DBMS의 특성을 고려하여 데이터베이스 저장 구조(물리 데이터 모델)로 변환한다.\r| 테이블, 인덱스, 뷰, 파티션, 트랜잭션 등의 객체를 생성한다.\r| 성능측면에서 반정규화를 수행한다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#개체-관계 (E-R)모델\r- 현실 세계에 존재하는 데이터와 그들 간의 관계를 사람이 이해할 수 있는 형태로 명확하게 표현하기 위해서 가장 널리 사용되고 있는 모델이다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구성요소 | 설명 | 특징\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r개체 (Entity) | 사물, 사물 등 유무형의 정보를 가지고 있는 요소 | 물리 단계에서 테이블로 변환\r속성 (Attribute) | 개체가 갖는 속성 의미 | 물리 단계에서 칼럼으로 변환\r관계 (Relationship) | 두 개 이상의 개체 사이에 존재하는 연관성 | 1:1, 1:N, N,M 관계 존재\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구성 | 기호\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r개체 | 사각형\r관계 | 마름모\r속성 | 타원\r다중 값 속성 | 이중타원\r관계-속성 연결 | 선\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#논리적 데이터 모델링\r- 업무의 모습을 모델링 표기법으로 형상화하여 사람이 이해하기 쉽게 표현하는 프로세스이다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r종류 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r관계 데이터 모델 | 논리적 구조가 2차원 테이블 형태로 구성된 모델, 기본키 (PK)와 이를 참조하는 외래 키 (FK)로 관계 표현\r계층 데이터 모델 | 논리적 구조가 트리 형태로 구성된 모델, 상화관계가 존재한다 (부모, 자식관계)\r네트워크 데이터 모델 | 논리적 구조가 그래프 형태로 구성된 모델이다, CODASYL DBTG이라고 불린다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#정규화\r- 관계형 데이터베이스의 설계에서 증복을 최소화하게 데이터를 구조화하는 프로세스이다.\r- 중복 데이터의 최소화하여 테이블 불일치 위험을 최소화한다.\r- 수정, 삭제 시 이상 현상을 최소화함으로써 데이터 구조의 안정성을 최대화한다.\r- 어떠한 릴레이션이라도 데이터베이스 내에서 표현 가능하게 만든다.\r- 데이터 삽입 시, 릴레이션의 재구성에 대한 필요성을 줄인다.\r- 효과적인 검색 알고리즘을 생성할 수 있다.\r#이상 현상\r- 정규화되지 않을 경우 발생하는 현상으로 삽입, 갱신, 삭제 이상이 있다.\r#데이터베이스 정규화 단계\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r단계 | 조건\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r1정규형 (1NF) | 원자 값으로 구성\r2정규형 (2NF) | 부분 함수 종속 제거( 완전 함수적 종속 관계)\r3정규형 (3NF) | 이행 함수 종속 제거되지\r보이스-코드 정규형 (BCNF) | 결정자 함수 종속\r4정규형 (4NF) | 다치 (다중 값) 종속성 제거\r5정규형 (%NF) | 조인 종속성 제거\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#논리 데이터 품질 검증\r- 데이터 모델이 업무 환경에서 요구하는 사항을 얼마나 잘 시스템적으로 구현할 수 있는가를 객관적으로 평가하기 어렵다.\r- 대체적으로 좋은 데이터 모델이라고 말할 수 있는 몇 가지 요건이 존재한다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r요건 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r완전성 | 업무에서 필요로하는 모든 데이터가 데이터 모델에 정의되어 있어야 함\r중복 베제 | 하나의 데이터베이스 내에 동일한 사실은 반드시 한 번만 기록하여햐 함\r비즈니스 룰 | 업무 규칙을 데이터 모델에 표현하고 이를 모든 사용자가 공유할 수 있게 제공해야 함\r데이터 재사용 | 데이터의 재사용성을 향상시키기 위해서는 데이터의 통합성과 독립성에 대해서 충분히 고려해야 함\r안정성 및 확장성 | 정보 시스템을 구축하는 과정에서 데이터 구조의 안정성, 확장성, 유연성을 고려해야 함\r간결성 | 아무리 효율적으로 데이터를 잘 관리할 수 있더라도 사용, 관리 측면에서 복잡하다면 잘 만들어진 데이터 모델이라고 할 수 없음\r의사소통 | 많은 업무 규칙은 데이터 모델에 개체, 서브타입, 속성, 관계 등의 형태로 최대한 자세하게 표현되어야 함\r통합성 | 동일한 데이터는 조직의 전체에서 한 번만 정의되고 이를 여러 다른 영역에서 참조, 활용되어야 함. ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #데이터 모델 품질 검증 기준\r- 논리적 데이터베이스 구축 후에 데이터 품질의 좋고 나쁨을 검증하기 위한 기준이다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r기준 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r정확성 | 데이터 모델이 표기법에 따라 정확하게 표현되었고, 업무 영역 또는 요구사항이 정확하게 반영해야 함\r완전성 | 데이터 모델의 구성요소를 정의하는 데 있어서 누락을 최소화시키고, 요구사항 및 업무영역 반영에 있어서 누락이 없어야 함\r준거성 | 제반 준수 요건들이 누락 없이 정확하게 준수해야 함\r최신성 | 데이터 모델이 현행 시스템의 최신 상태를 반영하고 있고, 이슈사항들이 지체 없이 반영해야 함\r일관성 | 여러 영역에서 공통 사용되는 데이터 요소가 전사 수준에서 한 번만 정의되고 이를 여러 다른 영역에서 참조, 화룡되면서, 모델 표현상의 일관성을 유지해야 함\r활용성 | 작성된 모델과 그 설명 내용이 이해관계자에게 의미를 충분하게 전달할 수 있으면서, 어붐 변환 시에 설계 변경이 최소화되도록 유연하게 설계해야 함.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #반정규화\r- 정규화된 엔터티, 속성, 관계에 대해 성능 향상과 개발 운영의 단순화를 위해 증복, 통합, 분리 등을 수행하는 데이터 모델링의 기법이다.\r- 반정규화를 위해서는 데이터의 일관성과 무결성을 우선으로 할지 데이터베이스의 성능과 단순화에 우선순위를 둘 것인지를 조정하는 과정이 중요하다.\r- 반정규화의 데이터 구조는 성능 향상과 관리의 효율성이 증가시킬 수 있는 장점이 있는 반면, 데이터의 일관성 및 정합성이 저하되고, 비용과 성능면에서 좋지 않은 영향을 끼칠 수 있다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구분 | 기법 | 설명 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r테이블 | 테이블 병합 | 1:1 관계, 1:M 관계를 통합하여 조인 횟수를 줄여 성능을 향상\r| 테이블 | 테이블을 수직 또는 수평으로 분할하는 것으로 파티셔닝이라고 함 ( 수평분할 (테이블 분할에 레코드 기준 사용), 수직분할 ( 하나의 테이블이 가지는 증가하는 컬럼의 개수를 사용)\r| 증복 테이블 생성 | 대량의 데이터들에 대한 집계함수(GROUP BY, SUM 등)을 사용하여 실시간 통계정보를 곗나하는 경우에 효과적인 수행을 이해 별도의 통계 테이블을 두거나 증복 테이블을 추가\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r컬럼 | 중복 컬럼 생성 | 조인 시 성능 저하를 예방하기 이해, 증복된 컬럼을 위치시킴, 대량의 이력데이터 처리 시 불특정일 조회나 최근 값을 조회할 때 나타날 수 있는 성능 저하를 예방하기 위해 기능성 컬럼을 추가\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r관계 | 증복관계 추가 | 데이터를 처리하기 위한 여러 경로를 거쳐 조인이 간으하짐나 이때 발생할 수 있는 성능 저하를 예방하기 위해 추가적 관계를 맺는 방법\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#관계 데이터 모델\r- 실세계 데이터를 행과 열로 구성된 테이블 형태로 구성된 데이터 모델이다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구성요소 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r릴레이션 | 행 (row)와 열 (Column)로 구성된 테이블\r튜플 (Tuple) | 릴레이션의 행 (Row)에 해당되는 요소\r속성 (Attribute) | 릴레이션의 행 (Column)에 해당되는 요소\r카디널리티 (Cardinality) | 튜플 (Row)의 수\r스키마 (Schema) | 릴레이션이 어떻게 구성되는지, 어떤 정보를 담고 있는 지에 대한 기본적인 구조\r인스턴스 (Instance) | 정의된 스키마에 따라 생성된 테이블에 실제 저장된 데이터의 집합\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#관계 대수\r- 관계형 데이터베이스에서 원하는 정보와 그 정보를 어떻게 유도하는가를 기술하는 절차적 정형언어\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r연산자 | 기호를 | 표현 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r합집합 (Union) | U | R U S | 합겹 가능한 두 릴레이션 R과 S의 합집합\r교집합 (Intersection) | U 뒤집은 것 | R N S | 릴리에션 R과 S에 속하는 모든 튜플로 결과 릴레이션 구성\r차집합 (Difference) | - | R - S | R에 존재하고 S에 미 존재하는 튜플로 결과 릴레이션을 구성\r카디션 프로덕트 (Cartesian Product) | X | R X S | R과 S에 속한 모든 튜플을 연결해 만들어진 새로운 튜플로 릴레이션 구성\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#순수 관계 연산자\r- 관계 데이터베이스에 적용할 수 있또록 특별히 개발한 관계 연산자\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r연산자 | 기호 | 표현 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r셀렉트 (Select) | q | q (조건 (R)) | 힐레이션 R에서 조건을 만족하는 튜플 반환\r프로젝트 (Project) | 파이 | 파이 (속성리스트(R)) | 릴레이션 R에서 주어진 속성들의 값으로만 구성된 튜플 반환\r조인 (Join) | |X| | R |X| S | 공통 속성을 이용해 R과 S의 튜플들을 연결해 만등어진 튜플 반환\r디비전 (Division) | / | R / S | 릴레이션 S의 모든 튜플과 관련 있는 R의 튜플 반환\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#관계 해석\r- 튜플관계 해석과 도메인 관계 해석을 하는 비절차적 언어이다.\r- 프레디킷 해석( Predicate Calculus)에 기반한 언어이며 비절차적 언어 (원하는 정보가 무엇인지이라는 것만 선언)이다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구분 | 구성요소 | 기호 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r연산자 | OR 연산자 | V | 원자식 간 \u0026quot;또는\u0026quot; 이라는 관계로 연결\r| AND 연산자 | 뒤집어진 V | 원자식 간 \u0026quot;그리고\u0026quot; 라는 관계로 연결\r| NOT 연산자 | 뒤집어진 ㄱ | 원자식에 대한 부정\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 정량자 | 전칭 전량자 (Universal Quantifier) | 뒤집어진 A | 모든 가능한 튜플 (\u0026quot;for all\u0026quot;)\r| 존재 정량자 (Existential Quantifier) | 좌우바뀌 E | 어떤 튜플 하나라도 존재 (\u0026quot;there exiests\u0026quot;)\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r관계 대수와 관꼐 해석비교\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구분 | 관계 대수 | 관계 해석\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r특징 | 절차적 언어 (순서 명시) | 비 절차적 언어(계산 수시의 유연적 사용), 프레디킷 해석기반\r목적 | 어떻게 유도하는가? (How) | 무엇을 얻을 것인가? (What)\r종류 | 순수관계 연산자, 일반집합 연산자 | 튜플 관계 해석, 도메인 관계 해석\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#관계형 데이터 모델 (Relation Data Model)\r- 관계형 데이터 모델은 보편적인 데이터 모델로, 계층 모델과 망 모델의 복잡한 구조를 단순화 시킨 모델\r- 관계 모델의 대표적 언어로는 SQL이 있다.\r- 데이터 간의 관계를 기본 키와 이를 참조하는 외래 키로 표현\r- 테이블 간 관계를 1:1, 1:N, M:N 관계로 목적에 맞게 표현한다.\r관계 데이터 모델의 표현\r고객 주문 주문서\r------------ ------------ ------------\r| 번호 | 1 N | 번호 | 1 1 | 예약번호 |\r--------------------------------------------------------------------------------\r| 이름 | | 예약번호 | | 수량 |\r------------ ------------ -----------\r- 고객, 주문, 주문서 테이블을 관계 게이터 모델로 표현한다.\r- 고객 테이블의 PRIMARY kEY는 번호이고, 주문서 테이블의 PRIMARY kEY는 주문번호이다.\r- 고객 테이블과 주문 테이블은 1:N 관계에 있고, 주문 테이블과 주문서 테이블은 1:1 관계에 있다.\r#데이터 무결성 (Database Integrity)\r- 데이터베이스에 저장된 데이터 값과 그것이 표현하는 실제 값이 일치하는 정확성을 의미\r- 무결성은 권한이 있는 사용자로부터 데이터베이스를 보호\r무결성의 종류\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r종류 | 설명 | 요소\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r개체 무결성 | 한 엔티티에서 같은 기본 키(PK)를 가질 수 없거나, 기본 키 (PK)의 속성이 NULL을 허용할 수 없음 | 기본키, 유니크 인덱스\r참조 무결성 | 외래 키가 참조하는 다른 개체의 기본 키에 해당하는 값이 기본 키 값이나 NULL이어야 함 | 외래 키\r속성 무결성 | 속성의 값은 , NULL 여부, 도메인이 지정된 규칙을 준수해야 함 | 체크, NULL/ NOT NULL, 기본 값\r사용자 무결성 | 사용자의 의미적 요구사항을 준수해야 함 | 트리거, 사용자 정의 데이터 타입\r키 무결성 | 한 릴레이션에 같은 키 값을 가진 튜플들을 허용할 수 없음 | 유니크\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #컬럼 (column)\r- 컬럼은 테이블을 구성하는 요소로, 데이터 타입 및 길이 등으로 정의된다.\r칼럼 구성요소 및 고려사항\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구성요소 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r내장 데이터 형식 | 문자, 숫자, 시간, 대행 객체 등을 정의\r확장 데이터 형식 | 행, 컬렉션, 사용자 정의, 데이터 형식 등을 지원\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r고려사항 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r타입에 따른 물리적 순서 조정 | 고정 길이 컬럼이고 NOT NULL인 컬럼은 앞편에 정의, 가변 길이 컬럼은 뒤편에 배치, NULL 값이 많은 것으로 예쌍되는 컬럼을 뒤편으로 배치\rDBMS별 물리적 순서조정 특성 | 물리적 순서 조정은 DBMS마다 차이가 있지만, 값이 변경될 때 체인 발생을 억제하고 저장공간의 효율적인 사용을 위해 필요\r데이터 타입 길이 지정 고려사항 | 가변 길이 데이터 타입은 예상되는 최대 길이로 정의, 소수점 이하 자리 수의 정의는 반올림되어 저장되므로 정확성을 확인하고 정의\r컬럼 간 비교 방법 | 비교 연산에서 두 컬럼 사이에 데이터 타입과 같은 길이를 사용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#키 (Key)\r- 데이터베이스에서 조건을 만족하는 튜플을 찾거나 순서대로 정렬할 때 다른 튜플를과 구별할 수 있는 기준이 되는 속성이다.\r- 키는 식별자에 의해 엔터티 타입 내에 모든 엔터티들이 유일하게 구분할 수 있다는 유일성과 최소환의 속성으로 식별자가 구성된다는 최소성을 만족시켜야한다.\r키 종류\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r종류 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r기본 키 (Primary Key) | 테이블의 각 튜플들을 고유하게 식별하는 칼럼\r대체 키 (Alternate Key) | 후보 키 중에서 기본 키로 선택되지 않은 키\r후보 키 (Candidate Key) | 테이블에서 각 튜플들을 구별하는 데 기준이 되는 칼럼, 기본 키와 대체 키를 합친 키\r슈퍼 키 (Super Key) | 릴레이션을 구성하는 모든 튜플에 대해 유일성은 만족하지만, 최소성은 만족하지 못하는 키\r외래 키 (Foregin Key) | 테이블 간의 참조 데이터 무결성을 위한 제약 조건, 한 릴레이션의 컬림이 다른 릴레이션의 기본 키로 이용되는 키\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#테이블 (Table)\r- 각 데이터들을 저장하는 항목인 필드(Field)들로 구성된 데이터의 집합을 테이블 이라고 한다.\r- 하나의 DB 내에 여러 개의 테이블들로 구성될 수 있고, 릴레이션(Relation)혹은 엔터니(Entity)라고 한다.\r- 테이블에 포함된 행들은 유일해야하고, 증복된 행이 존재하지 않아야 한다.\r- 테이블에 포함된 행들 간에는 순서가 존재하지 않는다.\r- 테이블을 구성하는 열들 간에는 순서가 존재하지 않는다.\r테이블의 구조\rTable\r-------------- 이름 직책\r| 홍길동 대리 ---\u0026gt; 행(Row Tuple)\r필드 (Field) \u0026lt;----| 이순신 과장\r|\rV\r열(Column Attribute)\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r용어 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r튜플(Tuple)/ 행(Row) | 테이블 내의 행을 의미하며, 레코드라고도 함\r애트리뷰트(Attribute)/ 열(Column) | 테이블 내의 열을 의미, 열의 개수를 Degree라고 함\r식별자(Identifier) | 여러 개의 집합체를 담고 있는 관계형 데이터베이스에서 각각의 구분할 수 있는 논리적인 개념\r카디널리티(Cardinality) | 튜플의 개수\r차수(Drgree) | 애트리뷰트의 개수\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#트랜잭션 (Transaction)\r- 인가 받지 않은 사용자로부터 데이터를 보장하기 위해 DBMS가 가져야 하는 특성이자, 데이터베이스 시스템에서 하나의 논리적 기능을 정상적으로 수행하기 위한 작업의 기본 단위\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r유형 | 설명 | 주요기법\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r원자성 (Atomicity) | 트랜잭션 연산은 데이터 베이스에 모두 반영되든지 아니면 전혀 반영되지 않아야 한다. | Commit/ Rollback\r일관성 (Consistency) | 트랜잭션이 그 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환한다. | 무결성 제약조건, 동시성 제어\r격리성 (Lsolation) | 트랜잭션 실행 중 생성하는 연산의 중간결과를 다른 트랜잭션이 접근 불가하다. | Read Uncommit, Read Commit, Phantom Read, Seralizable\r영속성 (Durablility) | 성공적으로 완료된 트랜잭션의 결과는 시스템이 곶아 나더라도 영구적으로 반영되어야 한다. | 회복기법\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r트랜잭션의 상태변화\r- 트랜잭션의 제어는 TCL (Transaction Control Language)라고 하며 트랜잭션의 결과를 허용하거나 취소하는 목적으로 사용되는 언어를 지칭\r- 커밋(Commit)이란 하나의 트랜잭션이 성공적으로 끝나고, 데이터베이스가 일관성 있는 상태에 있을 떄 하나의 트랜잭션이 끝났을 떄 사용하는 연산\r- 롤백(Rollback)이란 하나의 트랜잭션이 비상적으로 종료되어 트랜잭션 원자성이 깨질 경우 처음부터 다시 시작하거나, 부분적으로 연산을 취소하는 연산\r|-------\u0026gt; 부분완료 ---commit---\u0026gt; 완료\r활성------| |\r|-------\u0026gt; 실패 ---Rollback---\u0026gt; 철회\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r살태 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r활동 상태 (Active) | 초기 상태, 트랜잭션이 실행 중일 때 가지는 상태\r부분 완료 상태 (Partially Committed) | 마지막 명령문이 실행된 후에 가지는 상태\r완료 상태 (Committed) | 트랜잭션이 성공적으로 완료된 후 가지는 상태\r실패 상태 (Failed) | 정상적이니 실행이 되지 않고 더 이상 진행될 수 없을 때 가지는 상태\r철회 상태 (Aborted) | 트랜잭션이 취소되고 데이터베이스가 트랜잭션 시작 전 상태로 환원된 상태\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r명령어 | 핵심 | 설명\r커밋 (Commit) | 트랜잭션 확정 | 트랜잭션을 메모리에 영구적 저장\r롤백 (Rollback) | 트랜잭션 취소되고 | 트랜잭션 내용을 저장을 무효화시킴\r체크 포인트(CHECKPoint) | 저장 시기 설정 | Rollback을 위한 시점 지정 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#SQL (Structure Query Language) 문법의 개념\r- SQL 문법은 데이터베이스를 접근하고 조작하는 데 필요한 표준 언어를 활용 할 수 있게 해주는 규칙\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r유형 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r데이터 정의어 (DDL) | 테이블의 관계의 구조를 생성하는 데 사용 CREATE, DROP, ALTER문 등이 있음\r데이터 조작어 (DML) | 테이블의 데이터를 검색, 삽입, 수정, 삭제하는 데 사용하며 SELECET, DELETE, INSERT, UPDATE문이 있으며, SELECET문은 질의어(QUERY)라고 부름\r데이터 제어어 (DCL) | 데이터의 사용 권한을 관리하는 데 사용하며 GRANT, REVOKE 문 등이 있음\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#데이터 정의어 (DDL : Data Definition Language)\r- 데이터를 정의하는 언어로, 데이터를 담는 그릇을 정의하는 언어\r- DDL의 대상은 Domain, Schema,Table, View, Index가 있음\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r유형 | 동작 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rCREATE | 데이터 조회 | 데이터베이스 오브젝트 생성\rDROP | 데이터 생성 | 데이터베이스 오브젝트 삭제\rALTER | 데이터 삭제 | 데이터베이스 오브젝트 변경\rTRANSACTION | 데이터 갱신 | 데이터베이스 오브젝트 내용삭제\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rCREATE TABLE [TABLE] (\r속성명 데이터 타입 [NOT NULL], ...,\rPRIMARY KEY(기본 키),\rUNIQUE(속성명, ...),\rFOREIGN KEY(외래 키)\rREFERENCES 참조테이블(기본 키),\rCONSTRAINT 제약조건명 CHECK (조건식)\r);\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rALTER TABLE [TABLE] ADD [속성명 데이터 타입] [DEFAULT 값]; | 열 추가\rALTER TABLE [TABLE] AMODIFY [속성명 데이터 타입] [DEFAULT 값]; | 열 타입 변경\rDROP TABLE [TABLE]; | 테이블 삭제\rTRUNCATE TABLE [TABLE]; | 테이블 내용 삭제\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#제약조건\r- 테이블 생성 시 부적절한 자료가 입력되는 것을 방지하기 위해 사용\r- 제약조건은 종속성이 존재할 경우 테이블 삭제 등을 방지\r- 테이블의 행이 삽입, 갱신, 삭제될 때마다 테이블에서 규칙을 적용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r제약조건 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rPRIMARY KEY | 테이블의 기본 키, 유일하게 테이블의 각 행을 식별\rFOREIGN KEY | 테이블의 외래 키, 참조 대상의 테이블(컬럼 명)으로 명시 및 열과 참고된 테이블의 열 사이의 외래 키 관계를 적용하고 설정\rUNIQUE | 테이블 내에서 얻은 유일한 값\rNOT NULL | 해당 컬럼은 NULL 값을 포함하지 않음을 지정\rCHECK | 개발자가 정의하는 제약조건, 참(TRUE)이어야 하는 조건을 지정\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#데이터 조작어 (DML : Data Mainpulation Language)\r- 데이터베이스의 저장된 자료들을 수정, 삭제, 조회하는 언어\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r유형 | 동작 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rSELECET | 데이터 조회 | 해당 테이블을 구성하는 튜플들 중에서 전체 또는 조건을 만족하는 튜플을 검색하여 주기억장치 상에 임시 테이블로 구성하는 명령문\rINSERT | 데이터 생성 | 해당 테이블에 새로운 튜플을 삽입할 때 사용하는 명령문\rDELETE | 데이터 삭제 | 해당 테이블에 있는 튜플들 중에서 특정 튜플을 삭제할 떄 사용하는 명령문\rUPDATE | 데이터 갱신 | 해당 테이블에 있는 튜플들 중에서 특정 튜플을 갱신할 떄 사용하는 명령문\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rSELECT [DATA_NAME] FROM [TABLE] [WHERE 조건] [GROUP BY DATA_NAME1 DATA_NAME2] [HAVING 그룹조건] [ORDER BY 속성 [ASC | DESC]]; ASC 높은 수 정렬, DESC 낮은 수 정렬 INSERT INTO [TABLE] [속성명] VALUES [데이터1, 데이터2, ...];\rDELETE FROM [TABLE] WHERE 조건;\rUPDATE [TABLE] SET [속성명] WHERE [조건];\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#데이터 제어어 (DCL : Data Control Language)\r- 데이터베이스 관리자가 데이터 보안, 무결성 유지, 병행 제어, 회복을 하기 위해 DBA가 사용하는 제어용 언어\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r유형 | 동작 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rGRANT | 사용권한부여 | 관리자(DBA)가 사용자에게 데이터베이스에 대한 권한을 부여하는 명령어\rREVOKE | 사용권한취소 | 관리자(DBA)가 사용자에게 부여했던 권한을 취소하는 명령어\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rGRANT [권한] ON [TABLE] TO [사용자] [WITH 권한 옵션];\rREVOKE [권한] ON [TABLE] TO FROM 사용자 [CASCADE];\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rGRANT 명령문으로 부여할 수 있는 권한의 유형\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구분 | 명령어 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r시스템권한 | CREATE USER | 계정을 생성할 수 있는 권한\r| DROP USER | 계정을 삭제할 수 있는 권한\r| DROP ANY TABLE | 테이블을 삭제할 수 있는 권한\r| CREATE SESSION | 데이터베이스를 접속할 수 있는 권한\r| CREATE TABLE | 테이블을 생성할 수 있는 권한\r| CREATE VIES | 뷰를 생성할 수 있는 권한\r| CREATE SEQUENCE | 시퀸스를 생성할 수 있는 권한\r| CREATE PROCEDURE | 함수를 생성할 수 있는 권한\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 객체권한 | ALTER | 데이터를 조작할 수 있는 권한\r| INSERT |\r| DELETE |\r| SELECET |\r| UPDATE |\r| EXECUTE | PROCEDURE 실행 권한\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#윈도우 함수 (Window Fuction)\r- 행과 행 간의 관계를 쉽게 정의하기 위해 만든 함수\r- 데이터베이스를 사용한 온라인 분석 처리 용도로 사용하기 위해서 SQL에 추가된 기능으로 OLAP(Online Analytical Processing) 함수라고도 한다\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구분 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rSELECT 함수명 ( 파라미터) | PARTITION BY를 통해 구분된 레코드 집합을 윈도우 라고함\rOVER | 윈도우 함수에는 OVER 문구가 필수적으로 포함\r([PARTITION BY 컴럼1, ...]) | ORDER BY 뒤에는 SORT 칼럼을 입력\r[ORDER BY 컬럼A, ...]\rFROM 테이블 명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r윈도우 함수의 문류\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r분류 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r집계함수 | 여러 행 또는 테이블 전체 행으로 하나의 결괏값을 반환하는 함수 (대다수 DBMS에서 지원)\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r순위함수 | RANK | 레코드 순위를 계산 (동일 순위의 레코드 존재시 후순위로 넘어감 1위, 1위, 1위 -\u0026gt; 4위)\r| DENSE_RANKE | 레코드 순위를 계산 (동일 순위의 값이 존재하더라도 후순위로 넘어가지 않고 연속번호를 부여 1위, 1위, 2위, 3위) | ROW_NUMBER | 레코드 순위를 계산 (동일 순위의 값이 존재해도 이와 무관하계 연속 번호를 부여 1위, 2위, 3위, 4위)\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 행순서 함수 | FIRST_VALUE | 파티션별 윈도우에서 가장 먼저 나오는 값을 찾음(집계함수 MIN과 동일)\r(SL Server 지원 X) | LAST_VALUE | 파티션별 윈도우에서 가장 늦게 나오는 값을 찾음(집계함수 MAX과 옹일)\r| LAG | 파티션 별 윈도우에서 1부터 이전 몇 번쨰 행의 값을 가져옴\r| LEAD | 파티션 별 윈도우세어 1부터 이후 몇 번쨰 행의 값을 가져옴\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r그룹 내 비율 함수 | RATIO_TOREPORT, PERCENT_RANK 등의 그룹 내 비율 함수가 있음\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#그룹함수 (Group Function)\r- 소그룹 간의 소계 및 중계 등의 준간 합계 분석 데이터를 산출하는 함수\r- 소계 및 총계 등을 구하기 위해서 그룹 함수를 사용한다면 단일 DML만으로도 원하는 작업을 할 수 있다.\r- 그룹함수의 유형에는 ROLLUP, CUBE, GROUPING SETS이 있다.\r#ROLLUP (소그룹간 소계 출력)\r- ROLLUP에 의해 지정된 컬럼은 소계 등 준간 집계 값을 산출하기 위해 사용\r- 지정 컬럼의 수보다 하나 더 큰 레벨만큼의 중간 집계 값이 생성\r- ROULLUP의 지정 칼럼은 계층별로 구성되기 때문에 순서가 바뀌면 수행결과가 바뀌어 유의해서 사용해야 함\r#CUBE (GROUP BY 항목들과 다차원 소계 출력)\r- CUBE는 결합 가능한 모든 값들에 대해 다차원 집계를ㅗ드 생성하는 그룹 함수, 가능한 한 소 집계만을 생성하는 ROLLUP과 구분되어짐\r- CUBE는 이중으로 쿼리를 수행 (연산이 많아 시스템에 부담을 줌)\r#GROUPING SETS(특정항목에 대한 소계 출력)\r- 집계 대상 컬럼들에 대한 개별 집계를 구할 수 있으며, ROULLUP이나 큐브와는 달리 컬럼 간 순서와 무관한 결과를 얻을 수 있음\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구문 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rSELECT 컬럼 몇1, ...., 그룹 함수\rFROM [TABLE]\r[WHERE 조건]\rGROUP BY [컬럼 명1, ...]\r[ROLLUP | CUBE | GROUPING SETS]\r[HAVING ...]\r[ORDER BY ...]\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#WHERE 조건\r- WHERE 조건 절에는 '비교, 범위, 집합, 패턴, NULL, 복합 조건' 등을 다룸\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구분 | 연산자 | 사례\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r비교 | =, \u0026lt;\u0026gt;, \u0026lt;, \u0026lt;=, \u0026gt;, \u0026gt;= | PRICE \u0026lt; 50000 = 가격 50000미만 (\u0026lt;\u0026gt;은 다름을 의미)\r범위 | BETWEEN | PRICE BETWEEN 500000 AND 800000 = 가격이 50000보다 크거나 같고 80000보다 작거나 같음\r집합 | IN, NOT IN | PRICE IN (40000, 50000, 60000) = 가격이 40000 또는 50000 또는 60000을 의미\r패턴 | LIKE | NAME LIKE '정보%' = 이름이 정보로 시작되는 문자열\r| LIKE는 +(문자열 합치기), %(0개 이상의 문자열과 일치), [](1개 문자열 일치), [^](1개의 문자열 불일치), _(특정 위치의 1개의 문자와 일치) 와 같은 와일드 문자와 함께 사용된다.\rNULL | IS NULL IS NOT NULL | PRICE IS NULL = 가격이 NULL 값인 경우\r복합조건 | AND, OR, NOT | (PRICE \u0026lt;50000) AND (NAME LIKE '정보%') = 가격이 50000 미만이고 이름이 '정보'로 시작되는 문자열\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#뷰 (View)\r- 뷰는 논리 테이블로 사용자에게 (생성 관점 아닌 사용 관점에서의) 테이블과 동일하다\r- 뷰는 하나의 물리 테이블로부터 생성이 가능하며, 다수의 테이블 또는 다른 뷰를 이용해 만들 수 있다. - 뷰와 같은 결과를 만들기 위해 조인 기능을 활용할 수 있으나, 뷰가 만들어져 있다면, 사용자는 조인 없이 하나의 테이블을 대상으로하는 하나의 단순한 질의어를 사용할 수 있다.\r- 뷰는 기본 테이블로부터 유도된 테이블로 기본 테이블과 같은 형태의 구조를 이룬다.\r- 뷰는 가상 테이블로 물리적으로 구현되어 있지 않다.\r- 데이터의 논리적 독립성을 제공할 수 있다.\r- 관리가 용이하고 명령문이 간단해진다.\r- 데이터를 안전하게 보호하는 효율적인 기법이다.\r- 뷰의 주된 이유는 단순 질의어를 사용할 수 있기 때문이다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구분 | 장/ 단점 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r장점 | 논리적 독립성 제공 | 뷰는 논리 테이블(테이블의 구조가 변경되어도 뷰를 사용하는 응용프로그램은 변경하지 않아도 됨)\r| 사용자 데이터 관리가 용이 | 복수 테이블에 존재하는 여러 종류의 데이터에 대해 단순한 질의어 사용이 가능\r| 데이터 보안이 용이 | 중요 보안 데이터를 저장 중인 테이블에는 접근 불허, 해당 테이블에 일부 정보만을 볼 수 있는 뷰에는 접근을 허용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r단점 | 뷰 자체 인덱스 증가 | 인덱스는 물리적으로 저장된 데이터를 대상으로 하기에 논리적 구성인 뷰 자체는 인덱스를 가지지 못함\r| 뷰 정의 변경 불가능하다 | 뷰의 정의를 변경하려면 뷰를 삭제하고 재생성\r| 데이터 변경 제약 존재시 | 뷰의 내용에 대한 삽입, 삭제, 변경에 제약이 있음\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rCREATE VIEW [뷰 이름] AS SELECET [컬럼1, 컬럼2 ...] FROM [TABLE];\rDROP VIEW [뷰이름];\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#인덱스 (Index)\r- 인덱스는 데이터를 빠르게 찾을 수 있는 수단으로서, 테이블에 대한 조회속도를 높여 주는 자료구조이다.\r- 인덱스는 테이블의 특정 레코드 위치를 알려 주는 용도로 사용된다.\r- 인덱스는 자동으로 생성되지 않는다.\r- 기본키(PK: Primary Key) 칼럼은 자동으로 인덱스가 생성된다.\r- 연원일이나 이름을 기준으로 하는 인덱스는 자동으로 생성되지 않는다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r유형 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r순서 인덱스 (Ordered Index) | 데이터가 정렬된 순서로 생성되는 인덱스, B-Tree 알고리즘 활용\r해시 인덱스 (Hash Index) | 해시 함수에 의해 직접 데이터에 키 값으로 접근하는 인덱스, 데이터 접근 비용이 균일\r비트맵 인덱스 (Bitmap Index) | 각 컬럼에 적은 개수 값이 저장된 경우 선택하는 인덱스, 수정 변경이 적을 경우 유용\r함수기반 인덱스(Functional Index) | 수식이나 함수를 적용하여 만든 인덱스\r단일 인덱스 (Singled Index) | 하나의 컬럼으롬나 구성된 인덱스, 주 사용 컬럼이 하나일 경우 사용\r결합 인덱스 (Concatenated Index) | 두 개 이상의 컬럼으로 구성한 인덱스, Where 조건으로 사용하는 빈도가 높은 경우 사용\r클러스터드 인덱스 (Clutered Index) | 기본 키(PK) 기준으로 레코드를 묶어서 저장하는 인덱스, 저장 데이터의 물리적 순서에 따라 인덱스 생성\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rCREATE [UNIQUE] INDEX [인덱스 명] ON TABLE(컬럼 명);\rDROP INDEX [인덱스 명];\rALTER [UNIQUE] INDEX [인덱스 명] ON 테이블 명 (컬렁 명);\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r파라미터 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r[UNIQUE] | 인덱스 걸린 칼럼에 증복 값을 허용하지 않음 (생략가능)\r인덱스명 | 생성하고자 하는 인덱스 테이블 명\r테이블 명 | 인덱스 대상 테이블 명\r컬럼 명 | 테이블의 특정 컬럼 명(복수 컬럼 지정 가능)\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r인덱스 스캔\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구분 | 설명\r인덱스 범위 스캔 (Index Range Scan) | 인덱스 루트 블록에서 리프블록까지 수직적으로 탐색한 후에 리프 블록에 필요한 범위만을 스캔하는 방식\r인덱스 단일 스캔 (Index Unique Scan) | 수직적 탐색만으로 데이터를 찾는 스캔 방식\r인덱스 전체 스캔 (Index Full Scan) | 수직적 탐색 없이 인덱스 리프 블록을 처음부터 끝까지 수평적으로 탐색하는 방식\r인덱스 생략 스캔 (Index Skip Scan) | 선두 컬럼이 조건 절에 빠졌어도 인덱스를 활용하는 스캔방식\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#서브쿼리 (Sub-Query) 개념\r- 서브쿼리는 같은 SQL문 안에 포함된 또 다른 SQL문을 의미한다.\r- 서브쿼리의 용도는 알려지지 않은 기준을 위한 검색을 위해 사용한다.\r- 메인쿼리와 서브쿼리의 관계는 주종 관계로서, 서브 쿼리에 사용되는 컬럼 정보는 메인쿼리의 컬럼 정보를 사용할 수 있으나 역으로는 성립하지 않는다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r서브쿼리 유형 | 서브쿼리 종류 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r동적방식 기준 | 비연관 서브쿼리 (Un-Correlated Sub-Query) | 서브쿼리가 메인쿼리의 컬럼을 가지고 있지 않은 형태, 메인 쿼리에 서브쿼리에서 실행된 결과를 제공하는 용도로 사용\r| 연관 서브 쿼리 (Correlated Sub-Query) | 서브쿼리가 메인쿼리의 컬럼을 자기오 있는 형태, 메인쿼리가 먼저 수행되어 얻은 데이터를 조건에 맞는지 확인하는 용도로 사용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r데이터형태 기준 | 단일행 서브쿼리 (Single Rog) | 결과가 항상 1건 이하인 서브쿼리, 단일 행 비교 연산자 (=, \u0026lt;, \u0026lt;=, \u0026gt;, \u0026gt;=, \u0026lt;\u0026gt;) 사용\r| 다중행 서브쿼리 (Multiple Row) | 실행 결과 여러 건인 서브쿼리, 다중 행 비교 연산자 (In, All, Any, Some, Exists) 사용\r| 다중 컬럼 서브쿼리 (Multiple Column) | 결과가 여러 컬럼으로 반환되는 서브쿼리, 메인쿼리의 조건절에 여러 칼럼을 동시에 비교할 때 사용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#집합 연산자 (Set Operator)\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r집합 연산자 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rUnion | 증복 행이 제거된 쿼리 결과를 집합 = 합집합\rUnion All | 증복 행이 제거되지 않은 쿼리 결과 집합 Intersection | 두 쿼리 결과에 공톡적으로 존재하는 집합 = 교집합\rMinus | 첫 쿼리에 있고 두 번째 쿼리에는 없는 집합 = 차집합 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#조인 (Join)\r- 조인은 결합을 의미하며, 관계형 데이터베이스에서의 조인은 교집합과 결과를 가지는 결합 방식을 의미\r- 두 릴레이션으로부터 관련된 튜플들을 결합하여 하나의 튜플로 만드는 가장 대표적인 데이터 연결 방법을 의미\r- 조인은 관계형 데이터베이스의 가장 큰 장점이면서 대표적인 핵심 기능이며, 논리적 조인과 물리적 조인으로 구분할 수 있다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r분류 | 설명 | 구분 | 조인 유형 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 논리적 조인 | 사용자 SQL문에 표현되는 테이블 결합 방식 | 내부조인 (Inner Join) | 동등조인 (Equi Join) | 공통 존재 컬럼의 값이 같은 경우를 추출\r| 자연 조인 (Natural Join) | 두 테이블의 모든 컬럼을 비교하여 같은 컬럼 명을 가진 값이 같은 경우를 추출\r| 교차 조인 (Cross Join) | 조인 조건이 없는 모든 데이터 조합을 추출\r| 외부조인 (Outer Join) | 왼쪽 외부 조인 (Left Outer Join) | 왼쪽 테이블의 모든 데이터와 오른쪽 테이블의 동일 데이터를 추출\r| 오른쪽 외부 조인 (Right Outer Join) | 왼쪽 테이블의 모든 데이터와 오른쪽 테이블의 동일 데이터를 추출\r| 완전 외부 조인 (Full Outer Join) | 양쪽의 모든 데이터 조회\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r물리적 조인 | 옵티마이저에 의해 내부적으로 테이블을 결합하는 방식 | 중첩 반복 조인 (Nested-Loop Join) | 2개 이상의 테이블에서 하나의 집합을 기준으로 순차적으로 상대방의 Row를 결합하여 원하는 결과를 조합하는 방식\r| 좁은 범위에 유리하며, 순차적으로 처리, 임의 접근 (Random Access) 위주이다.\r| 정렬 합병 조인 (Sort_Merge Join) | 조인의 대상 범위가 넓은 경우 발생하는 임의 접근 (Random Access)을 줄이기 위한 방안이다. (Random Access X)\r| 양쪽 테이블에 정령할 결과를 차례로 검색하면서 연결고리 형태로 합병하는 방식이다.\r| 해시 조인 (Hash Join) | 해싱 함수기법을 활용하여 조인을 수행하는 방식이다. (비용기반 옵티마이저에서만 사용, CPU성능에 의존적)\r| 대용량 처리의 선결조건인 랜덤 엑세스르 해결할 수 있으며, 해시 테이블 생성 후 순차적으로 처리한다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #오류 처리 (Error Handling)\r- 프로그램 코드상의 오류나 프로시저 실행 시 예외나 에러가 발생했을 떄, 문제를 해결하고 의미 있는 에러 메시지를 부여하는 과정\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rDECLARE [1] HANDLER\rFOR [2] [3];\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구문 요소 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r[1]: 액션 | 해당 오류 발생시 핸들러 처리 방법 (COUNTINUE = 계속 실행, EXIT = 한번 실행)\r[2]: 상태 값 | 핸드러가 수행되기 위한 에러코드\r| SQLWARNING : 에러가 아닌 경고가 발생\r| NOTFOUND : 다음 레코드를 가져오지 못했을 때\r| SQLEXCEPTION : 에러가 발생\r[3]: 명령문 | 핸들러가 호출될 때 실행되는 명령\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#주석처리\r- DB의 주석 처리\r주석 처리\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r주석 기호 | 설명\r-- | '--'이 시작하는 위치부터 해당 라인 끝까지 실행이 되지 않도록 함\r/* 문장 */ | '/*' 부터 '*/\u0026quot; 까지 모든 라인이 실해이 되지 않도록 함\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#힌트 사용\r- SQL 문에 사전에 정보를 주어, 실행에 빠른 결과를 가져오는 효과적인 문법, 주석에 '+' 기호를 붙이면 힌트로 인식\r힌트의 사용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r힌트 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r힌트 명(파라미터, ...) | '--+'이 시작되는 위치부터 힌트로 인식함\r/*+힌트 명 (파라미터, ...)*/ | '/*+' 이 시작되는 부분부터 '*/\u0026quot; 사이를 힌트로 인식함\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#트리거\r- 데이터베이스가 미리 정해 놓은 조건이나 특정 테이블의 데이터 변경의 이벤트가 발생하면 DBMS에서 자동적으로 실행되도록 구현된 프로그램\r트리거의 주 기능\r- 일반적으로 이벤트와 관련된 테이블의 작업을 DBMS가 자동적으로 실행시키는 데 활용\r- 데이터 무결성 유지 및 로그 메시지 출력 등을 위해도 사용\r- 데이터 제어어 ( DCL ) 사용이 불가능하다.\r트리거의 구성\u0026amp; 구문\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구성요소 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rDECLARE | 트리거의 명칭, 변수와 인수 그리고 그에 대한 데이터 타입을 정의하는 선언부\rBEGIN/END | 트리거의 시작과 종료를 표현하는 데 필수적이며 BEGIN/END를 쌍을 이루어 추가하므로 Block으로 구성\r| 다수 실행을 제어하는 기본적 단위가 되며 논리적 프로세스를 구성\rCONTROL | 기본적으로 순차적으로 처리\r| 비교 조건에 따라 Block으로 또는 문장으로 구성\r| 조건에 따라 반복 실행 (Loop)\rSQL | DML (SELECET, INSERT, UPDATE, DELETE)를 주로 사용\rEXCEPTION | BEGIN~END 절에서 실행되는 SQL문이 실행될 떄 예외 발생 시 예외 처리방법을 정의하는 처리부\rTRANSACTION | 트리거에서 수행된 DML 수행 내역의 DBMS의 적용 또는 취소 여부를 결정하는 처리부\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rCREATE [ OR REPLACE ] TRIGGER [1] [1] 트리거명: 트리거를 호출 할 때 사용할 이름\r[AFTER | BEFORE] [2] ON [3] [AFTER | BEFORE] 조건 문장이 실행되거 후에 트리거 내용 실행 | 조건 문장이 실행되거 전에 트리거 내용 실행\r[FOR EACH ROW] [2] 트랜잭션의 타입: DML 의 타입\rBEGIN [3] 테이블 명\r[실행할 SQL문;]\r[EXCEPTION]\r...\rEND;\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r트리거의 구현 및 실행 방법\r인식이 가능한 이벤트의 정의 -\u0026gt; 대상 이벤트와 관련된 테이블 및 데이터 확인 -\u0026gt; 기존 테이블 및 데이터 간의 관계 분석 -\u0026gt; 트리거의 기능 설계 -\u0026gt; 트리거 작성 -\u0026gt; 트리거 컴파일 -\u0026gt; 이벤트 발생 -\u0026gt; 트기러 자동 실행\r#이벤트\r- 특정 시간에 특정한 쿼리, 프로시저, 함수 등을 실행시키는 기능\r이벤트 구문\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rCREATE EVENT [IF NOT EXISTS] [1] [1] 이벤트명: 이벤트를 호출 할 때 사용할 이름\rON SCHEDULE [2] [2] 스케줄 이벤트의 실행시간과 간격을 지정\r[ON COMPLETION [NOT] PRESERVE]\r[ENABLE | DSABLE]\r[COMMENT '주석']\rDO\r[BEGIN]\r[실행할 SQL문;]\r[END]\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#사용자정의 함수\r- 절차형 SQL을 활용하여 일련의 연산 처리 결과를 단일 값으로 반환할 수 있는 함수\r- DBMS에서 정의한 공통 된 함수가 아닌 사용자가 직접 정의한 함수\r- 사용자 정의 함수는 프로시저와 동일하게 외부에서의 호출을 통해 실행된다.\r- 시스템에 정보 제공 등 은닉을 통해 캡슐화를 통해 제공하는 데에도 사용\r- 개념, 문법, 사용법은 프로시저와 동일하지만, 종료 시 단일 값을 반환한다는 점에서 차이점이 있다.\r사용자정의 함수 구문\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rCREATE [OR REPLACE] FUNCTION [1] ( [2] ) [1] 사용자정의 함수명: 사용자 정의 함수의 이름\rIS [3] [2] 사용자 정의 함수 파라미터: 함수에 필요한 값들을 전달하기 위한 파라미터 사용\rBEGIN [3] 지역변수 선언: 해당 사용자 정의함수에서만 사용하는 변수 선언\r...\rRETURN [VALUE];\rEND\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#데이터사전 (Data Dictonay)\r- 데이터 사전에는 데이터베이스의 데이터를 제외한 모든 정보가 존재\r- 데이터 사전의 내용을 변경하는 권한은 시스템이 가지며, 사용자에게는 읽기 전용 테이블 형태로 제공되므로 단순 조회만 가능\r- 데이터 사전은 데이터의 데이터를 의미하는 메타데이터(Metadata)로 구성됨\r- 데이터 사전으로 조회할 수 있는 내용은 사용자 정보, 데이터배이스 객체 정보, 무결성 제약 정보, 함수, 프로시저 및 트리거가 있다.\r#시스템 카탈로그\r- 시스템에 관련이 있는 객체에 관한 정보를 포함하는 시스템 데이터베이스\r- DDL 실행으로 생성되는 테이블, 뷰, 인덱스, 패키지, 접근 권한 등의 데이터베이스 구조 및 통계 정보를 저장한다.\r- 시스템 카탈로그는 데이터사전 (Data Dictonary)이라고도 부른다.\r- 저장된 데이터를 메타데이터라 부른다.\r- SQL을 이용하여 내용검색이 가능하다.\r- 갱신이 허용되지 않는다. (DBMS가 스스로 생성하고 유지)\r- 사용자가 SQL문을 실행시켜 기본 테이블, 뷰, 인덱스 등의 변화르르 주면 시스템이 자동으로 갱신된다.\r- 보통의 릴레이션, 인덱스, 사용자 등에 정보를 포함할 뿐 아니라 위치 투명성 및 증복 투명성을 제공하기 위해 필요한 모든 정보를 포함한다.\r#분산 데이터 베이스 (Distributed Database)\r- 네트워크의 활용을 통해 단일한 데이터베이스 관리 시스템으로 제어되고 논리적으로 집중되어 있으나 물리적으로 분산되어 있는 형태이다.\r분산 데이터 베이스의 구성\r전역 스키마 -\u0026gt; 분할 스키마 -\u0026gt; 할당 스키마 -\u0026gt; 각 지역 스키마 -\u0026gt; 각 지역 DBMS\r분산 데이터 베이스의 장점 및 단점\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r장점 | 분산 제어가 용이\r| 지역 자치성이 높음\r| 효용성과 융통성이 높음\r| 데이터베이스 복제 및 분산을 통해 사용자 측면에서는 향상된 성능을 제공\r| 장애로 인한 데이터 유실 복구에도 효과적\r| 시스템 확장이 용이\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r단점 | 복잡성이 증가\r| 성능 저하\r| 개발 비용의 증가\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#분산 데이터베이스 구성\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구성 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r전역 스키마 | 데이터베이스가 마치 분산되어 있지 않은 것처럼 분산 데이터베이스에 포함된 모든 데이터를 정의\r분할 스키마 | 분산을 위해 단편화된 구성에 대한 정의 (일대 다 관계)\r할당 스키마 | 단편들의 위치 정보를 정의, 유형에 따라 중복 또는 비중복인지가 결정됨\r지역 스키마 | 물리적 이미지를 해당 지역 DBMS가 관리할 수 있도록 저장하기 위해 변환\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#분산 데이터베이스의 투명성\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r투명성 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r위치 투명성 | 사용자나 응용 프로그램이 접근할 데이터의 물리적 위치를 알아야 할 필요가 없음\r복제 투명성 | 사용자나 응용 프로그램이 접근할 데이터가 물리적으로 여러 곳에 복제되어 있는지를 알 필요가 없음을 의미\r병행 투명성 | 여러 사용자나 응용 프로그램이 동시에 분산 데이터베이스에 대한 트랜잭션을 수행하는 경우에도 결과에 이상이 발생하지 않는 성질\r분할 투명성 | 사용자가 하나의 논리적인 릴레이션이 여러 단편으로 분할되어 각 단편의 사본이 여러 장소에 저장되어 있음을 알 필요가 없는 성질\r장애 투명성 | 데이터베이스가 분산되어 있는 각 지역의 시스템이나 통신망에 이상이 생기더라도, 데이터의 무결성을 보존할 수 있는 성질, 2PC (Phase Commit) 활용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#데이터베이스 이중화\r- 물리적으로 떨어져 있는 여러 개의 데이터베이스에 대하여 로컬 데이터베이스의 변경된 내용을 원겨 데이터베이스의 변경된 내용을 원격데이터베이스에 복제하고 관리하는 기술\r- 데이터베이스의 무정지 서비스를 가능하게 한다\r- 사용자는 하나의 데이터베이스에 대해서만 작업을 수행한다.\r- 데이터베이스 이중화시스템에 연결되어 있는 다른 데이터베이스에도 작업 내용이 동일하게 적용된다.\r- 여러 개의 데이터베이스를 동시에 관리한다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r형태 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r액티브-액티브 (Active-Active) | 여러 노드가 동시에 가동되는 형태, 두 노드가 동시에 동작하므로 성능이 좋음\r액티브-스탠바이 (Active-Standby) | 하나의 노드만 가동, 나머지 노드들은 대기형태\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #스토리지 (Storage)\r- 데이터를 보존하고 가능한 한 간편하게 엑세스할 수 있도록 개발된 기술을 사용하여 정보를 보존하는 저장장치를 의미한다.\r스토리지 구성\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r스토리지 구성 | 특징 | 장점 | 단점\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rDAS (Direct Attached Storage) | 데이터 서버와 외장형 저장장치를 전용 케이블로 직접 접속하는 방법 | 전용라인의 사용으로 주어진 성능이 보장 및 안정성이 높음 | 저장장치에 따른 접속방법이 상이하여 저장장치 공유에 문제\rNAS (Network Attached Storage) | LAN을 통해 스토리지와 서버를 접속하여 파일시스템을 공유한다 | 데이터 저장 장치와 서버간의 독립성을 유지한다. | 데이터 접근 요청에 의한 파일서버의 병목현상 및 서버종료 문제\rSAN (Storage Area Network) | 서버가 광섬유 채널(Fiber Channel)를 통하여 스토리지를 연결 | DAS의 접속한계성을 극복하여, n개의 서버가 m개의 저장장치 접속 가능 | 다른 기종의 서버환경이 지원되지 않고 공유환경에 제한이 있음\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#데이터 베이스의 암호화\r- 데이터베이스에 저장된 데이터를 읽기 어려운 값으로 변환하여 권한이 없는 제 3자가 볼 수 없도록 저장하는 기술\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r유형 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r응용 프로그램 자체 암호화 | 암, 복호화 모듈이 API 라이브러리 형태로 각 애플리케이션 서버에 설치되고, 응용프로그램에서 해당 암, 복호화 모듈을 호출하는 방식\rDB 서버 암호화 | 암, 복호화 모듈이 DB서버에 설치되고 DB 서버에서 암, 복호화 모듈을 호출하는 방식\rDBMS 자체 암호화 | DB 서버의 DBMS 커널이 자체적으로 암, 복호화 기능을 수행하는 방식\rDBMS 암호화 기능 호출 | 응용 프로그램에서 DB 서버의 DBMS 커널이 제공하는 암, 복호화 API를 호출하는 방식\r운영체제 암호화 | OS에서 발생하는 물리적인 입출력을 이용한 암, 복호화 방식으로 DBMS의 데이터 파일을 암호화하는 방식\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r암호화 적용방식\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구분 | 방식 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r컬럼 암호화 | API | 암, 복호화 모듈을 애플리케이션 서버 내에 설치하고 이곳에서 암, 복호화를 수행하는 구조\r| 플러그인 (Plug-In) | 암, 복호화 모듈을 DB 서버 내에 설치하고 이곳에서 암, 복호화를 수행하는 구조\r| 하이브리드 (Hybrid) | 플러그 인 방식의 단점인 배치 업무의 성능 저하를 보완하기 위해 API 방식을 이용하는 구성\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r블록 암호화 | TDE 방식 | DBMS에 추가 기능으로 제공되는 암호화 기능을 이용하여 DB 내부에서 데이터 파일 저장 시 암호화하고, 파일에 저장된 내용을 메모리 영역으로 가져올 떄 DBMS에 의해 자동으로 복호화\r| 파일 암호화 방식 | 파일 암호화 방식은 OS 상에서 확인이 가능한 개체인 파일을 암호화하는 방식\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#접근제어 (Access Control)\r- 불법적인 데이터의 접근으로부터 데이터베이스를 보호하는 기법\r- 데이터베이스는 가장 내부에 위차하고, DBMS 자체는 강력한 보안기능을 제공하기 때문에 접근 권한을 가진 사용자가 권한을 남용하여 유출하거나 변조가 가장 큰 위험이다.\r접근제어 구성요소\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r구성요소를 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r접근제어 정책 | 자원에 접근하는 사용자의 접근 모드 및 모든 접근 제한 조건 정의\r접근제어 메커니즘 | 시도된 접근 요청을 정의된 규칙에 대응시켜 검사함으로써 불법적 접근 방어\r젭근제어 보안 모델 | 시스템의 보안 요구를 나타내는 요구 명세로부터 출발하여 정확하고 간결한 기능적 모델 표현\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r신원기반 (Identity-based) 접근제어 정책\r- 주제나 또는 그들이 속해있는 그룹들의 신분에 근거하여 객체에 대한 접근을 제한하는 방법\r신원기반 접근제어 정책 (DAC)\u0026amp; 규칙기반 접근제어 정책 (MAC)\u0026amp; 역한 기반 접근 제어 정책 (RBAC)\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r정책 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rIBP (Individual-Based Poliy) | 단일 사용자나 하나의 객체에 대해 허가를 부여받아 사용하는 정책\rGBP (Group-Based Poliy) | 복수 사용자가 하나의 객체에 대하여 같은 허가를 함께 부여받아 사용하는 정책\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rMLP (Multi-Level Poliy) | 사용자 및 객체가 각각 부여된 기밀 분류에 따른 정책\rCBP (Compartment-Based Policy) | 조직 내 특정 집단별로 구분된 기밀 허가에 따른 정책\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rRBAC (Role Based Access Control) | 중앙관리자가 주체와 객체의 상호관계를 제어하며 조직 내에서 맡은 역할에 기초하여 자원에 대한 접근 허용 여부를 결정\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r접근제어 메커니즘\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r메커니즘 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\rACL (Access Control List) | 주체가 디렉토리나 파일과 같은 특정 시스템 객체에 접근 할 수 있는 허가 받은 접근 종류들이 기록된 목록\rCL (Capability List) | 주체에게 허가된 자원 및 권한의 목록\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r접근제어 보안모델\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r모델 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r접근제어행렬 | 임의적 제어를 관리하기 위한 보안 모델, 행은 주체, 열은 객체로 표시하며 행과 열은 주체 및 객체의 권한 유형을 표시\r기밀성 모델 | 기밀성(Confidentaiality)에 중점을 둔 수학적인 모델, 대표적으로 벨라파듈라 모델이 존재\r무결성 모델 | 정보 비밀성을 위해 정보의 일방향 흐름 제어를 활용하는 경우 발생, 대표적으로 비바 모델과, 클락윌슨 모델이 존재\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#파티셔닝 (Partitioning)\r- 대용량의 테이블을 파티션이라는 보다 작은 논리적인 단위로 나눔으로써 성능 저하 방지 및 관리를 상대적으로 보다 용이하게 하고자 하는 개념\r- 물리적 파티셔닝으로 인해 전체 데이터 훼손 가능성이 줄어들고 데이터 가용성이 향상\r- 데이터베이스를 작은 단위로 관리하여 편리\r- 부하를 가각 파티션들로 분산시켜 성능을 향상시킨다.\r파티셔닝 유형\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r유형 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r레인지 파티셔닝 (Range Partitioning) | 분할 키 값이 범위 내에 있는지 여부로 구분하는 파티셔닝 기법\r해시 파티셔닝 (Hash Partitioning) | 해시 함수의 값에 따라 파티션에 포함할지 여부를 결정하는 파티셔닝 기법\r리스트 파티셔닝 (List Partitioning) | 값 목록에 파티션을 할당하고 분할 키 값을 그 목록에 비추어 파티션을 선택하는 기법\r컴포지트 파티셔닝 (Composite Partitioning) | 레인지 파티셔닝, 해시 파티셔닝, 리스트 파티셔닝 2개 이상의 파티셔닝을 결합하는 파티션 기법\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#클러스터링\r- 지정된 칼럼 값의 순서대로 데이터 행을 저장하는 방법\r- 하나 또는 그 이상의 테이블을 갖은 클러스터 내 저장이 가능하다\r- 액세스 효율 향상을 위한 물리적 저장 방법으로, 검색 효율은 높여주나 입력, 수정, 삭제 시 부하가 증가할 수 있다.\r- 분포도가 넓을수록 오히려 유리하고, 분포도가 넓은 테이블의 클러스터링은 저장 공간의 절약이 가능하다. (분포도가 넓다=분포도가 안 좋다.)\r클러스터링의 유형\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r유형 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r단일 클러스터링 | 클러스터에 하나의 테이블만 생성, 같은 클러스터 컬럽 값을 가진 로우는 같은 장소에 저장되므로 넓은 범위의 데이터를 동시에 엑세스 할 때 효과적\r다중 클러스터링 | 단일 클러스터에 두 개 이상의 테이블을 함께 저장, 같은 클러스터 키 컬럼을 가진 각 테이블의 로우는 정해진 장소에 같이 저장되므로 테이블 조인 속도를 향상\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r클러스터링 고려사항\r- 대량의 범위를 자주 액세스하는 경우\r- 인덱스를 사용한 처리 부담이 되는 넓은 분포도\r- 여러 개의 테이블이 자주 조인을 일으킬 때\r- 반복 컬럼이 정규화에 의해 어쩔 수 없이 분할된 경우\r- UNION, DISTINCT, ORDER BY, GROUP BY가 번번한 컬럼이면 고려\r- 수정이 자주 발생하지 않는 컬럼\r#데이터 백업 (Database Backup)\r- 데이터가 손상되거나 손실될 경우 피해를 최소화하기 위해 현재의 데이터를 저장하는 기법\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r종류 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r전체 백업 (Full Backup) | 전체 백업은 데이터의 변경 유무에 관여하지 않고 전체 데이터의 복사본을 만드는 백업 방식\r차분 백업 (Differential Backup) | 마지막 전체 백업 이후 변경된 모든 데이터를 백업하는 방식\r트랜잭션 로그 백업 (Transaction Log Backup) | 실제 데이터 파일의 내용을 백업하는 것이 아니라 로그 파일에 기록된 로그를 백업\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r데이터 저장 사이징(Sizing)의 필요성\r- 정확한 데이터 용량을 예측하여 저장 공간을 효과적으로 사용하고 확장성을 보장하여 가용성을 높이기 위해 사용한다.\r- 하드웨어 특성을 고려한 용량설계를 통해 디스크 채널 병목 현상을 최소화 할 수 있다.\r- 용량설계를 통해 테이블 및 인덱스 별로 적합한 저장 옵션을 지정할 수 있다.\r#데이터 지역화 (Data Locality)\r- 데이터베이스의 저장 데이터를 효율적으로 이용할 수 있또록 저장하는 방법\r- 필요한 위치에 가까운 데이터를 배치하는 것을 의미\r- 프로그램은 모든 코ㅡ나 데이터를 균등하게 접근하지 않는다는 특성을 기본으로 하나.\r데이터 지역화의 종류\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r종류 | 설명 | 활용\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r시간적 (Temporal)지역화 | 최근에 참조된 기억장소가 가까운 장래에 계속 참조될 가능성이 높은 특성 | for나 while 같은 반복문에 사용하는 조건 변수\r공간적 (Spacial)지역화 | 최근에 참조된 기억장소와 가까운 기억정보가 가까운 장래에 계속 참조될 가능성이 높은 특성 | A[0], A[1]과 같은 데이터 배열에 연속 접근\r순차적 (Sequential)지역화 | 별도의 분기(branch)가 없는 한 데이터가 기억장치에 저장된 순서대로 순차적으로 인출되고 실행될 가능성의 특성 | 1:1, 1:N, N:M 관계 존재 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r데이터 지역화 활용기법\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r종류 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r기억장치 계층구조 (Hierarchy) | CPU-\u0026gt; 캐시 메모리-\u0026gt; 메인 메모리 순으로 접근시간(Access Time)을 효과적으로 단축\r캐시 접근시간 (Cache Access TIme) 단축 | 캐시 적중률(Cache Hit Ration)의 극대화 기능\r작업세트(Working Set) | 하나의 페이지가 자주 접근하는 페이지들의 집합, 페이지 폴트를 줄임\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r#물리 데이터 모델 품질 기준\r- 물리적 데이터 모델은 시스템 성능에 대해 직접적인 영향을 미치기 때문에 성능 문제를 사전에 검토하여 최소회하는 노력이 절대적으로 필요하다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r기준 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r정확성 | 데이터 모델이 표기법에 따라 정확하게 표현되었고, 업무 영역 또는 요구사항이 정확하게 반영해야 함\r완전성 | 데이터 모델의 구성요소를 정의하는 데 있어서 누락을 최소화시키고, 요구사항 및 업무영역 반영에 있어서 누락이 없어야 함\r준거성 | 제반 준수 요건들이 누락 없이 정확하게 준수해야 함\r최신성 | 데이터 모델이 현행 시스템의 최신 상태를 반영하고 있고, 이슈사항들이 지체 없이 반영해야 함\r일관성 | 여러 영역에서 공통 사용되는 데이터 요소가 전사 수준에서 한 번만 정의되고 이를 여러 다른 영역에서 참조, 화룡되면서, 모델 표현상의 일관성을 유지해야 함\r활용성 | 작성된 모델과 그 설명 내용이 이해관계자에게 의미를 충분하게 전달할 수 있으면서, 어붐 변환 시에 설계 변경이 최소화되도록 유연하게 설계해야 함.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 물리 E-R 다이어그램\r- 엔터티와 테이블의 물리 데이터를 모델로 변환시키는 것, 논리 데이터 모델에서 물리 데이터 모델로 변환되면서 각 구성들에 대한 명칭이 변경된다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r논리적 설계 | 물리적 설계 | 데이터 베이스\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 엔터티 | 테이블 | 테이블\r속성 | 컬럼 | 컬럼\r주 식별자 | 기본 키 | 기본 키\r외래 식별자 | 외래 키 | 외래 키\r관계 | 관계 관계의 카디널리티 | 관계의 카디널리티\r관계의 참여도 | 관계의 참여도\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 관계 변환\r- 데이터베이스를 이용하는 프로그래밍의 수행 속도 향상을 위해 추가되는 테이블이나 컬럼으로 관리가 가능하다.\r- 컬럼 데이터 형식 설정의 오류가 자주 발생한다. ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r케이스 | 설명\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 1:1 변환 | 논리 데이터 모델에서 1:1관계는 일반적이지 않은 형태의 관계로 상대적으로 자주 사용하는 테이블에 외래키를 포함하는 것이 유리\r1:N 변환 | 논리 데이터 모델의 관계에서 가장 보편적인 형태의 관계이며, N 측의 관계 컬럼에 선택사양이 결정\rN:M 변환 | 관계별로 관계 컬럼을 생성하는 방법으로 실제 외래 키의 제약 조건이 생성 가능하고 체크 제약 조건의 추가적 생성이 필요한 외래키 분리\r| 관계들을 하나의 관계 컬럼으로 통합 생성하는 방법의 외래 키 결합이 있다.\r------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #CRUD분석 (Create, Read, Update, Delete)\r- 시스템 개발 시 프로세스와 데이터베이스에 저장되는 데이터 사이의 관계를 CRUD로 분석하는 기법\r- 주로 CRUD 매크릭스를 통해 관계를 표현한다.\rCRUD 매트릭스 부서\r "});index.add({'id':22,'href':'/docs/blog/study/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/4.-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4-%ED%99%9C%EC%9A%A9/','title':"4. 프로그래밍 언어 활용",'content':"ㅎㅇ\n"});index.add({'id':23,'href':'/docs/blog/study/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/5.-%EC%A0%95%EB%B3%B4%EC%84%B8%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/','title':"5. 정보세스템 구축관리",'content':"ㅎㅇ\n"});index.add({'id':24,'href':'/docs/blog/system/','title':"System",'content':"3rd Level of Menu Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r "});index.add({'id':25,'href':'/docs/','title':"Docs",'content':""});})();
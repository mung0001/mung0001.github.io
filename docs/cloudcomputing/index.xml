<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CloudComputing on 뭉게뭉게</title>
    <link>https://mung0001.github.io/docs/cloudcomputing/</link>
    <description>Recent content in CloudComputing on 뭉게뭉게</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    
	<atom:link href="https://mung0001.github.io/docs/cloudcomputing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS AutoScaling</title>
      <link>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/aws_as/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/aws_as/</guid>
      <description>Auto Scaling  Auto Scaling  EC2 인스턴스를 자동으로 시작하거나 종료하여 애플리케이션 로드를 처리하기에 적절한 수의 EC를 유지할 수 있도록 하는 서비스 사용자가 정의하는 조건에 따라 EC2 개수를 자동으로 확장 또는 축소가 가능 모니터링을 통해 비정상 인스턴스를 탐지하고 교체할 수 있음 수요가 급증할 경우 EC2 수를 자동으로 늘려 성능을 유지하고 수요가 적을 경우 수를 줄여 비용을 절감 ELB의 대상그룹을 Auto Scaling Group( ASG )에 포함시켜 자동생성된 EC2로 하여금 트래픽 부하분산을 하도록 설정가능 수요 변화가 예측 나응한 경우 예약된 일정을 통해 정해싲 시간에 늘리거나 줄이도록 설정이 가능 ASG 내 손상된 인스턴스가 발견될 경우, Auto Scaling은 이를 자동으로 종료하고 새로운 인스턴스로 교체  ELB를 사용하는 경우, ELB가 손상된 인스턴스를 트래픽 요청 대상에서 분리시킨 후, Auto Scaling이 이를 새로운 인스턴스로 교체   비정상 서버 탐지 후 Auto Scaling이 새로운 인스턴스를 In Service 상태를 만들기까지 5분 이내 소요   AWS Auto Scaling 그룹.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/test/</guid>
      <description>awscli awscli 는 AWS Command Line Interface 의 약어입니다. 설치하면 이후 s3 관련 작업을 terminal command 로 할 수 있습니다.
설치는 pip install 로 가능합니다. Python 2.6x 혹은 Python 2.7x 이상이 필요하였는데, 저는 Python 3.x 만 이용하므로 버전은 자세히 보지 않았습니다.
pip install awscli 설치 후 help 명령어를 입력하여 awscli 가 설치되었는지 확인도 해봅니다.
aws help aws cli 를 이용하기 전에 앞서 만든 AWS IAM 사용자를 추가해야 합니다. aws configure 를 실행시킵니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/%EB%B0%B0%ED%8F%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/%EB%B0%B0%ED%8F%AC/</guid>
      <description>배포 ( Deploy )    배포 ( Deploy )  무중단 배포  서비스를 배포시 ( 버전 업데이트 등 ) 서버를 중단하지 않고 배포( 업데이트 )를 진행하는 것   중단배포( Ice breaking )  서비스를 배포시 서버를 중단하고 배포를 진행하는 것 ( 서버 정기 정검 )   In-Place Deployment  In-Place Deployment... In-Place Deployment    한 개의 로드밸런서가 4개의 서버로 요청을 보내고 있으며, 현재 1.</description>
    </item>
    
    <item>
      <title>AWS 계정</title>
      <link>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/aws-%EA%B3%84%EC%A0%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/aws-%EA%B3%84%EC%A0%95/</guid>
      <description>AWS 계정    AWS의 계정   AWS 상에서 공유하는 리소스 관리단위 단일계정과 복수계정을 활요할 수 있으며, 비교 관점에 따라 각각 운용성과 보안의 장단점이 존재   단일 계정  단순함이 장점이며, 리소스가 집약되어 있기에 초보자가 사용하기 적합 단, 여러 개의 환경을 구축하거나 운용할 때는 문제가 발생, 운용 현장의 경우에는 개발 환경만 이용 가능하고, 작업 권한이 없는 사용자가 필요 AWS는 IAM을 사용해 사용자에게 권한을 제어하고 있지만, 서버 단위 권한을 부여해야 할 경우에는 비효율적   복수 계정  복수 계쩡의 장점은 환경 단위로 계정을 나눌 수 있다는 것으로, 개발용 계정과 운영용 계정을 따로 분리해서 각기 이용하는 사용자를 나눌 수 있음 운용 측면에서 매우 큰 장점이라 할 수 있음     AWS의 감사 추적    AWS의 감사 추적  감사추적이란 시스템의 작업 이력 및 상태를 감사자가 추적할 수 있는 기록 감사추적은 크게 AWS 자체의 작업 상태와 이력, AWS 내의 리소스로 나뉘어짐   AWS 자체의 작업 상태와 이력  AWS는 브라우저로 관리 콘솔 화면 또는 API를 이용해서 작업을 진행 AWS 자체 감사 추적의 기본은 AWS Config와 AWS CloudTrail Service가 있으며 이 두가지 서비스를 통해 AWS 서비스의 감사 추적 기록을 취득할 수 있음  Config  Config.</description>
    </item>
    
    <item>
      <title>AWS 요금</title>
      <link>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/aws%EC%9A%94%EA%B8%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/aws%EC%9A%94%EA%B8%88/</guid>
      <description>AWS 요금   AWS의 요금  AWS는 기본적으로 종량 요금제이지만 일부는 무료로 이용이 가능 요금 체계는 서비스 마다 다르지만, 원칙이 존재   AWS의 요금체계  AWS는 기본적으로 종량 요금제 ( 사용한 만큼 금액을 지불하는 방식 ) 종량 과금에는 시간 기준, 횟수 기준, 용량 기준의 3가지 종류가 있으며, 이 가운데 하나 혹은 조합의 이해 요금이 측정  EC2의 경우 CPU, 메모리 등의 조합으로 한 시간단위로 이용량이 결정되어짐      네트워크 과금의 방식  네트워크 과금의 사고 방법에는 수신과 송신이 존재 외부 네트워크에서 AWS로 통신을 수신, AWS에서 외부 네트워크로 송신이라 하며 수신은 기본적으로 무료이지만 송신에 대해서는 1GB당 얼마라는 계산 방식으로 과금이 측정되어짐 수신은 무료이므로 온프레미스 서버의 데이터를 AWS에 백업하는 방식은 통신료가 무료이며, 데이터 복원 등의 이유로 그 데이터를 온프레미스로 송신할 때만 과금이 발생      횟수 기준에 따른 방식  횟수 기준에 따른 과금은 API 호출 횟수를 기준으로 계산  Amazon SQS라는 큐 서비스는 표준 큐의 경우 100만 건의 API 요청에 $0.</description>
    </item>
    
    <item>
      <title>Base</title>
      <link>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/basic/</guid>
      <description>AWS 용어 정리   AWS 기본 용어  Workloads
 고객 대면 애플리케이션이나 백엔드 프로세스 같이 비즈니스 가치를 창출하는 리소스 및 코드 모음을 의미    On-premise
 클라우드 방식이 아닌, 회사 등이 자체적으로 보유한 전산실 등의 인프라를 의미   Edge Location
  CDN( Contents Delivery Network ) 서비스인 CloudFront 가 사용하는 캐시서버
  전 세계의 분포되어 있으며 Edge Location 끼리 데이터를 공유
   Elasticity ( 탄력성 )</description>
    </item>
    
    <item>
      <title>AWS CLI</title>
      <link>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/aws_cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/aws_cli/</guid>
      <description>AWS CLI   Amazon Web Service Command Line Interface  AWS CLI    AWS CLI란 AWS의 서비스들을 명령어로 조작할 수 있게 해주는 통합 툴입니다.
  다양한 운옃제에서 지원하며, 파이썬 프로그래밍 언어인 AWS SDK인 boto를 기반으로 만들어져 있습니다.
  AWS CLI로 사용할 수 있는 AWS 서비스는 AWS CLI에서 확일할 수 있습니다.
  기본적으로 AWS 매니지먼트 콘솔과 거의 같은 조작이 가능하며, 콘솔화면에서 할 수 있는 조작을 프로그램으로 만들어 배치 ( barch )로 만들면 AWS 서비스를 보다 쉽게 사용이 가능합니다.</description>
    </item>
    
    <item>
      <title>AWS SDK</title>
      <link>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/aws_sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/%EC%A0%95%EB%A6%AC%EC%A0%84/aws_sdk/</guid>
      <description>AWS SDK   AWS SDK  AWS SDK </description>
    </item>
    
  </channel>
</rss>
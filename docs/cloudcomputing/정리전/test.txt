 Python SDK 사용하기
 
테스트 OS : Ubuntu 18.04 LTS

 

[인증키 확인]

Endpoint -> 오브젝트 스토리지 -> 스토리지 관리 -> 인증키 관리 -> API {IDC} Endpoint 

Access_Key  : console.iwinv.kr -> 오브젝트 스토리지 -> 스토리지 관리 -> 인증키 관리 -> Access Key ID

Secret_Key   : console.iwinv.kr -> 오브젝트 스토리지 -> 스토리지 관리 -> 인증키 관리 -> Secret Key ID

 

 

 

AWS Python SDK 설치하기  

pip3 install boto3
 

 

# 예제코드 

 

버킷 생성

import boto3

service_name = ‘s3’
endpoint_url = ‘Endpoint‘
region_name = ‘kr-standard’
access_key = ‘Access_Key‘
secret_key = ‘Secret_Key‘
if __name__ == “__main__”:
s3 = boto3.client(service_name, endpoint_url=endpoint_url, aws_access_key_id=access_key,
aws_secret_access_key=secret_key)

bucket_name = ‘Buket_Name‘

s3.create_bucket(Bucket=bucket_name)

 

 

버킷 삭제

import boto3
service_name = ‘s3’
endpoint_url = ‘Endpoint‘
region_name = ‘kr-standard’
access_key = ‘Access_Key‘
secret_key = ‘Secret_Key‘

if __name__ == “__main__”:
s3 = boto3.client(service_name, endpoint_url=endpoint_url, aws_access_key_id=access_key,
aws_secret_access_key=secret_key)

bucket_name = ‘Buket_Name‘

s3.delete_bucket(Bucket=bucket_name)

 


버킷 리스트 확인

import boto3

service_name = ‘s3’
endpoint_url = ‘Endpoint’
region_name = ‘kr-standard’
access_key = ‘Access_Key‘
secret_key = ‘Secret_Key‘

if __name__ == “__main__”:
s3 = boto3.client(service_name, endpoint_url=endpoint_url, aws_access_key_id=access_key,
aws_secret_access_key=secret_key)

response = s3.list_buckets()

for bucket in response.get(‘Buckets’, []):
print bucket.get(‘Name’)

  

 

오브젝트 업로드

# 폴더 생성

import boto3

service_name = ‘s3’
endpoint_url = ‘Endpoint‘
region_name = ‘kr-standard’
access_key = ‘Access_Key‘
secret_key = ‘Secret_Key‘
if __name__ == “__main__”:
s3 = boto3.client(service_name, endpoint_url=endpoint_url, aws_access_key_id=access_key,
aws_secret_access_key=secret_key)

bucket_name = ‘Buket_Name‘

folder_name = ‘Folder_Name/’

s3.put_object(Bucket=bucket_name, Key=folder_name)

 

# 오브젝트 업로드
import boto3

service_name = ‘s3’
endpoint_url = ‘Endpoint‘
region_name = ‘kr-standard’
access_key = ‘Access_Key‘
secret_key = ‘Secret_Key‘
if __name__ == “__main__”:
s3 = boto3.client(service_name, endpoint_url=endpoint_url, aws_access_key_id=access_key,
aws_secret_access_key=secret_key)

bucket_name = ‘Buket_Name‘

object_name = ‘Object_Name‘
local_file_path = ‘File_Path/File_Name‘ # ex) home/ubuntu/test.txt

s3.upload_file(local_file_path, bucket_name, object_name)

 

 

 

오브젝트 다운로드

import boto3

service_name = ‘s3’
endpoint_url = ‘Endpoint‘
region_name = ‘kr-standard’
access_key = ‘Access_Key‘
secret_key = ‘Secret_Key‘
if __name__ == “__main__”:
s3 = boto3.client(service_name, endpoint_url=endpoint_url, aws_access_key_id=access_key,
aws_secret_access_key=secret_key)
bucket_name = ‘Buket_Name’

object_name = ‘Object_Name‘
local_file_path = ‘File_Path/File_Name‘ # ex) home/ubuntu/test.txt
s3.download_file(bucket_name, object_name, local_file_path)

 

 

오브젝트 리스트 확인 

import boto3

service_name = ‘s3’
endpoint_url = ‘Endpoint‘
region_name = ‘kr-standard’
access_key = ‘Access_Key‘
secret_key = ‘Secret_Key‘
if __name__ == “__main__”:
s3 = boto3.client(service_name, endpoint_url=endpoint_url, aws_access_key_id=access_key,
aws_secret_access_key=secret_key)

bucket_name = ‘Buket_Name‘

# list all in the bucket
max_keys = 300
response = s3.list_objects(Bucket=bucket_name, MaxKeys=max_keys)

print(‘list all in the bucket’)

while True:
print(‘IsTruncated=%r’ % response.get(‘IsTruncated’))
print(‘Marker=%s’ % response.get(‘Marker’))
print(‘NextMarker=%s’ % response.get(‘NextMarker’))

print(‘Object List’)
for content in response.get(‘Contents’):
print(‘ Name=%s, Size=%d, Owner=%s’ % \
(content.get(‘Key’), content.get(‘Size’), content.get(‘Owner’).get(‘ID’)))

if response.get(‘IsTruncated’):
response = s3.list_objects(Bucket=bucket_name, MaxKeys=max_keys,
Marker=response.get(‘NextMarker’))
else:
break

# top level folders and files in the bucket
delimiter = ‘/’
max_keys = 300

response = s3.list_objects(Bucket=bucket_name, Delimiter=delimiter, MaxKeys=max_keys)

print(‘top level folders and files in the bucket’)

while True:
print(‘IsTruncated=%r’ % response.get(‘IsTruncated’))
print(‘Marker=%s’ % response.get(‘Marker’))
print(‘NextMarker=%s’ % response.get(‘NextMarker’))

print(‘Folder List’)
for folder in response.get(‘CommonPrefixes’):
print(‘ Name=%s’ % folder.get(‘Prefix’))

print(‘File List’)
for content in response.get(‘Contents’):
print(‘ Name=%s, Size=%d, Owner=%s’ % \
(content.get(‘Key’), content.get(‘Size’), content.get(‘Owner’).get(‘ID’)))

if response.get(‘IsTruncated’):
response = s3.list_objects(Bucket=bucket_name, Delimiter=delimiter, MaxKeys=max_keys,
Marker=response.get(‘NextMarker’))
else:
break

 

 

 

오브젝트 삭제

import boto3

service_name = ‘s3’
endpoint_url = ‘Endpoint‘
region_name = ‘kr-standard’
access_key = ‘Access_Key‘
secret_key = ‘Secret_Key‘
if __name__ == “__main__”:
s3 = boto3.client(service_name, endpoint_url=endpoint_url, aws_access_key_id=access_key,
aws_secret_access_key=secret_key)

bucket_name = ‘Buket_Name‘
object_name = ‘Object_Name‘

s3.delete_object(Bucket=bucket_name, Key=object_name)



Java script SDK 사용하기

테스트 OS : Ubuntu 18.04 LTS

 

[인증키 확인]

Endpoint -> 오브젝트 스토리지 -> 스토리지 관리 -> 인증키 관리 -> API {IDC} Endpoint 

Access_Key  : console.iwinv.kr -> 오브젝트 스토리지 -> 스토리지 관리 -> 인증키 관리 -> Access Key ID

Secret_Key   : console.iwinv.kr -> 오브젝트 스토리지 -> 스토리지 관리 -> 인증키 관리 -> Secret Key ID

 

 

node.js / npm 설치하기

sudo apt install nodejs

sudo apt install npm

 

AWS Javascript SDK 설치하기  

npm install –save aws-sdk

 


AWS Javascript SDK 버젼확인 

npm 명령어를 통해 AWS Javascript SDK 설치완료시 버젼을 표시합니다.

/home/ubuntu/java
└─┬ aws-sdk@2.721.0
├─┬ buffer@4.9.2
│ ├── base64-js@1.3.1
│ └── isarray@1.0.0
├── events@1.1.1
├── ieee754@1.1.13
├── jmespath@0.15.0
├── querystring@0.2.0
├── sax@1.2.1
├─┬ url@0.10.3
│ └── punycode@1.3.2
├── uuid@3.3.2
└─┬ xml2js@0.4.19
└── xmlbuilder@9.0.7

 

 

Config.Json 파일 생성하기 

java script 실행파일 경로에 config.json파일 생성 

 

# config.json 

{
“accessKeyId”: “Access_Key”,
“secretAccessKey”: “Secret_Key”,
“region”: “default”,
“endpoint” : “Endpoint”,
“s3ForcePathStyle” : “true”
}

 

 

# 예제코드

 

버킷 생성

var AWS = require(‘aws-sdk’);
AWS.config.loadFromPath(‘./config.json’);
AWS.config.update({region: ‘default’});

s3 = new AWS.S3({apiVersion: ‘2006-03-01’});

var bucketParams = {
Bucket : process.argv[2]
};

s3.createBucket(bucketParams, function(err, data) {
if (err) {
console.log(“Error”, err);
} else {
console.log(“Success”, data.Location);
}
});

 

# 실행 명령어 

node 파일명.js [Bucket_Name]

 

 

버킷 삭제

var AWS = require(‘aws-sdk’);
AWS.config.loadFromPath(‘./config.json’);
AWS.config.update({region: ‘REGION’});

s3 = new AWS.S3({apiVersion: ‘2006-03-01’});

var bucketParams = {
Bucket : process.argv[2]
};

s3.deleteBucket(bucketParams, function(err, data) {
if (err) {
console.log(“Error”, err);
} else {
console.log(“Success”, data);
}
});

 

# 실행 명령어 

node 파일명.js [Bucket_Name]

 

 

버킷 리스트 확인

var AWS = require(‘aws-sdk’);

AWS.config.loadFromPath(‘./config.json’);
AWS.config.update({region: ‘default’});

s3 = new AWS.S3({apiVersion: ‘2006-03-01’});

s3.listBuckets(function(err, data) {
if (err) {
console.log(“Error”, err);
} else {
console.log(“Success”, data.Buckets);
}
});

 

 

오브젝트 업로드

var AWS = require(‘aws-sdk’);
AWS.config.loadFromPath(‘./config.json’);
AWS.config.update({region: ‘REGION’});

s3 = new AWS.S3({apiVersion: ‘2006-03-01’});

var uploadParams = {Bucket: process.argv[2], Key: ”, Body: ”};
var file = process.argv[3];

var fs = require(‘fs’);
var fileStream = fs.createReadStream(file);
fileStream.on(‘error’, function(err) {
console.log(‘File Error’, err);
});
uploadParams.Body = fileStream;
var path = require(‘path’);
uploadParams.Key = path.basename(file);

s3.upload (uploadParams, function (err, data) {
if (err) {
console.log(“Error”, err);
} if (data) {
console.log(“Upload Success”, data.Location);
}
});

 

# 실행 명령어 

node 파일명.js [Bucket_Name] [Object_Name]

 

 

오브젝트 다운로드

var AWS = require(‘aws-sdk’);
AWS.config.loadFromPath(‘./config.json’);
AWS.config.update({region: ‘REGION’});

s3 = new AWS.S3({apiVersion: ‘2006-03-01’});

var file = require(‘fs’).createWriteStream(process.argv[4]);

var params = {Bucket:’process.argv[2]’, Key:’process.argv[3]’};

s3.getObject(params).createReadStream().pipe(file);

 

# 실행 명령어 

node 파일명.js [Bucket_Name] [Object_Name] [Path/filename] 

ex) node object_upload.js iwinv-bucket test.txt /home/ubuntu/test.txt 

 

 

오브젝트 리스트 확인

var AWS = require(‘aws-sdk’);
AWS.config.loadFromPath(‘./config.json’);
AWS.config.update({region: ‘REGION’});

s3 = new AWS.S3({apiVersion: ‘2006-03-01’});

var bucketParams = {
Bucket : process.argv[2]
};

s3.listObjects(bucketParams, function(err, data) {
if (err) {
console.log(“Error”, err);
} else {
console.log(“Success”, data);
}
});

 

# 실행 명령어 

node 파일명.js [Bucket_Name]

 

 

오브젝트 삭제

var AWS = require(‘aws-sdk’);
AWS.config.loadFromPath(‘./config.json’);
AWS.config.update({region: ‘REGION’});

s3 = new AWS.S3({apiVersion: ‘2006-03-01’});

var params = {
Bucket: process.argv[2], 
Key: process.argv[3]
};
s3.deleteObject(params, function(err, data) {
if (err) console.log(err, err.stack);
else console.log(data);
/*
data = {
}
*/
});

 

# 실행 명령어 

node 파일명.js [Bucket_Name] [Object_Name]
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenStack on 뭉게뭉게</title>
    <link>https://mung0001.github.io/docs/cloudcomputing/openstack/</link>
    <description>Recent content in OpenStack on 뭉게뭉게</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    
	<atom:link href="https://mung0001.github.io/docs/cloudcomputing/openstack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/openstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/openstack/</guid>
      <description>인프라 환경 변화의 시작, 클라우드   클라우드 컴퓨팅의 정의와 종류  클라우드 컴퓨팅(Cloud Computing)   인터넷이 가능한 디바이스(스마트폰, 스마트패드, 스마트TV 등)로 클라우드에서 데이터를 처리하며, 저장 및 관리하는 컴퓨팅 시스템
  클라우드 서비스의 종류
  IaaS(Infrastrcture as a Service): 서버, 스토리지, 네트워크를 가상화 환경으로 만 들어 필요에 따라 인프라 자원을 제공하는 서비스
  PaaS(Platform as a Service): 웹에서 개발 플랫폼을 제공하는 서비스
  SaaS(Software as a Service): 온디맨드 소프트웨어(On-demand Software)라고도 하며, 중앙에서 호스팅 되는 소프트웨어를 웹 브라우저 등 클라우이언트로 이용하는 서비스</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/keystone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/keystone/</guid>
      <description>keystone   인증을 관리하는 Keystone   인증 서비스인 Keystone은 인증 토큰을 비롯해 테넌트 및 사용자 관리, 서비스의 엔드포인트 URL 등을 관리하는 기본 서비스
논리 아키텍처의 Keystone  논리 아키텍처에서 Keystone은 Keystone-all, Database와 LDAP로 구성 Keystone-all에는 토큰(Token), 카탈로그(Catalog), 정책(Poliy), 인증(Identity) 등이 포함되어 있음  Token Backend는 사용자별 토큰을 관리 Catalog Backend는 오픈스택에서 모든 서비스의 엔드포인트 URL을 관리 Policy Backend는 테넌트, 사용자 계정, 롤 등을 관리 Identity Backend로 사용자 인증을 관리    오픈스택에서 Keystone 위치  오픈스택 Keystone은 모든 서비스를 관장하는 위치이 있음 Keystone은 타인이나 해커에게서 시스템을 안전하게 보호하고 사용자 등록, 삭제, 권한 관리, 사용자가 접근할 수 있는 서비스 포인트 관리까지 전반적인 사용자 인증을 관리  도메인, 프로젝트, 그룹, 사용자, 롤의 개념과 관계  Keystone은 사용자 인증 부분과 서비스 인증 부분을 관리함 사용자일 때는 사용자 ID와 패스워드, 사용자 권한의 롤(Roll)을 등록 서비스일 때는 서비스를 등록하고 해당 서비스의 엔드포인트 URL을 등록  도메인(Domain)은 서로 분리되어 있음 각 도메인에는 프로젝트와 사용자가 있음 프로젝트는 사용자를 가질 수 있음 사용자에게는 롤이 있으며, 여러 프로젝트의 구성원이 될 수 있음 관리자 롤(Admin Role)을 가진 사용자끼리, 일반 사용자롤(Member Role)을 가진 사용자끼리 그룹핑(Grouping)을 할 수 있음    Keystone의 속성비교  회사의 Keystone은 도메인에 해당 관리자와 일반 사용자는 Keystone의 프로젝트에 해당 시스템을 잘 개발하는 직원은 관리자이면서 사용자에 해당 관리자가 시스템을 이용해 할 수 있는 역할은 롤에 해당 메뉴는 서비스에 해당하며, 메뉴에 연결할 링크는 엔드포인트 URL에 해당    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/glance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/glance/</guid>
      <description>Glance   운영체제 이미지를 관리하는 Glance  이미지 서비스인 Glance는 Nova에서 생성하는 인스턴스의 운영체제에 해당하는 이미지를 관리 가상머신을 생성해 컴퓨터를 대신 사용, 이 때 필요한 운영체제의 이미지 파일을 Glance이 다양한 하이퍼바이저에서 사용할 수 있는 VM 이미지를 관리 및 VM에 설치된 운영체제를 보관, 관리 함  논리 아키텍처의 Glance  Glance 사용자들은 glance-api로 이미지를 등록, 삭제, 관리할 수 있음 glance-api는 glance-registry와 Glance database에서 이미지를 관리함 이미지를 등록할 때는 glance-registry로 Glance database에 저장됨 등록된 이미지를 사용할 때는 Glance database에 바로 사용을 요청 관리자는 운영하려는 운영체제의 이미지를 glance-registry로 Glance database에 등록 이미 저장된 이미지만으로도 인스턴스를 생성할 수 있음, 즉 Glance는 Nova 옆에 항상 따라다님  가상 머신 이미지 포맷  대체적으로 이미지를 내려받아 Glance에 등록할 때는 raw 포맷이나, qcow2 포맷으로 등록함  aki: 아마존 커널 이미지 ami: 아마존 머신 이미지 ari: 아마존 ram 디스크 이미지 iso: 광학 디스크나 CD-ROM의 데이터 콘텐츠를 지원하는 아카이브 포맷 qcow2: QEMU 에뮬레이터가 지원하는 포맷, 동적으로 확장할 수 있으며, Copy on Write를 지원 raw: 구조화되지 않은 디스크 포맷 vdi: VirtalBox 모니터와 QEMU 에뮬레이터가 지원하는 디스크 포맷 vhd: VHD 디스크 포맷은 VMware, Xen 마이크로소프트, VirtualBox 같은 가상 머신 모니터가 사용하는 일반적인 디스크 포맷 vhdx: VHDX 디스크 포맷은 큰 디스크 크기를 지원하는 VHD 형식의 향상된 버전 vmdk: 일반적인 디스크 포맷으로 여러 가상 머신 모니터가 지원    컨테이너 포맷(container Format)  컨테이너 포맷은 VM 이미지가 실제 VM 메타데이터를 포함하는 파일 포맷인지를 나타냄  aki: 아마존 커널 이미지 ami: 아마존 머신 이미지 bare: 아마존 ram 디스크 이미지 docker: Docker 컨테이너 포맷 ova: tar 파일의 OVF 패키지 ovf: OVF 컨테이너 포맷    지원하는 운영체제 이미지  오픈스택 Nova에서 인스턴스를 생성할 때는 이미 하이퍼바이저에서 생성한 가상 머신에 운영체제를 설치한 이미지를 Glance에 등록시키고, 등록시킨 이미지를 이용해서 인스턴스를 생성  Glance 구조  이미지를 저장하면 glance-registry로 Glance DB에 저장 주의사항  오픈스택 이미지를 생성할 때는 VMware처럼 운영체제 설치 파일(iso)로 가상머신을 생성하는 것이 아니라 이미 운영체제가 이미 설치가 된 가상머신을 이미지로 등록해야 함 따라서 이미지는 클라우드 전용이미지를 사용하는 것이 좋다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/nova/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/nova/</guid>
      <description>Nova   가상 서버를 생성하는 컴퓨트 Nova   오픈 스택 Nova는 컴퓨트 서비스의 핵심이며, 하이퍼바이저, 메시지 Queue, 인스턴스 접속을 하는 콘솔 등의 다양한 기능이 유기적으로 연결되어 가상 서버를 생성할 수 있는 시스템을 구성
논리 아키텍처 Nova  Nova는 대시보드나 콘솔에서 호출하는 nova-api에서 시작 Queue를 이용해 nova-compute에 인스턴스를 생성하라는 명령을 전달 nova-compute는 하이퍼바이저 라이브러리를 이용해 하이퍼바이저에 인스턴스를 생성하려는 명령어를 전달 하이퍼바이저가 인스턴스를 생성 생성된 인스턴스는 nova-api로 접근할 수 있으며 Nova의 몯느 기능은 메시지 Queue로 처리할 수 있음  Nova가 지원하는 하이퍼바이저의 종류  기본 하이퍼바이저는 KVM과 QEMU 프로바이더가 테스트하는 Hyper-V, VMware, XenServer, Sen via libvirt 몇 번의 테스트만 하는 하이퍼바이저 드라이버인 베어메탈, Docker, LXC via libvirt  노드별로 설치되는 Nova  nova-api: Nova의 REST API 서버를 담당 nova-cert: X509 인증서 서비스를 제공하는 서버 데이터 데몬 nova-conductor: 코디네이션과 데이터베이스 쿼리를 지원하는 서버 데몬 nova-consoleauth: nova-console 인증을 제공 nova-novncproxy: novnc-console과 호환되는 웹 소켓 프록시 nova-scheduler: VM 인스턴스를 실행할 컴퓨터 노드를 선택하는 역할을 수행 nova-novaclient: nova REST API를 사용하는 클라이언트 프로그램 컴퓨터 노드에 설치  nova-compute-kvm: 인스턴스(가상 머신)와 관련된 모든 프로세스를 처리 python-guestfs: 파일 생성 기능을 지원하는 Python 라이브러리 qemu-kvm: KVM 하이퍼바이저      </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/swift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/swift/</guid>
      <description>Swift   오브젝트 스토리지 Swift   다른 서비스와는 다르게 단독으로 구성되며, 클라우드 스토리지 서비스를 구축 할 수 있음
논리 아키텍처의 Swift  오픈스택 Swift는 swift-proxy-server, swift-account-server, swift-container-server, swift-object-server로 구성 swift-proxy-server는 swift-account-server, swift-container-server, swift-object-server를 관리 어카운트, 컨테이너는 별도의 메타데이터가 데이터베이스로 관리됨 오브젝트는 저장 공간에 직접 저장되는 방식으로 설계되어 있음 swift-proxy-server는 오픈스택의 Object API를 제공 사용자는 API를 사용해 데이터를 저장하거나 내려받을 수 있음  Swift의 논리적 구성 요소  Swift의 구성은 스토리지 공간 여러 개를 합쳐 하나의 커다란 공간으로 가상화하고, 그 안에서 사용자만의 별도 스토리지 공간이 있는 것처럼 다시 가상화를 진행 사용자는 특성에 따라 데이터를 분류해서 저장할 컨테이너를 생성하고 해당 컨테이너에 데이터를 저장 swift-proxy-server는 스토리지 노드 여러 개를 관리하며 사용자 인증을 담당, 최근에는 Keystone으로 인증을 처리하며, 프록시 서버와 함께 설치되기도 함 스토리지 노드에는 swift-account-server, swift,compute-server, swift-object-server가 실행되며 실제 메타데이터파일이나 오브젝트에 해당하는 데이터 파일을 저장  Swift의 특징  인증: 사용자의 인증을 담당하는 기능 어카운트(Account): 사용자 계정 및 컨테이너를 관리 컨테이너: 저장 공간 단위로 컨테이너 안의 오브젝트 정보를 관리 오브젝트: 실제 데이터  Swift Ring  Swift 역시도 Nova를 구성할 떄와 마찬가지로 스토리지 노드가 여러 대 있음 각 스토리지 노드에는 swift-account-server, swift-container-server, swift-object-server가 실행됨 서버들은 관리자가 설정한 해당 포트로 서로 통신 스토리지 노드 중 하나라도 손상이 되면 데이터를 잃지 않도록 데이터 복제(Replica)프로세스가 함께 실행됨 스토리지 파일은 자신이 관리하는 데이터를 서로 공유하려고 Ring인 파일이 어느 노드에, 어떤 데이터가 들어 있는 지를 인지함 Ring파일은 프록시 노드에서 생성해 모든 스토리지 노드가 동일하게 가지고 있음 Ring 파일에는 디바이스 정보가 들어 있는데,  디바이스를 구분하는 ID 존(Zone) 번호 스토리지 노드 IP 포트 디바이스 이름 디바이스 비중 기타 디바이스 정보    Swift의 데이터 관리 방법  Swift는 사용자 게정을 관리하는 어카운트, 디렉터리 개념의 컨테이너, 실제 파일을 표현하는 오브젝트로 구성 Swift는 어카운트가 컨테이너를 포함하고, 컨테이너가 오브젝트를 포함하도록 관리함 보통 Swift에서는 프록시 노드 한 대에 스토리지 노드 다섯 대를 구성하기를 권장 프록시 노드들은 로드밸런서로 묶여 있어 사용자는 특정 URL 하나만 호출해도 스토리지 서비스를 자유롭게 사용가능 파일을 올릴 때는 설정된 리플리카로 여러 스토리지 노드로 분산해서 저장, 다운로드 시 그 중 한 곳을 사용  Swift와 Keystone  Swift에는 SwAuth를 이용하는 인증 방법과 Keystone을 이용하는 인증 방법이 있음 최근에는 Keystone을 이용해서 주로 인증하며, Keystone에는 프로젝트, 사용자, 롤이 있음 관리자(admin, swiftoperator)는 사용자와 컨테이너를 생성, 삭제할 수 있음 관리자는 오브젝트도 올리기, 내려받기, 삭제를 할 수 있음 일반 사용자(member)은 사용자와 컨테이너를 생성할 수 없음 일반 사용자는 관리자가 미리 생성해서 권한을 준 컨테이너만 사용할 수 있음 일반 사용자는 관리자가 설정한 권한으로 오브젝트 목록을 확인할 수 있음 일반 사용자는 관리자가 설장한 권한으로 데이터를 올리고 내릴 수 있음 특정 사용자에게 관리자(admin) 권한을 부여하려면 리셀러어드민(ResellerAdmin) 롤을 주어야 함 해당 사용자는 관리자가 할 수 있는 기능을 모두 사용할 수 있음  Swift의 이레이저 코딩(Eraure Coding) 기능과 스토리지 정책   스토리지 저장 공간을 효율적으로 관리하는 것이 이레이져 코딩</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/neutron/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/neutron/</guid>
      <description>Neutron   네트워크를 관리하는 Neutron   폴섬 버전에서는 Quantum, 그리즐리 버전에서는 Neutron으로 릴리스 되었음
  기존 오픈스택의 네트워크 서비스는 nova-network가 담당했으나, SDN(Software Defined Network) 개념이 들어오면서 별도의 네트워크 프로젝트로 분리되었음
논리 아키텍처의 Neutron  Neutron은 neutron-server, Neutron L2 Agent* 및 neutron-l3-agent*, neutron-dhcp-agent, Queue, Neutron Database, Neutron 3rd Party Plugin으로 구성 Neutron은 다양한 네트워크 플러그인이나 네트워크 모델을 지원  사용자는 Neutron API를 이용해 neutron-server로 IP 할당을 요청 neutron-server 들어온 요청을 Queue로 다시 요청 Queue는 neutron-dhcp-agent와 Neutron 3rd Party plugin으로 IP 할당 지시를 내림 neutron-dhcp-agent와 Neutron 3rd Party Plugin은 지시 받은 작업 수행을 시작 neutron-server는 수시로 작업 상태를 Neutron database에 저장 할당된 IP를 인스턴스에서 사용 가능    Neutron이 지원하는 플러그인의 종류  사이트 참조  Neutron과 VRRP, DVR  VRRP(Virtual Router Redundancy Protocl)로 랜에서 정적으로 설정된 기본 라우터를 사용할 때, 하나 이상의 백업 라우터를 사용하는 방법을 제공하는 인터넷 프로토콜 DVR(Distributed Virtual Router)이란 VRRP 기능을 향상시키고, 분산 라우팅 기능과 HA(High Availability), 로드밸런싱 기능을 사용할 수 있음 기존 레거시 HA 라우터와 마찬가지로 DVR/ SNAT(Static NAT), HA 라우터는 다른 노드에서 실행되는 L3 Agent의 백업 DVR/ SNAT 라우터에서 SNAT 서비스 장애를 빠르게 해결 가능     오픈스택 네트워크 구조</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/cinder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/cinder/</guid>
      <description>Cinder   블록 스토리지를 관리하는 Cinder   Nova에서 생성된 인스턴스에서 확장해서 사용할 수 있는 저장 공간을 생성, 삭제하고 인스턴스에 연결 할 수 있는 기능을 제공
논리 아키텍처의 Cinder  논리 아키텍처의 Cinder은 cinder-api, Queue, Cinder Database, cinder-volume, Volume Provider, cinder-scheduler로 구성되어짐 아키텍처의 특징  cinder-api로 볼륨을 추가, 삭제할 수 있음 cinder-volume은 볼륨을 실제서 생성 및 Cinder Database에 볼륨 정보를 업데이트 Cinder는 물리 하드 디스크를 LVM(Logical Volume Manager)으로 설정 설정된 LVM은 cinder-conf와 nova.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/horizon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/horizon/</guid>
      <description>Horizon   대시보드 Horizon   사용자가 웹 UI로 인스턴스 생성, 삭제, 관리 등을 쉽고 빠르게 처리할 수 있게 지원
  Horizon은 아파치 웹 서버를 사용 및 Python, Django 프레임워크로 구현되어 있음
논리 아키텍처의 Horizon  논리 아키텍처에서 보이는 Horizon은 단순히 Horizon 자체 모듈만 있음 모든 서비스의 API와 연동해서 사용자에게 웹 서비스를 제공 할 수 있음    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/ceilometer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/ceilometer/</guid>
      <description>텔레미터 서비스 Ceilometer   텔레미터 서비스 Ceilometer  클라우드에서 배포된 자원의 사용량과 성능을 측정해 사용자가 자원 상태를 모니터링 할 수 있는 기능을 제공 Ceilometer는 다음 요소로 구성됨  ceilometer-colletcor: 중앙 관리 서버에서 실행되며, 메시지 Queue(에이전트에서 오는 미터링 데이터 알림)을 모니터링 할 수 있음 ceilometer-agent-notification: ceilometer-collector와 함꼐 중앙 관리서베에서 실행, 메시지 Queue를 이용해 이벤트와 미러링 데이터를 기록 ceilometer-agent-compute: 각 컴퓨팅 노드에 설치해서 실행, 자원 활용 통계로 사용 ceilometer-account-central: 중앙 관리 서버에서 실행, 인스턴스에 연결되지 않은 자원이나 컴퓨터 노드의 활용 가능한 자원 통계를 폴링 ceilometer-alarm-evaluator: 하나 이상의 중앙 관리 서버에서 실행, 슬라이딩 시간대에 임계 값을 추가할 때 발생하는 경보 시점을 결정 ceilometer-alarm-nottifier: 하나 이상의 중앙 관리 서버에서 실행되며, 샘플을 수집하는 임계 값 평가에 따라 알람을 설정 할 수 있음 ceilometer database: 수집한 데이터를 저장할 Ceilometer 데이터 베이스 ceilometer-api: 하나 또는 그 이상의 중앙 관리 서버에서 실행되며 데이터베이스에서 데이터 엑세스를 제공 Ceilometer는 리버티 버전에서 기존에 알람 서비스를 하던 부분을 aodh로 분리, 알람서비스를 위해서는 별도로 aodh를 설치해야 됨    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/heat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/heat/</guid>
      <description>Heat   오케스트레이션 서비스 Heat  오케스트레이션은 자원 관리, 배치, 정렬을 자동화하는 것 오케스트레이션은 인스턴스 생성에 대한 일련의 과정을 자동화해서 인프라를 쉽게 배포할 수 있도록 하는 탬플릿 기반 엔진 오케스트레이션에서 사용되는 템플릿 언어는 인프라, 서비스, 응용프로그램, 프로비저닝, 자동화 컴퓨팅, 스토리지, 네트워킹, 자동 스케일링 등에 사용 가능 Heat는 다음 요소로 구성  Heat: Heat 도그는 AWS CloudFormation API와 Heat API가 서로 커뮤니케이션 할 수 있는 CLI heat-api: RPC heat 엔진에 전송해서 요청된 API를 처리한 REST API를 제공 heat-api-cfn: AWS CloudFormation과 호환되는 AWS 타입의 Query API를 제공 heat-engine: 템플릿을 생성하고, Consumer(API를 사용하려고 접근하는 애플리케이션이나 서비스)를 다시 이벤트로 제공하는 오케스트레이션의 주 작업을 수행    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/trove/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/trove/</guid>
      <description>Trove   데이터베이스 서비스 Trove  관계형 데이터베이스 기능을 활용가능, 클라우드 사용자와 데이터 베이스 관리자는 필요에 따라 Trove를 통해 데이터베이스 인스턴스를 제공, 관리가 가능 Trove는 다음 요소로 구성  python-troveclient: 클라이언트에서 콘솔로 trove-api를 실행할 수 있게 지원 trove-api: RESTful API 방식의 JSON을 지원, Trove인스턴스를 관리하고 프로비저닝 trove-taskmanager: 인스턴스 프로비저닝을 지원, 라이프 사이클 관리 및 운영하는 작업을 수행 trove-conductor: 호스트에서 실행되는 서비스로 호스트 정보를 업데이트 및 게스트 인스턴스 메시지를 수신 trove-guestagent: 게스트 인스턴스 안에서 실행, 데이터 베이스 작업을 실행, 관리    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/sahara/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/sahara/</guid>
      <description>Sahara   데이터 프로세싱 서비스 Sahara  오픈스택 위 빅데이터를 다루기 위한 Hadoop이나 Spark를 쉽게 제공할 수 있게 도와주는 서비스 Sahara는 다음 요소로 구성  Auth: 클라이언트 인증 및 권한을 부여, 오픈스택 인증 서비스 Keystone과 통신 DAL: Data Access Layer의 약어로 데이터 엑세스 계층을 의미, DB의 내부 모델을 유지 Secure Storage Access Layer: 암호 및 개인 키 같은 인증 데이터를 안전한 저장소에 보관 Provisioning Engine: 오픈스택 컴퓨트 서비스 Nova, Heat, Cinder, Glance, Designate와 통신을 담당하는 구성 요소 Vendor Plugins: 프로비저닝된 VM에서 데이터 처리 프레임워크를 구성하고 시작하는 기능을 담당하는 플러그 가능한 메커니즘 EDP: Elastic Data Processing의 약어로 Sahara가 제공하는 클러스테에서 데이터 처리 작업을 예약하고 관리 REST API: REST HTTP 인터페이스로 Sahara 기능을 호출 Python Sahara Client: 다른 오픈스택 구성 요소와 마찬가지로 Sahara에는 자체 Python 클라이언트가 있음 Sahara Pages: Sahara용 GUI로 오픈스택 대시보드인 Horizon에 있음    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/ironic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/ironic/</guid>
      <description>Ironic   베어메탈 서비스 Ironic   물리적인 컴퓨터를 관리하고 자원을 제공하는 구성요소의 모음
  Ironic은 구성에 따라 다음과 같은 다른 여러 오픈스택 서비스와 상호 작용할 수 있음
 IPMI 메트릭을 사용하는 오픈스택 텔레미터 모듈(Ceilometer) 인증 요청 및 다른 오픈스택 서비스를 인증하는 오픈스택 인증 서비스(Keystone) 이미지 및 이미지 메타데이터를 검색할 수 있는 오픈스택 이미지 서비스(Glance) DHCP 및 네트워크를 구성하는 오픈스택 네트워크 서비스(Neutron) 오픈스택 네트워크 서비스인 Nova는 베어메탈 서비스와 함꼐 작동하고, 인스턴스를 관리하는 사용자용 API를 제공 오픈스택 컴퓨트 서비스는 베어메탈 서비스가 제공하지 않는 예약 기능, 테넌트 할당량, IP 할당, 기타 서비스를 제공 오픈스택 오브젝트 스토리지 서비스인 Swift는 드라이브 설정, 사용자 이미지, 배포 로그 및 점검 데이터 임시 저장 장소를 제공    Ironic은 다음 요소로 구성</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/service/</guid>
      <description>****   옵셔널 서비스  컴퓨트, 오브젝트 스토리지, 이미지, 인증, 네트워크, 블록 스토리지, 대시보드 서비스만으로도 오픈스택을 구축할 수 있음 텔레미터, 오케스트레이션, 데이터베이스 같은 서비스를 제대로 사용한다면 효율적인 클라우드 관리와 운영에 많은 도움을 많을 수 있음 메시징 서비스 Zaqar 공유 파일 시스템 서비스 Manila DNS 서비스 Designate  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/openstack-%EB%AA%85%EB%A0%B9%EC%96%B4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/openstack-%EB%AA%85%EB%A0%B9%EC%96%B4/</guid>
      <description>OpenStack 명령어 입력시, 옵션이 많으니 사용 시 사전에 확인할 것
대부분의 명령어 입력은 기본 값으로 진행 compute service   인스턴스 리스트 출력  openstack server list  인스턴스 생성  openstack server create --image [] --flavor [] --key-name [] --network [] [ server_name ]  인스턴스 제거  openstack server delete [ 서버 이름 ]  인스턴스 시작  openstack server start [ 서버 이름 ]  인스턴스 정지  openstack server stop [ 서버 이름 ]   인스턴스 상세설명  openstack server show [ 서버 이름 ]  인스턴스 수정  openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack       openstack  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/openstack%EC%84%A4%EC%B9%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/openstack%EC%84%A4%EC%B9%98/</guid>
      <description>OpenStack   설치 방법  메뉴얼을 이용한 설치 자동화 툴을 이용한 설치 ( Packstack, Devstack )      packstack을 이용한 설치   0. 설치환경
   Hostname IP 운영체제 cpu 메모리 디스크      controller 192.168.1.98 CentOS7 2 4 50gb    compute 192.168.1.99 CentOS7 2 4 200gb    network 192.168.1.100 CentOS7 1 2 50gb                1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloudcomputing/openstack/%EA%B0%80%EC%83%81%ED%99%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloudcomputing/openstack/%EA%B0%80%EC%83%81%ED%99%94/</guid>
      <description>AWS 클라우드 아키텍처 설계를 통한 인프라 구축    가상화 ( Virtualization )   클라우드 컴퓨팅의 핵심적인 기술 단일한 물리 시스템에서 여러 환경이나 전용 리소스를 생성할 수 있는 기술, 1개의 시스템을 VM ( 가상 머신 )이라는 별도의 고유하고 안전한 환경으로 분할 가능 실제 물리적인 실제 서버처럼 운용이 가능   클라우드의 가상화 기술  일반적으로 클라우드란, 클라우드 컴퓨팅으로 흔히 말하는 클라우드는 클라우드 컴퓨팅을 얘기하며 클라우드 컴퓨팅이란 컴퓨터를 이용한 처리를 내 자원을 이용하는 것이 아닌 인터넷을 통해 제공되는 클라우드 사업자의 컴퓨터에서 처리하는 것을 의미 인터넷을 통해 사상화된 컴퓨터의 다양한 자원과 어플리케이션을 온 디맨드 ( 사용자의 욕에 따라 바로 제공 )로 제공하는 서비스 도커는 하이퍼 기반이 아닌 컨테이너 기반 NIST ( 미국 굽립 표준 기술연구소 )에서는 공유 구성이 가능한 컴퓨팅 리소스(네트워크, 서버, 스토리지, 애플리케이션 서비스)의 통합을 통해 어디서나 편하게 요청에 따라	네트워크를 통해 접근하는 것을 가능하게 하는 모델로 정의 NIST에서 정한 클라우드의 특징  주문형 셀프 서비스 : 개별 관리화면을 통해 서비스 이용 가능 광범위한 네트워크 접속 : 다양한 디바이스를 통해 서비스에 접속 리소스의 공유 : 사업자의 컴퓨터 자원을 여러 사용자가 공유하는 형태로 이용 신속한 확장성 : 필요에 따라 스케일 업, 스케일 다운 가능 측정 가능한 서비스 : 이용한 만큼 요금이 부과, 종량제     클라우드의 등장 배경 1980	메인 프레임에서 대부분 처리	메인(모든 것 처리)----클라이언트1990	클라이언트에서도 처리 기능이 추가	메인(처리)----클라이언트(처리)2000	사내 서버에서 처리	메인(모든 것 처리)----클라이언트현재	서버에서 처리하는 것은 동일하나 서버를 소유X	메인(모든 것 처리) 클라이언트 클라우드는 전혀 새로운 개념은 아니다.</description>
    </item>
    
  </channel>
</rss>
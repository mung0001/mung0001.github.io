<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenStack docs on 뭉게뭉게</title>
    <link>https://mung0001.github.io/docs/cloud/openstack/openstack/</link>
    <description>Recent content in OpenStack docs on 뭉게뭉게</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language><atom:link href="https://mung0001.github.io/docs/cloud/openstack/openstack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenStack 개요</title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/openstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/openstack/</guid>
      <description>인프라 환경 변화의 시작, 클라우드#클라우드 컴퓨팅의 정의와 종류##클라우드 컴퓨팅(Cloud Computing)#인터넷이 가능한 디바이스(스마트폰, 스마트패드, 스마트TV 등)로 클라우드에서 데이터를 처리하며, 저장 및 관리하는 컴퓨팅 시스템
클라우드 서비스의 종류
IaaS(Infrastrcture as a Service): 서버, 스토리지, 네트워크를 가상화 환경으로 만 들어 필요에 따라 인프라 자원을 제공하는 서비스
PaaS(Platform as a Service): 웹에서 개발 플랫폼을 제공하는 서비스
SaaS(Software as a Service): 온디맨드 소프트웨어(On-demand Software)라고도 하며, 중앙에서 호스팅 되는 소프트웨어를 웹 브라우저 등 클라우이언트로 이용하는 서비스</description>
    </item>
    
    <item>
      <title>Keystone</title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/keystone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/keystone/</guid>
      <description>인증을 관리하는 서비스 : Keyston##인증을 관리하는 서비스 : Keystone##Keystone은 인증 토큰을 비롯해 테넌트 및 사용자 관리, 서비스의 엔드포인트 URL 등을 관리하는 서비스 Keystone은 openstack의 백엔드에서 RBAD ( Role Based Access Control )을 통해 사용자의 접근을 제어하는 등의 인증 ( Identify ) 서비스로 사용되며 다음과 같은 기능으로 이루어져 있음 ##Keystone의 구성요소###구성요소 역할 user 사람 또는 오픈 스택 서비스를 이용하는 서비스 ( nova, neutron, cinder 등 )을 의미 User은 특정 프로젝트에 할당할 수 있으며, 증복을 허용하지 않음 Authentication 사용자의 신분을 확인하는 절차로, 특정 값을 통해 Keystone이 이를 검증 보통 인증을 위한 자료로는 ID, PW가 사용되며 Keystone은 인증확인 시 인증토큰을 방행 Token RBAD의 신분을 증명하기 위해 사용되는 텍스트 데이터 Token type fernet, uuid, pki, pkiz 어떤 자원에 접근이 가능한지 범위가 지정되어 있음 ( 시간 제한 있음 ) Project Keystone V2까지 Tenant라는 이름으로 사용 ( V3 이후 Project ) 어떤 자원이나 어플리케이션에 대한 권리를 가진 보안그룹 프로젝트는 특정 도메인에 의해 소유 Endpoint 사용자가 서비스를 이용하기 위해 연결정보를 제공하는 접근 가능한 네트워크 주소 ( URL ) EndPoint type admin, internal, public Role 사용자가 어떤 동작을 수행하도록 허용하는 규칙 사용자가 가지는 역할은 사용자에게 발행된 토큰을 통해 확인 사용자가 서비스를 호출하면, 서비스는 토큰에 저장된 사용자의 역할을 해석하여 허용유무 결정 Domain 구성요소를 효과적으로 관리하기 위한 사용자, 그룹, 프로젝트의 집합 사용자들은 한 도메인의 관리자의 권한 등을 부여받는 방식으로 역할을 부여가능 #Domain, Project, Group, User, Rule 개념과 관계#Keystone은 위에도 언급하였 듯이 사용자 인증 부분과 서비스 인증 부분을 관리 사용자일 때는 사용자 ID와 패스워드, 사용자 권한의 롤( Roll )을 등록 서비스일 때는 서비스를 등록하고 해당 서비스의 엔드포인트 URL을 등록 도메인(Domain)은 서로 분리되어 있음 각 도메인에는 프로젝트와 사용자가 있음 프로젝트는 사용자를 가질 수 있음 사용자에게는 롤이 있으며, 여러 프로젝트의 구성원이 될 수 있음 관리자 롤(Admin Role)을 가진 사용자끼리, 일반 사용자롤(Member Role)을 가진 사용자간의 그룹핑(Grouping)을 할 수 있음 ##Keystone의 논리 아키텍처##Keystone의 논리 아키텍처는 토큰(Token), 카탈로그(Catalog), 정책(Poliy), 인증(Identity) 으로 구성 #구성요소 역할 Token Backend 사용자별 토큰을 관리 Catalog Backend 오픈스택에서 모든 서비스의 엔드포인트 URL을 관리 Policy Backend 테넌트, 사용자 계정, 롤 등을 관리 Identity Backend 사용자 인증을 관리 ##Openstack에서 Keystone 위치###Openstack Keystone은 모든 서비스를 관장하는 위치 모든 User, Service는 Keystone의 인증을 통해서만 요청, 응답이 가능 Keystone은 타인이나 해커에게서 시스템을 안전하게 보호하고 사용자 등록, 삭제, 권한 관리, 사용자가 접근할 수 있는 서비스 포인트 관리와 다른 API들의 인증 등의 전체적인 인증 프로세스를 관리하는 역할을 수행 #</description>
    </item>
    
    <item>
      <title>Glance</title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/glance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/glance/</guid>
      <description>이미지를 관리하는 서비스 : Glance##이미지를 관리하는 서비스 : Glance##Cloud Computing을 사용하기 위해서는 Virtual Machine을 생성하기 위한 이미지가 필요로 하며, Glance는 Nova에서 생성하는 인스턴스의 운영체제에 해당하는 이미지를 관리하는 서비스 ##Glance의 구성요소###Glance는 위의 그림과 같이 3가지의 구성요소로 이루어져 있다 #구성요소 역할 Glance-api 이미지를 확인/ 복구/ 저장하는 등의 질의를 하기 이한 api 요청/ 응답을 담당 Glance-registry 이미지에 대한 메타데이터를 저장하고 처리하는 역할을 담당 및 Glance database에 저장된 데이터를 불러들이는 역할을 수행 Glance-database 이미지의 관련 정보들을 보관 ##논리 아키텍처의 Glance##Glance 사용자들은 glance-api로 이미지를 등록, 삭제, 관리 glance-api는 glance-registry와 Glance database에서 이미지를 관리 이미지를 등록할 때는 glance-registry로 Glance database에 저장 등록된 이미지를 사용할 때는 Glance database에 바로 사용을 요청 관리자는 운영하려는 운영체제의 이미지를 glance-registry로 Glance database에 등록 ##가상 머신 이미지 포맷##aki: 아마존 커널 이미지 ami: 아마존 머신 이미지 ari: 아마존 ram 디스크 이미지 iso: 광학 디스크나 CD-ROM의 데이터 콘텐츠를 지원하는 아카이브 포맷 qcow2: QEMU 에뮬레이터가 지원하는 포맷, 동적으로 확장할 수 있으며, Copy on Write를 지원 raw: 구조화되지 않은 디스크 포맷 vdi: VirtalBox 모니터와 QEMU 에뮬레이터가 지원하는 디스크 포맷 vhd: VHD 디스크 포맷은 VMware, Xen 마이크로소프트, VirtualBox 같은 가상 머신 모니터가 사용하는 일반적인 디스크 포맷 vhdx: VHDX 디스크 포맷은 큰 디스크 크기를 지원하는 VHD 형식의 향상된 버전 vmdk: 일반적인 디스크 포맷으로 여러 가상 머신 모니터가 지원 ##컨테이너 포맷(container Format)##aki: 아마존 커널 이미지 ami: 아마존 머신 이미지 bare: 아마존 ram 디스크 이미지 docker: Docker 컨테이너 포맷 ova: tar 파일의 OVF 패키지 ovf: OVF 컨테이너 포맷 ####Glance 명령어#현재 이미지 목록 확인 openstack image list #특정 이미지의 자세한 정보 확인 openstack image show [이미지 이름] #이미지 삭제 openstack image delete [이미지 이름] #이미지 추가 openstack image create --public --container-format bare --disk-format qcow2 --file [경로를 포함한 이미지 파일 이름] [이미지 이름] ##커스텀 이미지 생성##xming 윈도우에 설치 #CentOS 준비 후 CentOS에 가상머신 프로그램 설치 및 실행 $ yum install qemu kvm qemu-kvm libvirt virt-install bridge-utils virt-manager dejavu-lgc-sans-fonts virt-viewer $ systemctl restart libvirtd #ISO 파일로 qcow2 각 이미지에 맞는 파일 생성 qemu-img create -f qcow2 [이미지 파일 위치] [이미지 파일 크기] qemu-img create -f qcow2 /test/centos7.</description>
    </item>
    
    <item>
      <title>Nova</title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/nova/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/nova/</guid>
      <description>가상의 서버를 생성하는 서비스 : Nova##가상의 서버를 생성하는 서비스 : Nova##Nova는 compute 서비스의 핵심 compute 서비스란, 가상머신이 필요한 자원을 할당하고, 관리하는 서비스로 하이퍼바이저, 메시지 Queue, 인스턴스 접속을 하는 콘솔 등의 다양한 기능이 유기적으로 연결되어 가상 서버를 생성할 수 있는 시스템을 구성하는 시스템 ##Nova 서비스의 고려사항##고려사항 설명 CPU compute 서비스가 동작할 호스트 시스템의 cpu가 기본적으로 자체 하드웨어 가상화를 지원이 필수 Hypervisor 서비스에 사용할 하이퍼바이저를 맞게 설정해야 하며, 기본적으로 사용하는 Hypervisor은 KVM/QEMU Storage compute 서비스를 통해 인스턴스가 생성되면서 시스템의 디스크 용량의 제한을 가할 수 있음, 이를 위해 넉넉한 공간이 필요 Overcommit 기본적으로 자원을 할당하는 경우 1:1이 아닌 CPU는 16:1, Memory는 1.</description>
    </item>
    
    <item>
      <title>Neutron</title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/neutron/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/neutron/</guid>
      <description>네트워크를 관리하는 서비스: Neutron##네트워크를 관리하는 서비스: Neutron#Neutron은 네트워크 서비스로 여러 노드에 여러 프로세스를 배치하는 독립형 서비스 프로세스는 서로 및 다른 OpenStack의 서비스와 상화 작용 ##Neutron의 논리 아키텍처###구성요소 기능 neutron-server network api의 기능 및 네트워크 확장 기능을 서비스하며, 각 포트의 대한 모델 및 Pfmf 지정, AMQP를 사용하여 데이터베이스와 통신하는 플러그인을 통해 수행 neutron-L2-agent OVS 가상 Bridge 사이에서데이터 패킷을 전달하기 위한 중계장치 neutron-l3-agent 태넌트 네트워크에서 VM의 외부 네트워크 엑세서를 위한 L3/ NAT 전달을 제공 neutron-dhcp-agent 테넌트 네트워크에 DHCP 서비스를 제공, DHCP agent는 메시지 큐에 엑세스할 수 있는 권한이 필요 Queue 다른 서비스 간의 통신의 역할을 수행 Neutron Database Neutron 서비스를 수행하기 위한 일련의 정보들은 보관, 관리하는 DB Neutron 3rd Party Plugin Neutron 서비스의 안정적인 통신 역할을 수행 plugin agent 각 compute node에서 실행되며 로컬 vswitch을 구성 및 관리 network provider services 테넌트 네트워크에 추가 네트워킹 서비스를 제공 #Neutron은 다양한 네트워크 플러그인이나 네트워크 모델을 지원 사용자는 Neutron API를 이용해 neutron-server로 IP 할당을 요청 neutron-server 들어온 요청을 Queue로 다시 요청 Queue는 neutron-dhcp-agent와 Neutron 3rd Party plugin으로 IP 할당 지시를 내림 neutron-dhcp-agent와 Neutron 3rd Party Plugin은 지시 받은 작업 수행을 시작 neutron-server는 수시로 작업 상태를 Neutron database에 저장 할당된 IP를 인스턴스에서 사용 가능 ##Neutron의 네트워킹 프로세스##neutron-server에 의해 명령을 요청을 받음 plugin을 토대로 Messae queue를 통해 각 agent의 기능을 수행 이와 함께 SDN 서비스를 수행 ##Neutron network의 종류###네트워크의 종류 기능 Management network OpenStack 구성 요소 간의 내부 통신에 사용, 기본적으로 IP 주소는 데이터 센터 내에서만 사용이 가능 Guest network 클라우드 배포 내에서 인스턴스 데이터 통신에 사용되며, 네트워킹 플러그인 및 테넌트가 만든 가상 네트워크의 구성 선택에 따라 변동 External network 외부에서 인스턴스에 대한 엑세스를 위해 제공되는 네트워크 API network OpneStack API를 외부에 노출시키는 네트워크 ##Neutron과 VRRP, DVR##VRRP(Virtual Router Redundancy Protocl)로 랜에서 정적으로 설정된 기본 라우터를 사용할 때, 하나 이상의 백업 라우터를 사용하는 방법을 제공하는 인터넷 프로토콜</description>
    </item>
    
    <item>
      <title>Cinder</title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/cinder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/cinder/</guid>
      <description>블록 스토리지 서비스 : Cinder##블록 스토리지 서비스 : Cinder##Cinder은 bloack storage 서비스로 storage를 가상화 시켜 여러 스토리지로 사용하거나, 공유할 수 있는 서비스 Cinder은 하나 이상의 노드에서 실행되도록 설계되었으며, SQL 기반 중앙 데이터베이스를 사용 Cinder은 집계 시스템을 사용하여 여러 데이터 저장소로 이동이 가능 ##Cinder 구성요소###구성요소 역할 DB 데이터저장을 위한 SQL 데이터베이스로, 모든 구성요소에서 사용 Web Dashboard API와 통신할 수 있는 외부 인터페이스 api http 요청을 받고 명령을 변환하여 대기열 또는 http를 통해 다른 구성요소와 통신 Auth Manager 사용자/ 프로젝트/ 역할에 따라, 리소스의 대한 허용을 결정 Scheduler 볼륨을 가져올 호스트를 결정 volume 동적으로 부착 가능한 블록 장치를 관리 backup 블록 저장 장치의 백업을 관리 #외부 인터페이스인 dash-board에서 요청을 보내면, Cinder-api가 keyston에게 인증을 확인하기 위해 요청을 보낸다.</description>
    </item>
    
    <item>
      <title>Ceilometer</title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/ceilometer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/ceilometer/</guid>
      <description>리소스의 사용량과 부하를 관리하는 서비스 : Ceilometer##리소스의 사용량과 부하를 관리하는 서비스 : Ceilometer###Ceilometer은 각 서비스들의 예상 부하에 따라 추가 작업과 노드를 관리하는 역할을 수행 클라우드에서 배포된 자원의 사용량과 성능을 측정해 사용자가 자원 상태를 모니터링 할 수 있는 기능을 제공 Ceilomete는 리버티 버전에서 기존에 알람 서비스를 하던 부분을 aodh로 분리 #핵심 서비스 역할 Polling agent OpenStack 서비스를 폴링하고 미터를 빌드하도록 설계된 데몬 프로세스 Notification agent 메시지 큐에서 알림을 듣고 이벤트 및 샘플로 변환하며 파이프 라인 조치를 적용하도록 설계된 데몬 프로세스 #Ceilometer로 표준화 및 수집 된 데이터는 다양한 대상으로 전송 Gnocchi는 이러한 스토리지 및 쿼리를 최적화하기 위해 시계열 형식으로 측정 데이터를 캡처하도록 개발 Aodh는 사용자 정의 규칙이 깨졋을 때 경고를 보낼 수 있는 경보 서비스 Ceilomter은 이와 같이 리소스를 감시 및 예상하여 다른 작업을 수행할 수 있도록 하는 서비스를 의미 ##데이터 수집###위의 그림과 같이 Polling agents에서 각 서비스들의 API의 리소스를 읽어 데이터를 수집 Notification agents는 Polling agents에서 수집한 데이터들을 토대로 Ceilomter 서비스 혹은 Events로 변환하는 역할을 수행 ##데이터 처리###수집된 데이터를 토대로 Notification bus를 통해 엔드 포인트로 재분배하여 이벤트 및 샘플로 처리하느 역할을 수행 ##데이터 요청###데이터의 요청은 수집된 자료들을 토대로 서로 데이터를 주고 받으며, Polling agents라는 클라우드 컨트롤러에서 처리되며, 여러 플러그인을 사용하여 데이터를 통신합니다.</description>
    </item>
    
    <item>
      <title>Horizon</title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/horizon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/horizon/</guid>
      <description>외부 인터페이스 대시보드 서비스 : Horizon##외부 인터페이스 대시보드 서비스 : Horizon###사용자가 웹 UI로 인스턴스 생성, 삭제, 관리 등을 쉽고 빠르게 처리할 수 있게 지원 Horizon은 아파치 웹 서버를 사용 및 Python, Django 프레임워크로 구현 ##논리 아키텍처의 Horizon##논리 아키텍처에서 보이는 Horizon은 단순히 Horizon 자체 모듈만 존재 모든 서비스의 API와 연동해서 사용자에게 웹 서비스를 제공 </description>
    </item>
    
    <item>
      <title>Swift</title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/swift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/swift/</guid>
      <description>오브젝트 스토리지 관리 서비스 : Swift##다른 서비스와는 다르게 단독으로 구성되며, 클라우드 스토리지 서비스 ( ex : 네이버 클라우드 ) Swift 서비스는 Object Storage 서비스 중 하나 분산 구조의 Object 데이터의 저장 스토리지 체계로 구성 빠른 성능 및 대용량 저장공간이 필요 할 때 사용 동영상, 이미지, 디스크 이미지 등의 대용량, 비정형 데이터를 파일과 메타데이터로 저장하여 분산 관리 ##오브젝트 스토리지 관리 서비스 : Swift###Swift의 논리 아키텍처##구성요소 역할 swift-proxy-server 사용자가 서비스를 다루기 위한 REST API 서비스 swift-account-server 계정 정보 및 사용자 정보를 관리하고 각 컨테이너 별 정보를 관리하기 위한 데몬 프로세스 swift-container-server 사용자 게정의 컨테이너를 간리하는 서비스 swift-object-server 실제 데이터를 저장하고 관리하는 서비스 어카운트, 컨테이너는 별도의 메타데이터가 데이터베이스로 관리 오브젝트는 저장 공간에 직접 저장되는 방식으로 구성 swift-proxy-server는 오픈스택의 Object API를 제공 사용자는 API를 사용해 데이터를 사용 ##Swift의 논리적 구성 요소##Swift서비스는은 스토리지 공간 여러 개를 합쳐 하나의 커다란 공간으로 가상화하고, 그 안에서 사용자만의 별도 스토리지 공간이 있는 것처럼 다시 가상화</description>
    </item>
    
    <item>
      <title>Heat</title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/heat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/heat/</guid>
      <description>오케스트레이션 서비스 : Heat##Heat##Heat는 탬블릿과 Stack을 사용하여 자동으로 인스턴스의 리소스를 추가하거나 줄이는 서비스 오케스트레이션은 자원 관리, 배치, 정렬을 자동화하는 것 오케스트레이션은 인스턴스 생성에 대한 일련의 과정을 자동화해서 인프라를 쉽게 배포할 수 있도록 하는 탬플릿 기반 엔진 오케스트레이션에서 사용되는 템플릿 언어는 인프라, 서비스, 응용프로그램, 프로비저닝, 자동화 컴퓨팅, 스토리지, 네트워킹, 자동 스케일링 등에 사용 가능 #Heat의 논리 아키텍처###구성요소 역할 heat-api RPC heat 엔진에 전송해서 요청된 API를 처리한 REST API를 제공 heat-api-cfn AWS CloudFormation과 호환되는 AWS 타입의 Query API를 제공 heat-engine 템플릿을 생성하고, Consumer(API를 사용하려고 접근하는 애플리케이션이나 서비스)를 다시 이벤트로 제공하는 오케스트레이션의 주 작업을 수행 queue 각 서비스들이 통신을 하기 위한 서비스 #</description>
    </item>
    
    <item>
      <title>Trove</title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/trove/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/trove/</guid>
      <description>데이터베이스 서비스 : Trove#Trove는 관계형 데이터베이스 기능을 활용 클라우드 사용자와 데이터 베이스 관리자는 필요에 따라 Trove를 통해 데이터베이스 인스턴스를 제공, 관리 서비스 #Trove의 논리 아키텍처###구성요소 역할 python-troveclient 클라이언트에서 콘솔로 trove-api를 실행할 수 있게 지원 trove-api RESTful API 방식의 JSON을 지원, Trove인스턴스를 관리하고 프로비저닝 trove-taskmanager 인스턴스 프로비저닝을 지원, 라이프 사이클 관리 및 운영하는 작업을 수행 trove-conductor 호스트에서 실행되는 서비스로 호스트 정보를 업데이트 및 게스트 인스턴스 메시지를 수신 trove-guestagent 게스트 인스턴스 안에서 실행, 데이터 베이스 작업을 실행, 관리 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/sahara/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/sahara/</guid>
      <description>Sahara##데이터 프로세싱 서비스 Sahara#오픈스택 위 빅데이터를 다루기 위한 Hadoop이나 Spark를 쉽게 제공할 수 있게 도와주는 서비스 Sahara는 다음 요소로 구성 Auth: 클라이언트 인증 및 권한을 부여, 오픈스택 인증 서비스 Keystone과 통신 DAL: Data Access Layer의 약어로 데이터 엑세스 계층을 의미, DB의 내부 모델을 유지 Secure Storage Access Layer: 암호 및 개인 키 같은 인증 데이터를 안전한 저장소에 보관 Provisioning Engine: 오픈스택 컴퓨트 서비스 Nova, Heat, Cinder, Glance, Designate와 통신을 담당하는 구성 요소 Vendor Plugins: 프로비저닝된 VM에서 데이터 처리 프레임워크를 구성하고 시작하는 기능을 담당하는 플러그 가능한 메커니즘 EDP: Elastic Data Processing의 약어로 Sahara가 제공하는 클러스테에서 데이터 처리 작업을 예약하고 관리 REST API: REST HTTP 인터페이스로 Sahara 기능을 호출 Python Sahara Client: 다른 오픈스택 구성 요소와 마찬가지로 Sahara에는 자체 Python 클라이언트가 있음 Sahara Pages: Sahara용 GUI로 오픈스택 대시보드인 Horizon에 있음 </description>
    </item>
    
    <item>
      <title>Ironic</title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/ironic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/ironic/</guid>
      <description>Ironic##베어메탈 서비스 Ironic#물리적인 컴퓨터를 관리하고 자원을 제공하는 구성요소의 모음
Ironic은 구성에 따라 다음과 같은 다른 여러 오픈스택 서비스와 상호 작용할 수 있음
IPMI 메트릭을 사용하는 오픈스택 텔레미터 모듈(Ceilometer)
인증 요청 및 다른 오픈스택 서비스를 인증하는 오픈스택 인증 서비스(Keystone)
이미지 및 이미지 메타데이터를 검색할 수 있는 오픈스택 이미지 서비스(Glance)
DHCP 및 네트워크를 구성하는 오픈스택 네트워크 서비스(Neutron)
오픈스택 네트워크 서비스인 Nova는 베어메탈 서비스와 함꼐 작동하고, 인스턴스를 관리하는 사용자용 API를 제공</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/openstack/openstack/service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/openstack/openstack/service/</guid>
      <description>****##옵셔널 서비스#컴퓨트, 오브젝트 스토리지, 이미지, 인증, 네트워크, 블록 스토리지, 대시보드 서비스만으로도 오픈스택을 구축할 수 있음 텔레미터, 오케스트레이션, 데이터베이스 같은 서비스를 제대로 사용한다면 효율적인 클라우드 관리와 운영에 많은 도움을 많을 수 있음 메시징 서비스 Zaqar 공유 파일 시스템 서비스 Manila DNS 서비스 Designate </description>
    </item>
    
  </channel>
</rss>

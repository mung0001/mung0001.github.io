<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>왈왈왈</title>
    <link>https://mung0001.github.io/docs/cloud/aws/</link>
    <description>Recent content on 왈왈왈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://mung0001.github.io/docs/cloud/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/aws_computing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/aws_computing/</guid>
      <description>AWS 컴퓨팅 서비스   EC2 ( Elastic Compute Cloud )  EC2 공식 홈페이지 가상 컴퓨팅 서비스를 제공해주는 서버로 실제 물리서버와 똑같은 형태의 서비스를 제공 AMI를 통해 필요한 운영체제와 여러 소프트웨어를 쉽게 생성 가능 키 페어를 사용하여 로그린 정보 보호 SSH로 원격 연결이 가능 중지가 가능한 EBS 기반 인스턴스와 임시 스토리지를 제공하여 중지가 불가능한 Instance Store 기반 EC2로 분류 됨 ( 재부팅은 모두 가능 ) 인스턴스의 유형으로는 범용, 컴퓨팅 최적화, 메모리 최적화, 스토리지 최적화 등이 존재   EC2 상태의 종류  Pending : 인스턴스가 구동하기 위해 준비중인 상태, 요금 미청구 Runnung : 인스턴스가 실행하고 사용할 준비가 된 상태, 요금 청구 Stopping : 인스턴스가 중지 모드로 전환되려는 상태, 요금 미청구 Shutting-down : 인스턴스가 종료를 위해 준비중인 상태, 요금 미청구 Terminated : 인스턴스가 종료된 상태, 요금 미청구   EC2 구매옵션  On demand : 필요할 때 바로 생성하는 방식으로 1시간 단위로 과금이 이루어짐 ( 1분 사용시도 1시간 ) Spot : 경매방식의 인스턴스 기준가격보다 높은 가격 제시시 사용가능하며, 타인에 의해 불시로 종료되거나 정지될 수 있어 각종 테스트에 적합 Reserved : 12개월- 36개월 단위로 예약하여 사용하는 인스턴스로 On demandq비해 가격이 대폭 할인되며, 장기적으로 사용할 경우 효율이 좋지만, 예약된 인스턴스이기에 사용하지 않아도 과금이 부과되어짐    Lightsail  Lightsail Site AWS에서 VPS ( Virtual Private Server : 가상 사설 서버 ) 를 시작하는 가장 쉽고 빠른 방법 가상 사설 서버, 영구적인 스토리지, 네트워킹을 포함 클릭 한 번으로 모든 과정을 생략, 쉽게 VPS를 생성 및 관리 확장가능 및 타 AWS Services에 접근 가능 고가용성 어플리케이션 생성 가능 저렴하고, 비용의 예측이 보다 쉬움 완전히 사전구성되어 있는 서버 ( BluePrint )   Lightsail의 유료 Plan  월간 무료 데이터 허용량 초과시, 퍼블릭 IP 주소를 사용ㅎ여 요금 청구 Lightsail 스냅샷 비용 : 인스턴스 스냅샷 + 디스크 스냅샷 1시간 이상 인스턴스에 연결되어 있지 않은 고정 IP ( Elastic IP ) 무료로 주어지는 3백만 개의 쿼리를 초과하는 경우   Lightsail&amp;amp; EC2  Lightsail의 주 사용용도  웹 사이트 및 블로그 단순 앱 개발 및 테스트 환경 소수의 서버로 구성된 비즈니스 소프트웨어   EC2  빅데이터 분석 고성능 컴퓨팅 과학 분야 컴퓨팅 멀티&#39;티어 애플리케이션      ECS ( Elastic Container Service )  AWS의 Virtual Machine, VM (가상 머신) 가상의 컴퓨터, 하나의 호스트에 안에 또다른 호스트를 만들어 사용하는 것 CPU, Memory와 같은 주요 하드웨어 부품을 소프트웨어로 완전 재현해내어 기능을 흉내내게 하고(에뮬레이션), 격리된 실행 환경(OS)를 만듬 즉 하드웨어를 직접 가상화 클러스터에서 도커 컨테이너를 손쉽게 관리하기 위해 컨테이너 관리 서비스 클러스터는 Task(작업) 또는 서비스로 일컬어지는 컨테이너들의 집합 2가지 구성 요소로 시작 가능  EC2(Container Instance) : EC2를 생성하여 EC2 내에 Task(컨테이너가 수행할 작업) Fargate : EC2를 생성하거나 컨테이너를 실행하기 위한 Orchestration을 AWS가 맡아 하는 서비스로, 관리가 용이함   하나의 클러스터 내에 다수의 Task 혹은 컨테이너 인스턴스로 구성됨 또한 ELB, EBS 볼륨, VPC, IAM과 같은 기능을 사용하여 구성 가능 즉 ECS 각 작업의 권한, ECS 액세스를 IAM으로 조절하거나, EC2 유형의 컨테이너 인스턴스만이 OS에 액세스 가능한 특징 등을 갖게 됨 호스트의 OS(Operating System) 내에 또다른 실행환경의 OS가 존재함 윈도우 OS의 호스트 내에 리눅스, 우분투 등의 다양한 OS를 올릴 수 있음 다만 OS를 포함하기 때문에 용량을 많이 차지할 뿐더러, 사용자가 필요치 않는 기능까지 포함할 수 있으며 느림   Linux Container  ECS를 사용하는 목적이자 관리 대상 하드웨어가 아닌 OS를 가상화하여 커널을 공유하며 프로세스(컨테이너와 비슷)를 격리된 환경에서 실행하는 것 VM와 달리 달리 호스트의 OS에서 가상화를 실시하여, 이 OS 위에 프로세스들이 ‘컨테이너’로서 격리된 환경에서 실행됨 호스트의 입장에선 컨테이너는 프로세스에 불과하지만, 컨테이너 입장에서는 독립된 실행환경임 OS를 포함하지 않는만큼 가볍고, 하드웨어를 가상화하지 않기 때문에 빠름   Kernel  Operaintg System에서 가장 중요한 역할을 맡고 있는 핵심(核心) 커널이 각 프로세스(실행환경)에 하드웨어 자원(CPU 등)을 할당하고, 작업 스케쥴링(처리순서)를 담당하며, 프로세스 간 접근과 보안을 책임짐 과거에 커널이 없던 시절에도 컴퓨터는 존재할 수 있었으나 메모리를 초기화하기 위해서는 컴퓨터를 리부팅해야 하는 등, 자원관리/제어 주체의 필요성에 의해 탄생   Docker  앞서 설명한 Linux Container 기술에 근간을 두는 오픈소스 컨테이너 프로젝트 ‘Docker’라는 단어 자체가 ‘부두에서 일하는 노동자’, 즉 컨테이너를 관리하는 존재임을 뜻함 Linux Container 기술을 사용하는 솔루션이므로 별도의 OS를 설치하지 않고 컨테이너를 생성하여 애플리케이션을 실행함 컨테이너를 생성할 이미지(서비스에 필요한 리소스를 모아둔 최소한의 단위)를 기반으로 운영함 이미지만 가지고 있다면 어느 시점에서든 동일한 리소스의 컨테이너를 생성할 수 있음 그 밖에 컨테이너간의 연결, 다양한 API 제공 등의 기능을 보유    Lambda  Serverless Service 서버를 구축, 프로비져닝하고 필요한 패키지를 설치하는 등의 과정을 거치지 않고, 코드를 실행하는 서비스 사용자는 애플리케이션이나 백엔드 서비스를 관리할 필요 없이 코드를 실행할 수 있음 CloudWatch, ALB, DynamoDB 등을 트리거로 이용하여 특정 상황에서 코드를 실행시키고 것이 가능 API Gateway와 Lambda를 조합하여 요청별로 특정 코드를 수행하도록 구성 가능 15분을 초과하는 작업에 대해서는 Lambda 비적합   Lamda Function의 정의와 구성  코드를 실행하기 위해 호출할 수 있는 리소스 이벤트를 처리하는 코드, 계층, 트리거, 전달 대상 등으로 구성됨  함수코드 : 실제 호출되기 실행되는 코드, Runtime(코드 실행지원), IAM, VPC, Memory 등으로 구성됨 트리거 : 함수코드를 발동시키는 서비스(S3, SNS, SQS, DynamoDB, CloudWatch Event, Cloudwatch Log 등)   SNS의 메시지 구독 대상에 Lambda를 포함시키면, 메시지 발송시 Lambda가 이를 전달받고 함수코드 실행  전달대상 : 함수가 비동기식으로 호출되거나, 레코드를 처리한 경우 전달될 대상   SNS, SQS, 또다른 Lambda, EventBridge 이벤트 버스로 전달가능 NS로부터 메시지를 전달받아 코드를 처리하고 이를 SQS로 보내 메시지 대기열에 적재할 수 있음   EC2 vs Lambda  EC2 사용시 프로비져닝, 운영 체제, 네트워크 세부 설정, 보안 설정 등을 사용자가 원하는 방향으로 지정 가능 Lambda 사용시 프로비져닝 필요없이 AWS가 모니터링, 프로비져닝, 보안패치 적용, 코드 배포를 모두 수행함    Batch Batch Group  클러스터 : 인스턴스를 AZ 내에서 근접하게 배치, 결합된 노드 간 낮은 지연 시간의 네트워크 달성 가능 파티션: 인스턴스가 담긴 그룹을 논리 세그먼트로 나누어 각 파티션에 배치, 최대 7개의 파티션을 가질 수 있으며, 각 파티션은 자체 랙 세트를 보유하고 자체 네트워크 전원을 보유 분산: 파티션이 논리 세그먼트로 분리된 인스턴스 그룹인 것과 달리 분산은 인스턴스 개체 하나가 자체 랙에 분산 배치됨, AZ당 최대 7개의 인스턴스 배치 가능    Elastic Beanstalk </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/aws_migrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/aws_migrate/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/aws_developer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/aws_developer/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/aws_management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/aws_management/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/aws_analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/aws_analysis/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/auto-scaling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/auto-scaling/</guid>
      <description>Auto Scaling  Auto Scaling  EC2 인스턴스를 자동으로 시작하거나 종료하여 애플리케이션 로드를 처리하기에 적절한 수의 EC를 유지할 수 있도록 하는 서비스 사용자가 정의하는 조건에 따라 EC2 개수를 자동으로 확장 또는 축소가 가능 모니터링을 통해 비정상 인스턴스를 탐지하고 교체할 수 있음 수요가 급증할 경우 EC2 수를 자동으로 늘려 성능을 유지하고 수요가 적을 경우 수를 줄여 비용을 절감 ELB의 대상그룹을 Auto Scaling Group( ASG )에 포함시켜 자동생성된 EC2로 하여금 트래픽 부하분산을 하도록 설정가능 수요 변화가 예측 나응한 경우 예약된 일정을 통해 정해싲 시간에 늘리거나 줄이도록 설정이 가능 ASG 내 손상된 인스턴스가 발견될 경우, Auto Scaling은 이를 자동으로 종료하고 새로운 인스턴스로 교체  ELB를 사용하는 경우, ELB가 손상된 인스턴스를 트래픽 요청 대상에서 분리시킨 후, Auto Scaling이 이를 새로운 인스턴스로 교체   비정상 서버 탐지 후 Auto Scaling이 새로운 인스턴스를 In Service 상태를 만들기까지 5분 이내 소요   AWS Auto Scaling 그룹.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/aws-%EA%B3%84%EC%A0%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/aws-%EA%B3%84%EC%A0%95/</guid>
      <description>AWS 계정    AWS의 계정   AWS 상에서 공유하는 리소스 관리단위 단일계정과 복수계정을 활요할 수 있으며, 비교 관점에 따라 각각 운용성과 보안의 장단점이 존재   단일 계정  단순함이 장점이며, 리소스가 집약되어 있기에 초보자가 사용하기 적합 단, 여러 개의 환경을 구축하거나 운용할 때는 문제가 발생, 운용 현장의 경우에는 개발 환경만 이용 가능하고, 작업 권한이 없는 사용자가 필요 AWS는 IAM을 사용해 사용자에게 권한을 제어하고 있지만, 서버 단위 권한을 부여해야 할 경우에는 비효율적   복수 계정  복수 계쩡의 장점은 환경 단위로 계정을 나눌 수 있다는 것으로, 개발용 계정과 운영용 계정을 따로 분리해서 각기 이용하는 사용자를 나눌 수 있음 운용 측면에서 매우 큰 장점이라 할 수 있음     AWS의 감사 추적    AWS의 감사 추적  감사추적이란 시스템의 작업 이력 및 상태를 감사자가 추적할 수 있는 기록 감사추적은 크게 AWS 자체의 작업 상태와 이력, AWS 내의 리소스로 나뉘어짐   AWS 자체의 작업 상태와 이력  AWS는 브라우저로 관리 콘솔 화면 또는 API를 이용해서 작업을 진행 AWS 자체 감사 추적의 기본은 AWS Config와 AWS CloudTrail Service가 있으며 이 두가지 서비스를 통해 AWS 서비스의 감사 추적 기록을 취득할 수 있음  Config  Config.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/aws_database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/aws_database/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/aws_network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/aws_network/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/aws_security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/aws_security/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/aws_storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/aws_storage/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/aws%EC%9A%94%EA%B8%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/aws%EC%9A%94%EA%B8%88/</guid>
      <description>AWS 요금   AWS의 요금  AWS는 기본적으로 종량 요금제이지만 일부는 무료로 이용이 가능 요금 체계는 서비스 마다 다르지만, 원칙이 존재   AWS의 요금체계  AWS는 기본적으로 종량 요금제 ( 사용한 만큼 금액을 지불하는 방식 ) 종량 과금에는 시간 기준, 횟수 기준, 용량 기준의 3가지 종류가 있으며, 이 가운데 하나 혹은 조합의 이해 요금이 측정  EC2의 경우 CPU, 메모리 등의 조합으로 한 시간단위로 이용량이 결정되어짐      네트워크 과금의 방식  네트워크 과금의 사고 방법에는 수신과 송신이 존재 외부 네트워크에서 AWS로 통신을 수신, AWS에서 외부 네트워크로 송신이라 하며 수신은 기본적으로 무료이지만 송신에 대해서는 1GB당 얼마라는 계산 방식으로 과금이 측정되어짐 수신은 무료이므로 온프레미스 서버의 데이터를 AWS에 백업하는 방식은 통신료가 무료이며, 데이터 복원 등의 이유로 그 데이터를 온프레미스로 송신할 때만 과금이 발생      횟수 기준에 따른 방식  횟수 기준에 따른 과금은 API 호출 횟수를 기준으로 계산  Amazon SQS라는 큐 서비스는 표준 큐의 경우 100만 건의 API 요청에 $0.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/vpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/vpc/</guid>
      <description>VPC ( Virtual Private Cloud )    Virtual Private Cloud ( VPC )  AWS 상에 프라이빗 네트워크 공간을 구축할 수 있는 서비스 VPC를 이용하면 논리적인 네트워크 분리가 가능하고 라우팅 테이블과 각종 게이트웨이의 설정이 가능 AWS의 계정 전용 가상 네트워크 서비스 VPC 내에서 각종 리소스 ( EC2, RDS, ELB 등 )을 시작할 수 있으며 다른 가상 네트워크와 논리적으로 분리되어 있음 S3, Cloudfront 등은 다른 VPC 서비스로 VPC 내에서 생성되지 않음 각 Region 별로 VPC 가 다수 존재할 수 있음 VPC 하나의 사설 IP 대역을 보유하고, 서브넷을 생성하며 사설IP 대역 일부를 나누어 줄 수 있음 허용된 IP 블록 크기는 /16( IP 65536개 )- / 28 (IP 16개 ) 권고하는 VPC CIDR 블록 ( 사설 IP 대역과 동일 )    0- 10.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/%EB%B0%B0%ED%8F%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/%EB%B0%B0%ED%8F%AC/</guid>
      <description>배포 ( Deploy )    배포 ( Deploy )  무중단 배포  서비스를 배포시 ( 버전 업데이트 등 ) 서버를 중단하지 않고 배포( 업데이트 )를 진행하는 것   중단배포( Ice breaking )  서비스를 배포시 서버를 중단하고 배포를 진행하는 것 ( 서버 정기 정검 )   In-Place Deployment  In-Place Deployment... In-Place Deployment    한 개의 로드밸런서가 4개의 서버로 요청을 보내고 있으며, 현재 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/%EC%96%91%EC%8B%9D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/%EC%96%91%EC%8B%9D/</guid>
      <description>AWS 용어 정리    AWS 기본 용어  AWS 기본 용어... Region
  AWS에서 사용하는 일종의 IDC의 집합으로 거의 모든 클라우드 서비스가 탑재되는 곳으로 다수의 Availability Zone( 가용영역 )으로 구성됨
  한 곳의 AZ의 기능이 마비되어도 다른 AZ가 기능을 수행
  전 세계 주요 대도시에는 분포되어있음
  AWS 사용자는 각 Region 마다 별도의 클라우드 망을 구축할 수 있음
   On-premise</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/cloud/aws/%EC%9A%B4%EC%98%81-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%99%B8%EB%B6%80%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/cloud/aws/%EC%9A%B4%EC%98%81-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%99%B8%EB%B6%80%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1/</guid>
      <description>AWS의 외부환경 구성  DNS ( Domain Name System )   DNS란 도메인네임서버를 일컫으며, 인터넷은 서버들을 유일하게 구분할 수 있는 IP주소 체계를 보다 인간이 읽게 쉽게 하기 위해 계발되었다. 흔히 우리가 알고 있는 naver.com, google.com, daum.net 모두 DNS이다. AWS에서는 Route 53을 활용해 도메인 서비스를 지원한다.   AWS Route 53    AWS의 DNS 서비스 ( 도메인 등록, DNS 라우팅, Health check ) 도메인 등록시 약 12.000원 정도 지불해야 하며, 최대 3일 정도 걸림 해당 도메인을 AWS 내 서비스 ( EC2, ELB, S3 등 ) 와 연결 할 수 있으며 AWS 외 요소들과도 연결 가능 도메인 생성 후 레코드 세트를 생성하여 하위 도메인을 등록할 수 있음 레코드 세트 등록시에는 IP 주소, 도메인, ‘Alias’ 등을 지정하여 쿼리를 라우팅할 수 있음   Route 53의 라우팅 정책  Simple : 동일 레코드 내에 다수의 IP를 지정하여 라우팅 가능, 값을 다수 지정한 경우 무작위로 반환함 Weighted : Region 별 부하 분산 가능, 각 가중치를 가진 동일한 이름의 A 레코드를 만들어 IP를 다르게 줌 Latency-based : 지연 시간이 가장 적은, 즉 응답시간이 가장 빠른 리전으로 쿼리를 요청 Failover : A/S 설정에서 사용됨, Main과 DR로 나누어 Main 장애시 DR로 쿼리 Geolocation : 각 지역을 기반으로 가장 가까운 리전으로 쿼리 수행, 레코드 생성시 지역을 지정할 수 있음 Geo-proximity : Traffic flow를 이용한 사용자 정의 DNS 쿼리 생성 가능 Multi-value answer : 다수의 IP를 지정한다는 것은 simpl와 비슷하지만 health check가 가능 ( 실패시 자동 Failover )     AWS Route 사용방법.</description>
    </item>
    
  </channel>
</rss>
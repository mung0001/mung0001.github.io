<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>뭉게뭉게</title>
    <link>https://mung0001.github.io/docs/programing/web/django/</link>
    <description>Recent content on 뭉게뭉게</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    
	<atom:link href="https://mung0001.github.io/docs/programing/web/django/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/programing/web/django/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/web/django/basic/</guid>
      <description>Django    Django   파이썬으로 만들어진 무료 오픈소스 웹 애플리케이션 프레임워크 모델&amp;ndash;뷰&amp;ndash;컨트롤러 ( MVC ) 패턴을 따름 장고는 컴포넌트의 재사용 및 플러그인화 가능성을, 빠른 개발을 위해 계발 웹 개발 시 많이 사용되며, 번거로운 요소들을 새로 개발할 필요 없이 내장된 기능만을 이용해 빠른 개발이 가능   MTV ( Model-Template-View )    Model
 데이터에 관한 정보를 담으며, 데이터에 대한 접근, 검증, 작동과 데이터 사이의 관계를 정의하며, 각각의 모델은 데이터베이스에서 테이블에 해당    Template</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/programing/web/django/django/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/web/django/django/</guid>
      <description>Djnago  Djnago 설치  설치환경   Ubuntu 18.04
  mysql 5.7
  python 3.6.8
  pip3 9.0.3
  django 2.1
   Ubuntu 설정   apt update -y
  apt upgrade -y
  apt install python3 -y
  apt install python3-pip -y
  apt install gcc -y
  apt install python-dev -y
  apt install libmysqlclient-dev -y</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/programing/web/django/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/web/django/test/</guid>
      <description>Django Project   Django Boardapp project  모델을 구성하기에 앞서 django에서 지원하는 admin을 사용하기 위해 기본적인 database를 받아온다.
(ve) $ ./manage.py migrate DB 테이블 생성
# User tableALTER TABLE auth_userADD COLUMN phone VARCHAR(45) NOT NULL AFTER date_joined,ADD COLUMN date_of_birth DATETIME NOT NULL AFTER phone,CHANGE COLUMN date_joined date_joined DATETIME NOT NULL AFTER email,CHANGE COLUMN first_name first_name VARCHAR(30) NULL AFTER is_active,CHANGE COLUMN is_staff is_staff TINYINT(1) NULL,CHANGE COLUMN is_active is_active TINYINT(1) NULL;# Board table## board_categoriescreate table board_categories(id int(10) not null auto_increment,category_type varchar(45) not null default &amp;#39;Normal&amp;#39;,category_code varchar(100) not null,category_name varchar(100) not null,category_desc varchar(200) not null,list_count int(10) default &amp;#39;20&amp;#39;,authority int(1) default &amp;#39;0&amp;#39;,creation_date datetime default current_timestamp,last_update_date datetime default null,primary key(id))engine=InnoDB default CHARSET=utf8;## boardscreate table boards(id int(10) not null auto_increment,category_id int(10) not null,user_id int(10) not null,title varchar(300) not null,content text not null,registered_date datetime default current_timestamp,last_update_date datetime default null,view_count int(10) default &amp;#39;0&amp;#39;,image varchar(255) default null,primary key(id),key board_category_fk_idx(category_id),key board_user_fk_idx(user_id),constraint board_category_fk foreign key(category_id) references board_categories(id) on delete no action on update no action,constraint board_user_fk foreign key(user_id) references auth_user(id) on delete no action on update no action)engine=InnoDB default CHARSET=utf8;## board_repliescreate table board_replies(id int(10) not null auto_increment,article_id int(10) not null,user_id int(10) not null,`level` tinyint(1) default &amp;#39;1&amp;#39;,content text not null,reference_reply_id int(10) default &amp;#39;0&amp;#39;,registered_date datetime default current_timestamp,last_update_date datetime default null,primary key(id),key user_reply_fk_idx(user_id),key article_reply_fk_idx(article_id),constraint article_reply_fk foreign key(article_id) references boards(id) on delete no action on update no action,constraint user_reply_fk foreign key(user_id) references auth_user(id) on delete no action on update no action)engine=InnoDB default CHARSET=utf8;## board_likescreate table board_likes(id int(10) not null auto_increment,article_id int(10) not null,user_id int(11) not null,registered_date datetime default current_timestamp,primary key(id),key like_article_fk_idx(article_id),key like_user_fk_idx(user_id),constraint like_article_fk foreign key(article_id) references boards(id) on delete no action on update no action,constraint like_user_fk foreign key(user_id) references auth_user(id) on delete no action on update no action)engine=InnoDB default CHARSET=utf8;pip3 install Pillow</description>
    </item>
    
  </channel>
</rss>
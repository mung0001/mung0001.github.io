<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell Script on 뭉게뭉게</title>
    <link>https://mung0001.github.io/docs/programing/shell/</link>
    <description>Recent content in Shell Script on 뭉게뭉게</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    
	<atom:link href="https://mung0001.github.io/docs/programing/shell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shell Script란?</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell-1/</guid>
      <description>Shell Programming    Shell Script의 개요   UNIX/ Linux 소개 및 특징   UNIX   1969년 AT&amp;amp;T 벨연구소의 직원이 켄 톰슨, 데니스 리치, 더글라스 매클로리 등이 최초로 개발하였으며, 이후 C언어로 재작성되어 다양한 플랫폼에 이식될 수 있도록 보완되었다
  벨연구소는 대학과 연구기관에 UNIX를 활용할 수 있도록 라이선스를 제공하였으며, 버클리 대학교에서는 UNIX에 네트워크 프로토콜인 TCP/IP 등 다양한 기능을 보강하여 BSD 배포본을 제작하고 이후 파생되는 많은 UNIX에 영향을 끼쳤다.</description>
    </item>
    
    <item>
      <title>UNIX/ Linux 개념과 명령어</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell-2/</guid>
      <description>Shell Programming  UNIX/ Linux 기본 명령어와 개념  Redirection &amp;amp; Pipes  $ &amp;lt;File Descriptor&amp;gt; &amp;lt;PATH&amp;gt; &amp;lt;Redirection&amp;gt;$ &amp;lt;File Descriptor&amp;gt; &amp;lt;PATH&amp;gt; &amp;lt;Redirection&amp;gt; &amp;lt;Pipe&amp;gt; &amp;lt;File Descriptor&amp;gt; ...ex) $ cat /log/var/message | grep ERR# cat = &amp;lt;File Descripotr&amp;gt;# /log/var/message = &amp;lt;PATH&amp;gt;# | = &amp;lt;Redirection&amp;gt;  File Descriptor   Process가 File이나 Device를 access 하기 위해 사용
  Standard File Descriptor
  stdin(standard input) : 표준 입력 (예시 : 키보드)</description>
    </item>
    
    <item>
      <title>Shell Script 문법</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell-3/</guid>
      <description>Shell Programming    Shell 문법  Shell 변수    Shell 에서 변수는 사용할 때 선언
  변수에 초기 값을 대입할 때 변수를 만들게 된다.
  모든 변수는 문자열로 간주
  숫자 값을 가지는 경우에도 문자열로 간주
  변수는 대소문자가 구별 (Linux 시스템의 특성)
  변수에 값이 부여될 때를 제외하고, 변수를 사용할 경우 변수 앞에 &amp;lsquo;$&#39;의 표시를 붙여야 한다.
  변수에 부여된 값은 echo 명령을 통해 확인 가능</description>
    </item>
    
    <item>
      <title>UNIX/ Linux 시스템 관리</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell-4/</guid>
      <description>Shell Programming    UNIX/ Linux 시스템 관리         #</description>
    </item>
    
    <item>
      <title>Shell Script System Management</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell-5/</guid>
      <description>Shell Programming    Shell System Management         #</description>
    </item>
    
    <item>
      <title>Shell Script System Security</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell-6/</guid>
      <description>Shell Programming    Shell Script System Security         #</description>
    </item>
    
    <item>
      <title>Shell Customizing</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell-7/</guid>
      <description>Shell Programming    Customizing         #</description>
    </item>
    
    <item>
      <title>Shell Basics</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell01/</guid>
      <description>Shell Programming    Shell Basics    Shell의 기본적인 역할은 사용자에게 명령을 입력받아 시행하는 것입니다.
  Sgell은 명령문을 작성할 때 사용할 수 있도록 많은 기능을 제공하므로 실제 명령이 실행되기 전에 Shell에 의해 해석 단계를 거치게 됩니다.
     파일명    Shell에서 제일 처음이자 중요한 개념 중 하나가 파일명입니다.
  파일명은 곧 명령을 실행할 때 사용되는 이름과 같으며, 리눅스에서 사용하고 있는 파일시스템에서는 파일 이름을 NUL, / 두 문자를 제외하고 전부 허용한다고 합니다.</description>
    </item>
    
    <item>
      <title>Quotes</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell02/</guid>
      <description>Shell Programming    Quotes    Shell 중요한 핵심 개념 중 하나는 quotes라 할 수 있습니다.
  shell에서 quotes는 숫자나 스트링 값을 구분하기 위한 용도로는 사용하지 않습니다.
  1234, &amp;ldquo;123&amp;rdquo;, &amp;lsquo;123&#39;은 모두 동일하며, abc, &amp;ldquo;abc&amp;rdquo;, &amp;lsquo;abc&amp;rsquo; 또한 차이가 없고 모두 스트링 문자열입니다.
  Shell 에서 quotes는 다음과 같은 용도로 사용됩니다.
  공백으로 분리되어 여러 개의 스트링을 하나의 인수로 만들 때(sed, awk 스크립트를 quotes을 이용해 작성하는 이유가 하나의 인수로 만들기 위해서입니다.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell03/</guid>
      <description>Shell Programming    Variables    변수 이름은 알파벳 (대, 소문자, 숫자, _)로 만들 수 있으며 이름의 첫 문자로 숫자가 올 수는 없다.
  변수이름을 대문자로 사용할 때는 Shell 환경변수와 증복되지 않도록 주의해야 하며, 생성한 변수는 subshell이나 source한 스크립트 내에서 별다른 설정 없이 사용할 수 있으나 child process에서도 사용하려면 export를 수행해야 한다.
  Myfile=MyfileFIRE_PREFIX=$Myfile.splitFIRE_PREFIX=$Myfile_._split# &amp;#39;.&amp;#39; or &amp;#39;_&amp;#39;은 변수 이름을 구성하는 데 사용되지 않으므로 위와 같이 사용이 가능# 결과적으로 FILE_PREFIX 변수 값은 &amp;#39;myfile.</description>
    </item>
    
    <item>
      <title>Fucnctions</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell04/</guid>
      <description>Shell Programming    Functions    {;}, ()를 이용해 명령 그룹을 만들게 되면 같은 context에서 실행이 된다. 이것은 명령 그룹전체가 하나의 명령처럼 실행되는 것과 같은 효과가 있다.
  앞에 함수명을 붙여서 함수정의를 하게 되면 일반 명령과 동일하게 사용될 수 있다.
  {;}은 현재 shell에서 ()는 subshell에서 실행되므로 보통 함수를 정의할 때 {;}을 사용하지만 필요하다면 ()을 사용할 수도 있다.
  $ echo hello world | read var; echo &amp;#34;$var&amp;#34;# 파이프로 인해 subshell에서 실행되어 &amp;#34;$var&amp;#34;는 값이 표시되지 않는다.</description>
    </item>
    
    <item>
      <title>Fucnctions</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell09/</guid>
      <description>Shell Programming    Functions    {;}, ()를 이용해 명령 그룹을 만들게 되면 같은 context에서 실행이 된다. 이것은 명령 그룹전체가 하나의 명령처럼 실행되는 것과 같은 효과가 있다.
  앞에 함수명을 붙여서 함수정의를 하게 되면 일반 명령과 동일하게 사용될 수 있다.
  {;}은 현재 shell에서 ()는 subshell에서 실행되므로 보통 함수를 정의할 때 {;}을 사용하지만 필요하다면 ()을 사용할 수도 있다.
  $ echo hello world | read var; echo &amp;#34;$var&amp;#34;# 파이프로 인해 subshell에서 실행되어 &amp;#34;$var&amp;#34;는 값이 표시되지 않는다.</description>
    </item>
    
    <item>
      <title>Exit Status</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell05/</guid>
      <description>Shell Programming    Exit Status    터미널에서 명령을 단계적으로 실행해서 작업을 완성할 때는 여태까지 실행한 명령들이 모두 정상적으로 완료되었기 때문이다.
  만약 특정 과정에서 오류가 발생했는지, 정상적으로 완료되었는 지를 확인해야하는 데, 이를 판단할 수 있는 방법이 종료 상태 값을 확인하는 방법으로, 실제 shell에서의 핵심 개념중 하나가 종료 상태 값(Exit status)이다.
  Shell 에서 실행되는 모든 명령은 빠짐없이 종료 상태 값을 반환하며, if while until &amp;amp;&amp;amp; || 모두 종료 상태 값을 사용해서 참, 거짓을 판단한다.</description>
    </item>
    
    <item>
      <title>Interactive</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell06/</guid>
      <description>Shell Programming    Interactive    Shell이 실행되는 환경은 두가지로 사용자로부터 프로프트를 통해 직접 명령을 입력받아 실행시키는 interactive shell과 script 파일을 실행하는 것과 같은 non-interacgtive shell이 있다.
  alais, job control과 같은 기능은 기본적으로 interactive shell에서 사용하기 위한 것으로 script를 실행할 때는 disable 된다.
  case $- in*i*) echo interactive shell ;;*) echo non-interactive shell ;;esac# $- 변수는 set 명령에 의해 설정되어 있는 option flage를 담고 있다.</description>
    </item>
    
    <item>
      <title>etc</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell07/</guid>
      <description>Shell Programming    etc  /proc    proc 디렉토리는 현재 시스템에서 실행되는 프로세스들에 대한 정보를 제공하기 위해 OS에서 제공하는 가상의 파일 시스템으로, 실제 파일 시스템이 존재하는 것이 아니다.
  커널이 가지고 있는 정보는 사용자 프로그램에서 직접 접근할 수가 없으므로 system call을 통해 제공하는 방법도 생각해 볼 수 있겠으나 프로스세그 가지는 자료구조를 생각할 때 사용자가 쉽게 사용할 수 있도록 메모리상에 가상의 파일 시스템을 만들어 구조적으로 제공하는 역할을 수행한다.</description>
    </item>
    
    <item>
      <title>Commands</title>
      <link>https://mung0001.github.io/docs/programing/shell/shell08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/programing/shell/shell08/</guid>
      <description>Shell Programming    Commands  외부명령   /usr/bin/find 명령과 같이 시스템 디렉토리에 위치한 명령드롤, 여기에는 ELF 바이너리 실행파일뿐만 아닌, shell 스크립트, perl 스크립트, python 스크립트와 같은 텍스트 실행파일도 다수 포함되어 있으며 GNU coreutils 패키지에는 textutils, shelutils, fileutils 명령들이 포함되어 있다.  $ file /bin/* /usr/bin/* | grep -ic &amp;#34;text executable&amp;#34;643  #</description>
    </item>
    
  </channel>
</rss>
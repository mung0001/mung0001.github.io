<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>뭉게뭉게</title>
    <link>https://mung0001.github.io/</link>
    <description>Recent content on 뭉게뭉게</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Sat, 12 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://mung0001.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-04/</guid>
      <description>****          ****            </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-05/</guid>
      <description>****          ****            </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-06/</guid>
      <description>****          ****            </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-07/</guid>
      <description>****          ****            </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-08/</guid>
      <description>****          ****            </description>
    </item>
    
    <item>
      <title>1장 AWS의 핵심 서비스</title>
      <link>https://mung0001.github.io/docs/aws/awssaa/saa-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awssaa/saa-1/</guid>
      <description>SAA 요약정리  정리를 들어가기 전 핵심요소  자격 시험의 합격과 실패는 현장에서의 실무 경험과 실습 중심의 학습, 시험에 필요한 세부적인 정보와 숫자를 얼마나 잘 기억하는지에 달려 있다. AWS SAA는 핵심 AWS 서비스 구성 요소와 운영은 물론 서비스 간의 상호작용 방식도 이해가 필요 기본적인 공부는 Amazon의 공식문서 및 여러 실습 경험을 필요로 한다.    AWS SAA 참고자료      시험영역 출제 비율     1.</description>
    </item>
    
    <item>
      <title>AWS 시작하기</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/start/</guid>
      <description>AWS 시작히기    AWS 계정 생성    AWS 서비스를 이용하기 위한 계정을 생성하고, MFA를 사용하여 보안을 강화하는 방법에 대해 알아보도록 하겠습니다.     -먼저 AWS을 통해 AWS에 접속합니다.
    AWS 계정 새로 만들기를 선택합니다.      다음 항목들을 기입 후, 계정 만들기를 선택합니다.      프로페셔널과 개인 중 맞는 항목을 선택 후, 아래 항목들을 기입합니다. 영어 주소를 모를시 Link를 참조하세요.</description>
    </item>
    
    <item>
      <title>Azure </title>
      <link>https://mung0001.github.io/docs/azure/azuretraining/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/azuretraining/base/</guid>
      <description>****   ****         ****        </description>
    </item>
    
    <item>
      <title>CloudComputing과 AWS</title>
      <link>https://mung0001.github.io/docs/aws/amazonwebservice/aws%EB%9E%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/amazonwebservice/aws%EB%9E%80/</guid>
      <description>AWS 란?   Amazon Web Services ( AWS )  AWS  AWS는 Amazon에서 제공하는 클라우드 서비스로, 네트워크를 기반으로 가상 컴퓨터와 스토리지를 비롯한 다양한 서비스를 제공 합니다.    Cloud Computing 와 AWS    AWS에 대해 공부하기 앞서, 우리는 Cloud Computing이 무엇이고, 어떠한 개념에 대해 알고 있어야 합니다. 그 이유는 AWS가 클라우드 컴퓨티 그 자체이기 때문이죠.
  클라우드 컴퓨팅 ( Cloud Computing : 이하 클라우드 )은 컴퓨터 리소스의 이용 형태로, 클라우드는 컴퓨터의 계산 리소스, 스토리지, 애플리케이션 처리를 네트워크 기반 서비스로 제공하는 것을 뜻 합니다.</description>
    </item>
    
    <item>
      <title>Django Install</title>
      <link>https://mung0001.github.io/docs/development/web/django/django/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/web/django/django/</guid>
      <description>Djnago  Djnago 설치  설치환경   Ubuntu 18.04
  mysql 5.7
  python 3.6.8
  pip3 9.0.3
  django 2.1
   Ubuntu 설정   apt update -y
  apt upgrade -y
  apt install python3 -y
  apt install python3-pip -y
  apt install gcc -y
  apt install python-dev -y
  apt install libmysqlclient-dev -y</description>
    </item>
    
    <item>
      <title>Django란?</title>
      <link>https://mung0001.github.io/docs/development/web/django/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/web/django/basic/</guid>
      <description>Django    Django   파이썬으로 만들어진 무료 오픈소스 웹 애플리케이션 프레임워크 모델&amp;ndash;뷰&amp;ndash;컨트롤러 ( MVC ) 패턴을 따름 장고는 컴포넌트의 재사용 및 플러그인화 가능성을, 빠른 개발을 위해 계발 웹 개발 시 많이 사용되며, 번거로운 요소들을 새로 개발할 필요 없이 내장된 기능만을 이용해 빠른 개발이 가능   MTV ( Model-Template-View )    Model
 데이터에 관한 정보를 담으며, 데이터에 대한 접근, 검증, 작동과 데이터 사이의 관계를 정의하며, 각각의 모델은 데이터베이스에서 테이블에 해당    Template</description>
    </item>
    
    <item>
      <title>Docker란?</title>
      <link>https://mung0001.github.io/docs/docker/docker/docker/docker-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/docker/docker-1/</guid>
      <description>Docker란?    Docker      도커란 컨테이너 기반의 오픈소스 가상화 플랫폼으로 컨테이너형 가상화 기술을 구현하기 위해 상주 어플리케이션과 이 어플리케이션을 조작하기 위한 명령행 도구로 구성되는 프로덕트입니다.
  컨테이너라 하면 배에 실는 네모난 화물 수송용 박스를 생각할 수 있는데 각각의 컨테이너 안에는 다양한 화물을 넣을 수 있고 규격화되어 컨테이너선이나 트레일러등 다양한 운송수단으로 쉽게 옮길 수 있습니다.
  서버에서 이야기하는 컨테이너도 이와 비슷한데 다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해줍니다.</description>
    </item>
    
    <item>
      <title>Docker의 기능</title>
      <link>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-01/</guid>
      <description>Docker의 기능    이미지를 만드는 기능 ( Build )    Docker는 애플리케이션의 실행에 필요한 프로그램 본체, 라이브러리, 미들웨어, OS나 네트워크 설정등을 모아 DOcker Image를 생성
  Dockerfile을 통해 자동으로 이미지 생성이 가능
  Docker Image는 겹처서 사용이 가능
     Docker 이미지를 공유하는 기능 ( Ship )    Docker Imamge는 Docker Hub에서 공유를 받거나 받을 수 있음
  Docker HUb는 GitHub나 Bitbucket과 연계가 가능하여 자동화가 가능</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://mung0001.github.io/docs/development/git/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/git/git/</guid>
      <description>Git과 Github  깃 ( git )    Git 공식 홈페이지 에서 다운로드
  형상 관리 도구 ( Configuration Management Tool )인 분산형 관리 시스템
  무료, 공개소프트웨어 서비스
  소스코드를 주고 받을 필요 없이, 같은 파일을 여러 명이 동시에 작업하는 병렬 개발이 가능
  분산 버전관리이기 때문에 인터넷이 연결되지 않은 곳에서도 개발을 진행할 수 있으며, 중앙 저장소가 날라가벌도 다시 원상복구가 가능
     git의 특징   버전관리   깃에서 버전이란 문서를 수정하고 저장할 때마다 생기는 지점</description>
    </item>
    
    <item>
      <title>Golang 기본</title>
      <link>https://mung0001.github.io/docs/development/golang/golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/golang/golang/</guid>
      <description>Golang 설치  Go 공식 홈페이지에서 OS맞는 패키지를 설치   Golang Study 사이트  Go 기본 메뉴얼 가장 빨리 만나는 Go 언어 Go-tour    Go 기초 문법  중괄호 표기법  Go는 문법의 작성 스타일을 강제 Go의 대표적인 문법으로는 { } ( 중괄호 ) 표기 법이 있음 즉, 함수, 조건문, 반복문 등을 시작할 때는 반드시 같은 줄에서 시작   ; 세미콜론  마지막 구문의 세미클론을 생략 한 줄에 여러 구문을 사용할 때에는 세미콜론을 사용하여 나눔  fmt.</description>
    </item>
    
    <item>
      <title>Infra engineer란?</title>
      <link>https://mung0001.github.io/docs/infra/infra/infra01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/infra/infra/infra01/</guid>
      <description>Infra engineer    Infra enginner의 정의와 역할    Infra enginner란 Infra(infrastructure)와 enginner의 합성어로 IT의 기본 틀을 잡는 역할을 수행한다고 할 수 있습니다.
  Architecture와 Infra의 차이는 아키텍처는 컴퓨터와 소프트웨어의 호환성, 더 나아가 최근에는 기업에 적합한 클라우드 컴퓨팅을 설계해준다 할 수 있으며, Infra enginner은 기본적인 하드웨어의 세팅(IDC, VDI)을 주로 다룬다고 할 수 있습니다.
  하지만 최근 클라우드 시장이 급격하게 성장함에 따라, 사실상 Infra enginner의 영역이 줄어들고 있는 것은 사실이지만, 대부분의 IT시장의 기본이 되는 만큼 공부할 가치가 있습니다.</description>
    </item>
    
    <item>
      <title>NCP</title>
      <link>https://mung0001.github.io/docs/ncp/navercloudplatform/ncp00/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/ncp/navercloudplatform/ncp00/</guid>
      <description>****         ****         #
 </description>
    </item>
    
    <item>
      <title>NCP</title>
      <link>https://mung0001.github.io/docs/ncp/navercloudplatform/ncp01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/ncp/navercloudplatform/ncp01/</guid>
      <description>****         ****         #
 </description>
    </item>
    
    <item>
      <title>NCP</title>
      <link>https://mung0001.github.io/docs/ncp/navercloudplatform/ncp02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/ncp/navercloudplatform/ncp02/</guid>
      <description>****         ****         #
 </description>
    </item>
    
    <item>
      <title>Network</title>
      <link>https://mung0001.github.io/docs/network/network/natwork-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/network/natwork-1/</guid>
      <description>Network    Network란 무엇인가?       네트워크란 물리적으로 떨어져 있는 여러 시스템을 연결하여 데이터를 주고 받을 수 있게 연결되어 있는 시스템
  노드들이 데이터를 공휴할 수 있게 하는 디지털 전기 통신망의 한 종류로, 분산되어 있는 컴퓨터를 통신망을 통해 연결한 것을 말한다.
  흔히 사람들은 네트워크와 인터넷을 함께 혼용하지만 인터넷은 문서, 그림, 영상과 같은 여러가지 데이터를 공유하도록 구성된 거대한 네트워크를 의미로, 인터넷이 네트워크에 포함되어 있다고 할 수 있다.</description>
    </item>
    
    <item>
      <title>OpenStack 개요</title>
      <link>https://mung0001.github.io/docs/openstack/openstack/openstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/openstack/</guid>
      <description>인프라 환경 변화의 시작, 클라우드   클라우드 컴퓨팅의 정의와 종류  클라우드 컴퓨팅(Cloud Computing)   인터넷이 가능한 디바이스(스마트폰, 스마트패드, 스마트TV 등)로 클라우드에서 데이터를 처리하며, 저장 및 관리하는 컴퓨팅 시스템
  클라우드 서비스의 종류
  IaaS(Infrastrcture as a Service): 서버, 스토리지, 네트워크를 가상화 환경으로 만 들어 필요에 따라 인프라 자원을 제공하는 서비스
  PaaS(Platform as a Service): 웹에서 개발 플랫폼을 제공하는 서비스
  SaaS(Software as a Service): 온디맨드 소프트웨어(On-demand Software)라고도 하며, 중앙에서 호스팅 되는 소프트웨어를 웹 브라우저 등 클라우이언트로 이용하는 서비스</description>
    </item>
    
    <item>
      <title>Python Code</title>
      <link>https://mung0001.github.io/docs/development/python/code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/python/code/</guid>
      <description>메일 자동화  이미지 크롤링 from urllib.request import urlopen from urllib.parse import quote_plus from bs4 import BeautifulSoup from selenium import webdriver import time baseUrl = &amp;#39;https://www.instagram.com/explore/tags/&amp;#39; plusUrl = input(&amp;#39;검색할 태그를 입력하세요 : &amp;#39;) url = baseUrl + quote_plus(plusUrl) driver = webdriver.Chrome(&amp;#39;C:\\chromedriver.exe&amp;#39;) driver.get(url) time.sleep(3) html = driver.page_source soup = BeautifulSoup(html) insta = soup.select(&amp;#39;.v1Nh3.kIKUG._bz0w&amp;#39;) n = 1 for i in insta: print(&amp;#39;https://www.instagram.com&amp;#39;+ i.a[&amp;#39;href&amp;#39;]) imgUrl = i.select_one(&amp;#39;.KL4Bh&amp;#39;).img[&amp;#39;src&amp;#39;] with urlopen(imgUrl) as f: with open(&amp;#39;C:\\test\\&amp;#39; + plusUrl + str(n) + &amp;#39;.</description>
    </item>
    
    <item>
      <title>Python 정리</title>
      <link>https://mung0001.github.io/docs/development/python/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/python/python/</guid>
      <description>python 내장함수  ...abs abs(x)는 어떤 숫자를 입력받았을 때, 그 숫자의 절댓값을 돌려주는 함수
&amp;gt;&amp;gt;&amp;gt; abs(3) 3 &amp;gt;&amp;gt;&amp;gt; abs(-3) 3    all all(x)는 반복 가능한(iterable) 자료형 x를 입력 인수로 받으며 이 x가 모두 참이면 True, 거짓이 하나라도 있으면 False를 반환
※ 반복 가능한 자료형이란 for문으로 그 값을 출력할 수 있는 것을 의미한다. 리스트, 튜플, 문자열, 딕셔너리, 집합 등이 있다.
&amp;gt;&amp;gt;&amp;gt; all([1, 2, 3]) True &amp;gt;&amp;gt;&amp;gt; all([1, 2, 3, 0]) False   any any(x)는 x 중 하나라도 참이 있으면 True를 돌려주고, x가 모두 거짓일 때에만 False를 돌려준다.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://mung0001.github.io/docs/system/window/window01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window01/</guid>
      <description>Windows Sever Roadmap   Windows Sever Roadmap    Windows Server을 사용하기 위한 준비
  응용 프로그램 : VMware workstation
  가상머신의 종류와 하드웨어 사양
       FIRST SECOND THIRD Windows Client SERVERCORE     주 용도 서버 전용 서버/ 클라이언트 겸용 서버/ 클라이언트 겸용 클라이언트 전용 서버 코어 테스트 용도   Guest OS 종류 Windows Server 2016 Windows Server 2016 Windows Sever 2016 Windows Sever 2016 Windows Sever 2016   가상머신 FIRST SECOND THIRD WINCLIENT SEVERCORE   CPU 코어수/ 쓰레드 1/2 1/2 1/2 2/2 1/2   하드용량 100GB 60GB 60GB 60GB 60GB   메모리 할당 2048MB 2048MB 2048MB 2048MB 2048MB   네트워크 타입 NAT NAT NAT NAT NAT   CD/DVD O O O O O   Audio X X X O X   USB X X X O X   Printer X X X O X       가상머신의 네트워크       FIRST SECOND THIRD WINCLIENT SEVERCORE     IP 주소 192.</description>
    </item>
    
    <item>
      <title>Shell Script란?</title>
      <link>https://mung0001.github.io/docs/development/shell/shell-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell-1/</guid>
      <description>Shell Programming    Shell Script의 개요   UNIX/ Linux 소개 및 특징   UNIX   1969년 AT&amp;amp;T 벨연구소의 직원이 켄 톰슨, 데니스 리치, 더글라스 매클로리 등이 최초로 개발하였으며, 이후 C언어로 재작성되어 다양한 플랫폼에 이식될 수 있도록 보완되었다
  벨연구소는 대학과 연구기관에 UNIX를 활용할 수 있도록 라이선스를 제공하였으며, 버클리 대학교에서는 UNIX에 네트워크 프로토콜인 TCP/IP 등 다양한 기능을 보강하여 BSD 배포본을 제작하고 이후 파생되는 많은 UNIX에 영향을 끼쳤다.</description>
    </item>
    
    <item>
      <title>Snort란?</title>
      <link>https://mung0001.github.io/docs/network/snort/snort-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/snort/snort-01/</guid>
      <description>Snort를 이용한 IDS/IPS 구축   침입 탐지 시스템(IDS) &amp;ndash; Snort  Snort   Snort란 일종의 침입탐지시스템(IDS:Intrusion Detection System)으로 실시간 트래픽 분석, 프로토콜 분석, 내용검색/매칭, 침입탐지 Rule에 의거하여 오버플로우, 포트스캔, CGI공격, OS확인 시도 등의 다양한 공격과 스캔을 탐지할 수 있다. 침입탐지 Rule은 보안 커뮤니티를 통해 지속적으로 업데이트되고 또한 사용자가 직접 Rule을 작성하여 추가할 수 있도록 설계되어 최신공격에 대한 적응에 빨리 대처하는 오픈소스 서비스     Snort의 주 기능  탐지(Detection) 잘못된 패킷을 감지하면 사용자에게 알림(주체적으로 처리하지 X, only 안내)     **Snort 탐지의 종류 **     종류 역할     오용 탐지 알고 있는 것 탐지   이상 탐지 모르는 것도 탐지(100% 탐지 X)     너무 민감하게 처리하면 필요한 정보도 차단하는 실수를 할 수 있음     Snort 설치위치에 따른 역할 ( 성능이 달라짐 )   패킷이 라우터로 들어오기 전  내부 네트워크로 들어오는 모든 패킷은 IDS를 거침 쓸 데 없는 패킷을 많이 훑기 때문에 효율적이지 X 일반적으로 정상적인 패킷이 더 많음     라우터 뒤    라우터의 패킷 필터링을 거친 패킷을 검사 라우터 전보다는 성능저하 덜 적음 but, 공격 패킷 탐지는 낮아질 수 있음   방화벽 뒤    일반적으로 2, 3, 4계층 패킷을 거름(5, 6, 7계층도 거름)   내부 네트워크    내부의 클라이언트를 신뢰할 수 없어 내부 네트워크 해킹을 감시하려 할 때 설치 내부 네트워크에 대한 해킹 피해를 방지하기 위해     Snort 설치  CentOS 7  의존성 관련 프로그램 설치   $ yum -y install http://download-ib01.</description>
    </item>
    
    <item>
      <title>Sophos</title>
      <link>https://mung0001.github.io/docs/network/sophos/sophos_0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/sophos/sophos_0/</guid>
      <description>Sophos  Sophos UTM ( United Threat Management )    Sophos UTM이란 Sophos사에서 리눅스 커널을 이용해 만든 UTM장비
  UTM : Anti Virus, Firewall, IPS ( 침입방지시스템 ) , VPN , IDS ( 침입탐지시스템 )등의 보안기능 중 적어도 2개, 많게는 7~8가지 기능을 하나의 장비에 포함하여 사용하는 통합보안장비
    통합위협관리시스템( UTM )의 주요 기능     기능 설명     Firewall Stateful Packet Inspection( SPI ) Firewalld, SMTP, HTTP, POP3, DNS, Proxy 기능이 결합된 견고한 network보안 구축   VPN IPsec VPN(DES/3DES) 및 L2TP VPN 지원   IDS/ IPS 다양한 network 기반 공격 탐지 및 차단, 다양한 Application 기반 공격 탐지 및 차단, Anomaly Detection, Dos/DDos,   Anti-Scan Attack Scan Attack 기반 공격 탐지 및 차단   Anti Virus 이메일 기반 내/외부 유입 바이러스 탐지 및 차단, Web 기반 내/외부 유입 바이러스 탐지 및 차단   Anti-Spam 베이시안(Baysian) 알고리즘 기반 스팸메일 탐지 및 차단, 점수(Score) 데이터 기반 스팸 메일 탐지 및 차단   Content Filtering 유해사이트 및 정책 위배 웹사이트 접근 탐지 및 차단   ext Transparent/Router/NAT 모드 지원, 피싱 차단 및 SIP Proxy 기능 제공      Sophos UTM 메뉴의 역할     메뉴 역할     Webserver Protection WAF ( Web Application Firewall ) Web Hacking 방어   Support Tools ping test, traceroute   Network Protection NAT Masquerding PAT   Network Protection Firewall Country Blocking 특정 국가에서 들어오는 트래픽을 차단   Network Protection Firewall ICMP Ping 허용/차단 설정용도 ( ping settings에 &amp;lsquo;Gateway forward pings를 허용해줘야 내부에서 외부로 ping이 전송 )   Network Protection Firewall Advanced Connection tracking helpers FTP Stateful기능 사용여부   Web Protection Client를 외부로부터 보호하는 역할 ( 사용자 보호하는 것으로 웹서버 보호 X )   Web Protection - Web Filtering    Standard Mode Client측 장비한테 UTM장비에게 가라고 지정을 해줘야지만 UTM장비에서 검사 ( default : 외부로 전송 )   Transparent Mode 별도로 UTM장비에게 가라고 지정하지 않아도 UTM장비가 검사      </description>
    </item>
    
    <item>
      <title>Sophos 설치</title>
      <link>https://mung0001.github.io/docs/network/sophos/sophos_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/sophos/sophos_1/</guid>
      <description>Sophos 설치    구성환경    Sophos는 nat을 외부대역으로 Host 2 ( 20.20.20.0/24 )를 내부대역으로 갖습니다. Sophos의 설치를 위해 내부 대역 ( Host 2 )의 Win 7을 통해 설치를 진행합니다.      Sophos 설치를 위한 Vm을 설정합니다.       운영체제 버전에서 Other Linux 2.6x kernel을 선택합니다. 그 후 RAM 1G 디스크 20G 외에는 기본 값으로 진행합니다.      위 그림과 같이 설정이 생성이 완료되면 설정을 위해 Edit virtual machine settings를 클릭합니다.</description>
    </item>
    
    <item>
      <title>2장 EC2와 EBS</title>
      <link>https://mung0001.github.io/docs/aws/awssaa/saa-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awssaa/saa-2/</guid>
      <description>2장 Amazon Elastic Compute Cloud와 Amazon Elastic Block Store  2장의 목표  복원력은 갖춘 아키텍처 설계  안정적이고, 복원력을 갖춘 스토리지를 선택 어떻게 고가용성 및/ 또는 내결함성을 갖춘 아키텍처를 설계할지를 결정      성능이 뛰어난 아키텍처 정의  성능이 뛰어난 스토리지 및 데이터베이스를 선택 탄력성과 확장성을 갖춘 솔루션을 설계      안전한 애플리케이션 및 아키텍처 설명  어떻게 애플리케이션 티어를 보호할지를 결정 어떻게 데이터를 보호할지 결정   비용에 최적화된 아키텍처 설계  어떻게 비용에 최적화된 스토리지를 설계할지를 결정 어떻게 비용에 최적화된 컴퓨팅을 설계할지 결정       EC2 인스턴스    EC2는 물리 서버의 기능을 함축적으로 가상화한 실제 서버와 유사하게 작동</description>
    </item>
    
    <item>
      <title>AWS Computing</title>
      <link>https://mung0001.github.io/docs/aws/amazonwebservice/aws_computing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/amazonwebservice/aws_computing/</guid>
      <description>AWS 컴퓨팅 서비스   EC2 ( Elastic Compute Cloud )   EC2 공식 홈페이지 가상 컴퓨팅 서비스를 제공해주는 서버로 실제 물리서버와 똑같은 형태의 서비스를 제공 AMI를 통해 필요한 운영체제와 여러 소프트웨어를 쉽게 생성 가능 키 페어를 사용하여 로그린 정보 보호 SSH로 원격 연결이 가능 중지가 가능한 EBS 기반 인스턴스와 임시 스토리지를 제공하여 중지가 불가능한 Instance Store 기반 EC2로 분류 됨 ( 재부팅은 모두 가능 ) 인스턴스의 유형으로는 범용, 컴퓨팅 최적화, 메모리 최적화, 스토리지 최적화 등이 존재   EC2 상태의 종류  Pending : 인스턴스가 구동하기 위해 준비중인 상태, 요금 미청구 Runnung : 인스턴스가 실행하고 사용할 준비가 된 상태, 요금 청구 Stopping : 인스턴스가 중지 모드로 전환되려는 상태, 요금 미청구 Shutting-down : 인스턴스가 종료를 위해 준비중인 상태, 요금 미청구 Terminated : 인스턴스가 종료된 상태, 요금 미청구   EC2 구매옵션  On demand : 필요할 때 바로 생성하는 방식으로 1시간 단위로 과금이 이루어짐 ( 1분 사용시도 1시간 ) Spot : 경매방식의 인스턴스 기준가격보다 높은 가격 제시시 사용가능하며, 타인에 의해 불시로 종료되거나 정지될 수 있어 각종 테스트에 적합 Reserved : 12개월- 36개월 단위로 예약하여 사용하는 인스턴스로 On demandq비해 가격이 대폭 할인되며, 장기적으로 사용할 경우 효율이 좋지만, 예약된 인스턴스이기에 사용하지 않아도 과금이 부과되어짐    Lightsail   Lightsail Site AWS에서 VPS ( Virtual Private Server : 가상 사설 서버 ) 를 시작하는 가장 쉽고 빠른 방법 가상 사설 서버, 영구적인 스토리지, 네트워킹을 포함 클릭 한 번으로 모든 과정을 생략, 쉽게 VPS를 생성 및 관리 확장가능 및 타 AWS Services에 접근 가능 고가용성 어플리케이션 생성 가능 저렴하고, 비용의 예측이 보다 쉬움 완전히 사전구성되어 있는 서버 ( BluePrint )   Lightsail의 유료 Plan  월간 무료 데이터 허용량 초과시, 퍼블릭 IP 주소를 사용ㅎ여 요금 청구 Lightsail 스냅샷 비용 : 인스턴스 스냅샷 + 디스크 스냅샷 1시간 이상 인스턴스에 연결되어 있지 않은 고정 IP ( Elastic IP ) 무료로 주어지는 3백만 개의 쿼리를 초과하는 경우   Lightsail&amp;amp; EC2  Lightsail의 주 사용용도  웹 사이트 및 블로그 단순 앱 개발 및 테스트 환경 소수의 서버로 구성된 비즈니스 소프트웨어   EC2  빅데이터 분석 고성능 컴퓨팅 과학 분야 컴퓨팅 멀티&amp;rsquo;티어 애플리케이션      ECS ( Elastic Container Service )   AWS의 Virtual Machine, VM (가상 머신) 가상의 컴퓨터, 하나의 호스트에 안에 또다른 호스트를 만들어 사용하는 것 CPU, Memory와 같은 주요 하드웨어 부품을 소프트웨어로 완전 재현해내어 기능을 흉내내게 하고(에뮬레이션), 격리된 실행 환경(OS)를 만듬 즉 하드웨어를 직접 가상화 클러스터에서 도커 컨테이너를 손쉽게 관리하기 위해 컨테이너 관리 서비스 클러스터는 Task(작업) 또는 서비스로 일컬어지는 컨테이너들의 집합    2가지 구성 요소로 시작 가능  EC2(Container Instance) : EC2를 생성하여 EC2 내에 Task(컨테이너가 수행할 작업) Fargate : EC2를 생성하거나 컨테이너를 실행하기 위한 Orchestration을 AWS가 맡아 하는 서비스로, 관리가 용이함   하나의 클러스터 내에 다수의 Task 혹은 컨테이너 인스턴스로 구성됨 또한 ELB, EBS 볼륨, VPC, IAM과 같은 기능을 사용하여 구성 가능 즉 ECS 각 작업의 권한, ECS 액세스를 IAM으로 조절하거나, EC2 유형의 컨테이너 인스턴스만이 OS에 액세스 가능한 특징 등을 갖게 됨 호스트의 OS(Operating System) 내에 또다른 실행환경의 OS가 존재함 윈도우 OS의 호스트 내에 리눅스, 우분투 등의 다양한 OS를 올릴 수 있음 다만 OS를 포함하기 때문에 용량을 많이 차지할 뿐더러, 사용자가 필요치 않는 기능까지 포함할 수 있으며 느림   Linux Container  ECS를 사용하는 목적이자 관리 대상 하드웨어가 아닌 OS를 가상화하여 커널을 공유하며 프로세스(컨테이너와 비슷)를 격리된 환경에서 실행하는 것 VM와 달리 달리 호스트의 OS에서 가상화를 실시하여, 이 OS 위에 프로세스들이 ‘컨테이너’로서 격리된 환경에서 실행됨 호스트의 입장에선 컨테이너는 프로세스에 불과하지만, 컨테이너 입장에서는 독립된 실행환경임 OS를 포함하지 않는만큼 가볍고, 하드웨어를 가상화하지 않기 때문에 빠름   Kernel  Operaintg System에서 가장 중요한 역할을 맡고 있는 핵심(核心) 커널이 각 프로세스(실행환경)에 하드웨어 자원(CPU 등)을 할당하고, 작업 스케쥴링(처리순서)를 담당하며, 프로세스 간 접근과 보안을 책임짐 과거에 커널이 없던 시절에도 컴퓨터는 존재할 수 있었으나 메모리를 초기화하기 위해서는 컴퓨터를 리부팅해야 하는 등, 자원관리/제어 주체의 필요성에 의해 탄생   Docker  앞서 설명한 Linux Container 기술에 근간을 두는 오픈소스 컨테이너 프로젝트 ‘Docker’라는 단어 자체가 ‘부두에서 일하는 노동자’, 즉 컨테이너를 관리하는 존재임을 뜻함 Linux Container 기술을 사용하는 솔루션이므로 별도의 OS를 설치하지 않고 컨테이너를 생성하여 애플리케이션을 실행함 컨테이너를 생성할 이미지(서비스에 필요한 리소스를 모아둔 최소한의 단위)를 기반으로 운영함 이미지만 가지고 있다면 어느 시점에서든 동일한 리소스의 컨테이너를 생성할 수 있음 그 밖에 컨테이너간의 연결, 다양한 API 제공 등의 기능을 보유    Lambda   Serverless Service 서버를 구축, 프로비져닝하고 필요한 패키지를 설치하는 등의 과정을 거치지 않고, 코드를 실행하는 서비스 사용자는 애플리케이션이나 백엔드 서비스를 관리할 필요 없이 코드를 실행할 수 있음 CloudWatch, ALB, DynamoDB 등을 트리거로 이용하여 특정 상황에서 코드를 실행시키고 것이 가능 API Gateway와 Lambda를 조합하여 요청별로 특정 코드를 수행하도록 구성 가능 15분을 초과하는 작업에 대해서는 Lambda 비적합   Lamda Function의 정의와 구성  코드를 실행하기 위해 호출할 수 있는 리소스 이벤트를 처리하는 코드, 계층, 트리거, 전달 대상 등으로 구성됨  함수코드 : 실제 호출되기 실행되는 코드, Runtime(코드 실행지원), IAM, VPC, Memory 등으로 구성됨 트리거 : 함수코드를 발동시키는 서비스(S3, SNS, SQS, DynamoDB, CloudWatch Event, Cloudwatch Log 등)   SNS의 메시지 구독 대상에 Lambda를 포함시키면, 메시지 발송시 Lambda가 이를 전달받고 함수코드 실행  전달대상 : 함수가 비동기식으로 호출되거나, 레코드를 처리한 경우 전달될 대상   SNS, SQS, 또다른 Lambda, EventBridge 이벤트 버스로 전달가능 NS로부터 메시지를 전달받아 코드를 처리하고 이를 SQS로 보내 메시지 대기열에 적재할 수 있음   EC2 vs Lambda  EC2 사용시 프로비져닝, 운영 체제, 네트워크 세부 설정, 보안 설정 등을 사용자가 원하는 방향으로 지정 가능 Lambda 사용시 프로비져닝 필요없이 AWS가 모니터링, 프로비져닝, 보안패치 적용, 코드 배포를 모두 수행함    Batch   종합 관리형 서비스 한 리전 내의 여러 가용 영역에 걸쳐 배치 작업을 실행하는 과정을 간소화하는 리전 서비스 새 VPC 또는 기존 VPC에서 컴퓨팅 환경을 생성할 수 있음 AWS Batch를 사용하면 AWS 클라우드에서 배치 컴퓨팅 워크로드를 실행이 가능  배치 컴퓨팅 : 다수의 사람들이 수 많은 컴퓨터 리소스에 엑세스 할 때 일반적으로 사용하는 방법     AWS Batch의 구성요소  작업  AWS Batch에 제출한 작업 단위 ( 쉘 스크립ㅌ, Linux 실행 파일, Docker 컨테이너 이미지 ) 작업에는 이름이 있으며, 파라미터를 사용하여 컴퓨팅 환경의 인스턴스에서 컨테이너화된 애플리케이션으로 실행   작업 정의  작업이 실행되는 방식을 지정하며 작업에 있는 리소스에 대한 블루프린트를 의미 IAM 역할을 제공하여 다른 AWS 리소스에 프로그래밍 방식으로 엑세스할 수 있으며 메모리 및 CPU 요구 사항을 모두 지정가능   작업 대기열  AWS Batch 작업이 대기열 예약되는 환경 우선 순위 갑 및 작업 대기열 전체에 우선 순위 할당 가능   컴퓨팅 환경  작업을 싱해하는 데 사용되는 관리형 또는 비관리형 컴퓨팅 리소스 세트 여러 세부 수준에서의 인스턴스 유형의 설정이 가능     Batch Group  클러스터 : 인스턴스를 AZ 내에서 근접하게 배치, 결합된 노드 간 낮은 지연 시간의 네트워크 달성 가능 파티션 : 인스턴스가 담긴 그룹을 논리 세그먼트로 나누어 각 파티션에 배치, 최대 7개의 파티션을 가질 수 있으며, 각 파티션은 자체 랙 세트를 보유하고 자체 네트워크 전원을 보유 분산 : 파티션이 논리 세그먼트로 분리된 인스턴스 그룹인 것과 달리 분산은 인스턴스 개체 하나가 자체 랙에 분산 배치됨, AZ당 최대 7개의 인스턴스 배치 가능    Elastic Beanstalk   Java, NET, PHP, Node js, Python, Ruby, Go, Docker을 사용하여 Apache, Nginx, Passenger, llS와 같은 친숙한 서버에서 개발된 웹 어플리케이션 및 서비스를 간편하게 배포하고 조정 할 수 있는 서비스 EC2, ASG, RDS 등 AWS 리소스들을 조합하여 완성된 어플리케이션 플랫폼으로 PaaS의 일종 오토 스케일링, 로브 밸런싱, 버전 관리 등의 기능을 콘솔에서 몇 번의 클릭으로 생성 가능 실제 서비스가 아니기에 사용 요금이 없음   Elastic Beanstalk의 장점  간단한 서버 세팅 환경변수들을 쉽게 변경/ 관리가 가능 오토 스케일링이 용이 로그의 자동화 추가요금이 없음 #  </description>
    </item>
    
    <item>
      <title>AWS 사용자 계정 생성</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/iam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/iam/</guid>
      <description>AWS 사용자 계정 생성    AWS 사용자 계정 생성    이번 시간에는 AWS 계정생성에 이어 AWS 사용자 계정을 생성해보도록 하겠습니다. IAM이 무엇인지는 AWS IAM을 참고해주세요.      먼저 AWS에 로그인 후, IAM 서비스를 검색합니다.      IAM 서비스에 진입하여, 메뉴에서 사용자를 클릭합니다.      사용자 추가를 선택합니다.      사용자의 이름을 기입하고, 엑세스 유형을 선택합니다.</description>
    </item>
    
    <item>
      <title>Docker 설치</title>
      <link>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-02/</guid>
      <description>Docker Install   Docker Insatll ( Ubuntu )   $ sudo apt-get update $ sudo apt-get updgrade # apt 업데이트 $ sudo apt-get install -y \ apt-transport-https \ ca-certificates \ curl \ software-properties-common # 패키지 설치 $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # Docker의 공식 GPG 키를 추가 $ sudo apt-key fingerprint 0EBFCD88 pub rsa4096 2017-02-22 [SCEA] 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 uid [ unknown] Docker Release (CE deb) &amp;lt;docker@docker.</description>
    </item>
    
    <item>
      <title>Docker 환경구축</title>
      <link>https://mung0001.github.io/docs/docker/docker/docker/docker-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/docker/docker-2/</guid>
      <description>Docker 환경구축    이번 장에서는 로컬환경에서 Docker를 구축하는 방법에 대해 알아보겠습니다. 설치에 대한 자세한 설명은 Docker docs를 참고해주세요.    Docker 설치    Docker는 기본적으로 Linux 플랫폼, MacOS, Window 10을 지원하고 있습니다. Docker 지원 DESKTOP     Docker 지원 SERVER      Debian 설치   Debian 환경   Debian계열 Linux에 Docker Engine을 설치 하기 위해서는 하단의 요구조건을 충족해야 합니다.</description>
    </item>
    
    <item>
      <title>Keystone</title>
      <link>https://mung0001.github.io/docs/openstack/openstack/keystone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/keystone/</guid>
      <description>인증을 관리하는 서비스 : Keyston   인증을 관리하는 서비스 : Keystone   Keystone은 인증 토큰을 비롯해 테넌트 및 사용자 관리, 서비스의 엔드포인트 URL 등을 관리하는 서비스 Keystone은 openstack의 백엔드에서 RBAD ( Role Based Access Control )을 통해 사용자의 접근을 제어하는 등의 인증 ( Identify ) 서비스로 사용되며 다음과 같은 기능으로 이루어져 있음     Keystone의 구성요소      구성요소 역할     user 사람 또는 오픈 스택 서비스를 이용하는 서비스 ( nova, neutron, cinder 등 )을 의미     User은 특정 프로젝트에 할당할 수 있으며, 증복을 허용하지 않음         Authentication 사용자의 신분을 확인하는 절차로, 특정 값을 통해 Keystone이 이를 검증     보통 인증을 위한 자료로는 ID, PW가 사용되며 Keystone은 인증확인 시 인증토큰을 방행         Token RBAD의 신분을 증명하기 위해 사용되는 텍스트 데이터   Token type fernet, uuid, pki, pkiz     어떤 자원에 접근이 가능한지 범위가 지정되어 있음 ( 시간 제한 있음 )         Project Keystone V2까지 Tenant라는 이름으로 사용 ( V3 이후 Project )     어떤 자원이나 어플리케이션에 대한 권리를 가진 보안그룹     프로젝트는 특정 도메인에 의해 소유         Endpoint 사용자가 서비스를 이용하기 위해 연결정보를 제공하는 접근 가능한 네트워크 주소 ( URL )   EndPoint type admin, internal, public         Role 사용자가 어떤 동작을 수행하도록 허용하는 규칙     사용자가 가지는 역할은 사용자에게 발행된 토큰을 통해 확인     사용자가 서비스를 호출하면, 서비스는 토큰에 저장된 사용자의 역할을 해석하여 허용유무 결정         Domain 구성요소를 효과적으로 관리하기 위한 사용자, 그룹, 프로젝트의 집합     사용자들은 한 도메인의 관리자의 권한 등을 부여받는 방식으로 역할을 부여가능     Domain, Project, Group, User, Rule 개념과 관계  Keystone은 위에도 언급하였 듯이 사용자 인증 부분과 서비스 인증 부분을 관리 사용자일 때는 사용자 ID와 패스워드, 사용자 권한의 롤( Roll )을 등록 서비스일 때는 서비스를 등록하고 해당 서비스의 엔드포인트 URL을 등록  도메인(Domain)은 서로 분리되어 있음 각 도메인에는 프로젝트와 사용자가 있음 프로젝트는 사용자를 가질 수 있음 사용자에게는 롤이 있으며, 여러 프로젝트의 구성원이 될 수 있음 관리자 롤(Admin Role)을 가진 사용자끼리, 일반 사용자롤(Member Role)을 가진 사용자간의 그룹핑(Grouping)을 할 수 있음       Keystone의 논리 아키텍처   Keystone의 논리 아키텍처는 토큰(Token), 카탈로그(Catalog), 정책(Poliy), 인증(Identity) 으로 구성      구성요소 역할     Token Backend 사용자별 토큰을 관리   Catalog Backend 오픈스택에서 모든 서비스의 엔드포인트 URL을 관리   Policy Backend 테넌트, 사용자 계정, 롤 등을 관리   Identity Backend 사용자 인증을 관리       Openstack에서 Keystone 위치    Openstack Keystone은 모든 서비스를 관장하는 위치 모든 User, Service는 Keystone의 인증을 통해서만 요청, 응답이 가능 Keystone은 타인이나 해커에게서 시스템을 안전하게 보호하고 사용자 등록, 삭제, 권한 관리, 사용자가 접근할 수 있는 서비스 포인트 관리와 다른 API들의 인증 등의 전체적인 인증 프로세스를 관리하는 역할을 수행    </description>
    </item>
    
    <item>
      <title>Network Master 2급 실기정리</title>
      <link>https://mung0001.github.io/docs/network/nm/nm02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/nm/nm02/</guid>
      <description>Network Master 2급   Network Master 실기정리   정리중입니다!  </description>
    </item>
    
    <item>
      <title>Server</title>
      <link>https://mung0001.github.io/docs/infra/infra/infra02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/infra/infra/infra02/</guid>
      <description>Server    Server Type   설치 장소나 용도가 다양하여 서버는 여러 모델이 존재합니다.    랙 마운트형 서버    랙 마운트형 서버는 데이터 센터나 서버 룸에 설치된 랙 안에 들어가는 서버로 19인치 랙에 수용하는 것을 전제로 하며, 기기는 1U, 2U처럼 유닛 단위로 사이즈가 정해져 있으며, 1U 높이가 1.75인치로 확장성을 위해 2U 사이즈 이상인 서버가 많습니다.     타워형 서버
 타워형 서버는 기본적으로 우리가 사용하고 있는 Desktop PC입니다.</description>
    </item>
    
    <item>
      <title>Snort 역할</title>
      <link>https://mung0001.github.io/docs/network/snort/snort-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/snort/snort-02/</guid>
      <description>시스템통합 관리 침입 탐지 시스템(IDS) &amp;ndash; Snort 이용    주된 기능
  탐지(Detection)
  잘못된 패킷을 감지하면 사용자에게 알림(주체적으로 처리하지 X, only 안내)
       탐지 종류 2가지
  (1)오용 탐지	알고 있는 것 탐지
  (2)이상 탐지	모르는 것도 탐지(100% 탐지 X)
  너무 민감하게 처리하면 필요한 정보도 차단하는 실수를 할 수 있음
       설치위치 ( 성능이 달라짐 )</description>
    </item>
    
    <item>
      <title>Sophos 방화벽 구축</title>
      <link>https://mung0001.github.io/docs/network/sophos/sophos_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/sophos/sophos_2/</guid>
      <description>Sophos 방화벽 구축    구성환경    저번 장에 이어 이번에는 10.10.10.0/24 서버를 한 개 추가하여 방화벽을 구축해보도록 하겠습니다. 먼저, 위의 그림과 같이 환경을 세팅합니다. ( Sophos에 대역 추가 )     Network Interfaces 추가    방화벽을 구성하기 전에 먼저, Network Interfaces를 설정하겠습니다.    Sophos에 로그인을 완료하면, 대역이 추가됬음을 확인할 수 있습니다. 하지만 아직 인식만 될 뿐, 되지 않아 추가 설정이 필요합니다.</description>
    </item>
    
    <item>
      <title>UNIX/ Linux 개념과 명령어</title>
      <link>https://mung0001.github.io/docs/development/shell/shell-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell-2/</guid>
      <description>Shell Programming  UNIX/ Linux 기본 명령어와 개념  Redirection &amp;amp; Pipes  $ &amp;lt;File Descriptor&amp;gt; &amp;lt;PATH&amp;gt; &amp;lt;Redirection&amp;gt; $ &amp;lt;File Descriptor&amp;gt; &amp;lt;PATH&amp;gt; &amp;lt;Redirection&amp;gt; &amp;lt;Pipe&amp;gt; &amp;lt;File Descriptor&amp;gt; ... ex) $ cat /log/var/message | grep ERR # cat = &amp;lt;File Descripotr&amp;gt; # /log/var/message = &amp;lt;PATH&amp;gt; # | = &amp;lt;Redirection&amp;gt;   File Descriptor   Process가 File이나 Device를 access 하기 위해 사용
  Standard File Descriptor
  stdin(standard input) : 표준 입력 (예시 : 키보드)</description>
    </item>
    
    <item>
      <title>Windows Server Install</title>
      <link>https://mung0001.github.io/docs/system/window/window02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window02/</guid>
      <description>Windows Server Install   설치순서   Windows Server 2016 ISO 다운로드 및 인스톨
  관리자 비밀번호지정
  평가기간 라이선스 확인
  한글 언어팩 설치
  VMware Tools 설치
  네트워크 고정IP주소로 설정
  컴퓨터 이름 변경
  디스플에이 끄기 시간 조절
  Internet Explorer 보안 설정 끄기
  Administrator 암호 기간 제한 제거
  자동 업데이트 기능 끄기</description>
    </item>
    
    <item>
      <title>3장 S3와 Glacier</title>
      <link>https://mung0001.github.io/docs/aws/awssaa/saa-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awssaa/saa-3/</guid>
      <description>3장 Amazon Simple Storage Service와 Amazon Glacier Storage Service   3장의 목표   복원력을 갖춘 아키텍처 설계
 안정적이고/ 복원력을 갖춘 스로티리지를 선택한다. 어떻게 멀티 티어 아키텍처 솔루션을 설계할지 결정한다. 어떻게 고가용성 및 내결함성을 갖춘 아키텍처를 설계할지 결정한다.    성능이 뛰어난 아키텍처 정의
 성능이 뛰어난 스토리지 및 데이터베이스를 선택한다. 탄력성과 확장성을 갖춘 솔루션을 설계한다.    안전한 애플리케이션 및 아키텍처 설명
 어떻게 애플리케이션 티어를 보호할지 결정한다.</description>
    </item>
    
    <item>
      <title>AWS CLI 활용</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/cli/</guid>
      <description>AWS CLI 활용    AWS CLI 활용    이번 시간에는 AWS CLI을 활용하는 방법에 대해 알아보도록 하겠습니다. AWS CLI의 대한 개념과 설치는 AWS CLI를 참고해주세요.     AWS CLI 기본설정   먼저 여기서는 Window 10, Powershell에서 진행하도록 하겠습니다. Linux나 Mac 등 타 OS도 AWS CLI가 설치되어 있으면 모두 동일하니 똑같이 진행하셔도 문제없습니다.      먼저 프롬프트 혹은 터미널을 실행 후, aws configure을 입력합니다.</description>
    </item>
    
    <item>
      <title>AWS Database</title>
      <link>https://mung0001.github.io/docs/aws/amazonwebservice/aws_database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/amazonwebservice/aws_database/</guid>
      <description>AWS DataBase   Amazon RDS ( Relational Database Service )  분산 관계형 데이터베이스 MariaDB, MySQL, PostgreSQL, Oracle 등을 AWS에서 제공해주는 것 애플리케이션 내에서 관계형 데이터베이스의 설정, 운영, 스케일링을 단순케 하도록 설계된 클라우드 내에서 동작하는 웹 서비스 데이터베이스 소프트웨어 패치하거나 데이터베이스를 백업하거나 시점 복구를 활성화하는 것과 같은 복잡한 관리 프로세스들은 자동으로 관리 스토리지와 연산 자원들을 스케일링 하는 것은 하나의 API 호출로 수행이 가능 관계형 데이터베이스를 AWS 상에서 사용할 수 있도록 지원하는 서비스 생성 후 서비스를 이용하기만 되므로 SaaS에 해당 MySQL, MariaDB, Postgre SQL, Oracle, MS SQL, Aurora 사용 가능 DB 인스턴스에 대한 shell 지원 불가 및 OS 제어 불가능 ( AWS 관리 ) 백업, 소프트웨어 패치, 장애 감지 및 복구를 AWS가 관리 Storage 용량에 대하여 Auto Scaling MariaDB, MySQL, Aurora는 서로 호환이 가능    DB Instance  RDS의 기본 구성요소로서 클라우드에서 실행하는 격리된 데이터베이스 환경을 의미, 인스턴스 내에서는 여러 사용자가 만든 데이터베이스가 포함되며 엑세스할 여러 도구와 앱 사용 가능 DB 인스턴스도 EC2처럼 다양한 클래스를 가지고 있음 ( db.</description>
    </item>
    
    <item>
      <title>AWS Storage</title>
      <link>https://mung0001.github.io/docs/aws/amazonwebservice/aws_storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/amazonwebservice/aws_storage/</guid>
      <description>AWS Storage   S3 ( Simple Storage Service )    웹 서비스 인터페이스( HTTP ) 를 이용하여 웹에서 언제 어디서나 원하는 양의 데이터를 저장하고 검색할 수 있는 스토리지 버킷( Bucket )과 객체 ( Object )로 나뉘며, 저장하고자 하는 모든 요소는 하나의 객체로 저장되고, 객체를 담는 곳이 버킷 S3 자체는 글로벌 서비스이지만 버킷을 생성 할 때에는 리전을 선택해야 함 객체는 객체 데이터와 메타 데이터로 나뉘며, 각자의 고유한 URL을 가지며 해당 URL로 접속 가능   버킷( Bucket )의 정의와 특징  객체를 담고 있는 구성 요소 크기는 무제한, 리전을 지정하여 버킷을 생성해야 함 버킷의 이름은 반드시 고유해야하며, 증복이 불가능 한번 설정된 버킷의 이름은 다른 계정에서 사용불가   객체( Object ) 의 정의와 특징  S3에 업로드되는 1개의 데이터를 객체라 함 키, 버전 ID, 값, 메타데이터 등으로 구성 객체 하나의 최소 크기는 1(0) byte ~ 5TB 스토리지 클래스, 암호화, 태그, 메타데이터, 객체 잠금 설정 가능 객체의 크기가 매우 클 경우 멀티파트 업로드를 통해 신속하게 업로드 가능   객체의 스토리지 클래스  객체의 접근빈도 및 저장기안에 따라 결정되는 객체의 특성 Standard Type : 클래스를 선택하지 않을 경우 선택되는 일반적인 클래스 Strandard_IA(Ifrequent Access ) : 자주 엑세스하지는 않지만 즉시 액세스할 수 있는 데이터여야하는 경우 선택되는 클래스 One Zone_iA : Standard_IA와 기능은 동일하나 Standard_IA의 경우 세 곳의 AZ에 저장되는 것과 달리 한 군데의 AZ에만 저장되어 해당 AZ가 파괴될 경우 정보 손실 가능성 존재 ( 저장 요금이 적음 ) Intelligent tiering : 엑세스 빈도가 불규칙하여 빈도를 가늠하기 어려운 경우 선택되는 클래스 Glancier : 검색이 아닌 저장이 주용도인 스토리지로 저장요금이 위 클래스들보다 훨씬 저렴한, 다만 저장이 주용도이기 때문에 검색이 3~ 5시간이 소요 Glacier Deep Archive : 10년 이상 저장할 데이터를 저장하는 스토리지 클래스   S3 사용  S3 생성↕ S3 생성 1.</description>
    </item>
    
    <item>
      <title>Django DB(model) create</title>
      <link>https://mung0001.github.io/docs/development/web/django/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/web/django/test/</guid>
      <description>Django Project   Django Boardapp project  모델을 구성하기에 앞서 django에서 지원하는 admin을 사용하기 위해 기본적인 database를 받아온다.
(ve) $ ./manage.py migrate  DB 테이블 생성
# User table ALTER TABLE auth_user ADD COLUMN phone VARCHAR(45) NOT NULL AFTER date_joined, ADD COLUMN date_of_birth DATETIME NOT NULL AFTER phone, CHANGE COLUMN date_joined date_joined DATETIME NOT NULL AFTER email, CHANGE COLUMN first_name first_name VARCHAR(30) NULL AFTER is_active, CHANGE COLUMN is_staff is_staff TINYINT(1) NULL, CHANGE COLUMN is_active is_active TINYINT(1) NULL; # Board table ## board_categories create table board_categories( id int(10) not null auto_increment, category_type varchar(45) not null default &amp;#39;Normal&amp;#39;, category_code varchar(100) not null, category_name varchar(100) not null, category_desc varchar(200) not null, list_count int(10) default &amp;#39;20&amp;#39;, authority int(1) default &amp;#39;0&amp;#39;, creation_date datetime default current_timestamp, last_update_date datetime default null, primary key(id) )engine=InnoDB default CHARSET=utf8; ## boards create table boards( id int(10) not null auto_increment, category_id int(10) not null, user_id int(10) not null, title varchar(300) not null, content text not null, registered_date datetime default current_timestamp, last_update_date datetime default null, view_count int(10) default &amp;#39;0&amp;#39;, image varchar(255) default null, primary key(id), key board_category_fk_idx(category_id), key board_user_fk_idx(user_id), constraint board_category_fk foreign key(category_id) references board_categories(id) on delete no action on update no action, constraint board_user_fk foreign key(user_id) references auth_user(id) on delete no action on update no action )engine=InnoDB default CHARSET=utf8; ## board_replies create table board_replies( id int(10) not null auto_increment, article_id int(10) not null, user_id int(10) not null, `level` tinyint(1) default &amp;#39;1&amp;#39;, content text not null, reference_reply_id int(10) default &amp;#39;0&amp;#39;, registered_date datetime default current_timestamp, last_update_date datetime default null, primary key(id), key user_reply_fk_idx(user_id), key article_reply_fk_idx(article_id), constraint article_reply_fk foreign key(article_id) references boards(id) on delete no action on update no action, constraint user_reply_fk foreign key(user_id) references auth_user(id) on delete no action on update no action )engine=InnoDB default CHARSET=utf8; ## board_likes create table board_likes( id int(10) not null auto_increment, article_id int(10) not null, user_id int(11) not null, registered_date datetime default current_timestamp, primary key(id), key like_article_fk_idx(article_id), key like_user_fk_idx(user_id), constraint like_article_fk foreign key(article_id) references boards(id) on delete no action on update no action, constraint like_user_fk foreign key(user_id) references auth_user(id) on delete no action on update no action )engine=InnoDB default CHARSET=utf8; pip3 install Pillow</description>
    </item>
    
    <item>
      <title>Docker 이미지와 컨테이너</title>
      <link>https://mung0001.github.io/docs/docker/docker/docker/docker-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/docker/docker-3/</guid>
      <description>Docker 이미지와 컨테이너    Docker 이미지와 컨테이너    Docker 이미지  $ docker image --help $ docker image [ options ]    옵션 설명     build 이미지 빌드   history history 출력   inspect 임포트   load 로드   ls 이미지 리스트르 보여준다   prune 사용하지 않는 이미지를 제거   pull 저장소에서 이미지를 다운로드   push 저장소에 이미지를 업로드   rm 삭제   save tar로 이미지를 저장   tag 태그를 생성       $ docker pull [ options ] [ 레포지터리 : 태그 ] $ docker image pull [ options ] [ 레포지터리 : 태그 ] # 도커 이미지 다운로드 $ docker images $ docker image list # 도커 이미지 리스트 리스트 출력 $ docker image tags [ 기반이미지 : 태그 ] [ 새이미지 | 태그 ] # 도커 이미지에 태그 입력 $ docker image push [ 레포지터리 : 태그 ] # 지정된 레포지터리에 업로드  도커 이미지의 태그는 버전을 구별하기 위한 역할을 수행합니다.</description>
    </item>
    
    <item>
      <title>Dokerfile</title>
      <link>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/dockertraining/infradocker-03/</guid>
      <description>Dockerfile     Dokerfile은 Doker에서 작동시킬 컨테이너의 구성 정보를 기술하기 위한 파일
  Dokerfile은 텍스트 형식의 파일로, 에디터 등을 사용하여 작성, 확장자는 따로 필요 없으며 Dokerfile이라는 이름의 파일에 인프라의 구성 정보를 기술
    Dokerfile의 기본 구문     명렵 설명     FROM 베이스 이미지 지정   RUN 명령 실행   CMD 컨테이너 실행 명령   LABEL 라벨 설정   EXPOSE Port Expose   ENV 환경변수   ADD 파일/ 디렉터리 추가   COPY 파일복서   ENTRYPOINT 컨테이너 실핼 명령   VOLUME 볼륨 마운트   USER 사용자 지정   WORKDIR 작업 디렉토리   ARG Dockerfile 안의 변수   ONBUILD 빌드 완료 후 실행되는 명령어   STOPSIGNAL 시스템 콜 시그널 설정   HEALTHCHECK 컨테이너 헬스 체크   SHELL 기본 쉘 설정   # 주석설정       Dockerfile 작성  FROM centos:centos7 FROM centos:centos7@sha256:다이제스트 # 상단과 같은 식으로 나열 $ docker build -t sample:1.</description>
    </item>
    
    <item>
      <title>Glance</title>
      <link>https://mung0001.github.io/docs/openstack/openstack/glance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/glance/</guid>
      <description>이미지를 관리하는 서비스 : Glance   이미지를 관리하는 서비스 : Glance   Cloud Computing을 사용하기 위해서는 Virtual Machine을 생성하기 위한 이미지가 필요로 하며, Glance는 Nova에서 생성하는 인스턴스의 운영체제에 해당하는 이미지를 관리하는 서비스     Glance의 구성요소    Glance는 위의 그림과 같이 3가지의 구성요소로 이루어져 있다      구성요소 역할     Glance-api 이미지를 확인/ 복구/ 저장하는 등의 질의를 하기 이한 api 요청/ 응답을 담당   Glance-registry 이미지에 대한 메타데이터를 저장하고 처리하는 역할을 담당 및 Glance database에 저장된 데이터를 불러들이는 역할을 수행   Glance-database 이미지의 관련 정보들을 보관       논리 아키텍처의 Glance   Glance 사용자들은 glance-api로 이미지를 등록, 삭제, 관리 glance-api는 glance-registry와 Glance database에서 이미지를 관리 이미지를 등록할 때는 glance-registry로 Glance database에 저장 등록된 이미지를 사용할 때는 Glance database에 바로 사용을 요청 관리자는 운영하려는 운영체제의 이미지를 glance-registry로 Glance database에 등록     가상 머신 이미지 포맷   aki: 아마존 커널 이미지 ami: 아마존 머신 이미지 ari: 아마존 ram 디스크 이미지 iso: 광학 디스크나 CD-ROM의 데이터 콘텐츠를 지원하는 아카이브 포맷 qcow2: QEMU 에뮬레이터가 지원하는 포맷, 동적으로 확장할 수 있으며, Copy on Write를 지원 raw: 구조화되지 않은 디스크 포맷 vdi: VirtalBox 모니터와 QEMU 에뮬레이터가 지원하는 디스크 포맷 vhd: VHD 디스크 포맷은 VMware, Xen 마이크로소프트, VirtualBox 같은 가상 머신 모니터가 사용하는 일반적인 디스크 포맷 vhdx: VHDX 디스크 포맷은 큰 디스크 크기를 지원하는 VHD 형식의 향상된 버전 vmdk: 일반적인 디스크 포맷으로 여러 가상 머신 모니터가 지원     컨테이너 포맷(container Format)   aki: 아마존 커널 이미지 ami: 아마존 머신 이미지 bare: 아마존 ram 디스크 이미지 docker: Docker 컨테이너 포맷 ova: tar 파일의 OVF 패키지 ovf: OVF 컨테이너 포맷        Glance 명령어  현재 이미지 목록 확인  openstack image list   특정 이미지의 자세한 정보 확인  openstack image show [이미지 이름]   이미지 삭제  openstack image delete [이미지 이름]   이미지 추가  openstack image create --public --container-format bare --disk-format qcow2 --file [경로를 포함한 이미지 파일 이름] [이미지 이름]    커스텀 이미지 생성   xming 윈도우에 설치   CentOS 준비 후 CentOS에 가상머신 프로그램 설치 및 실행  $ yum install qemu kvm qemu-kvm libvirt virt-install bridge-utils virt-manager dejavu-lgc-sans-fonts virt-viewer $ systemctl restart libvirtd  ISO 파일로 qcow2 각 이미지에 맞는 파일 생성  qemu-img create -f qcow2 [이미지 파일 위치] [이미지 파일 크기] qemu-img create -f qcow2 /test/centos7.</description>
    </item>
    
    <item>
      <title>Network Packet</title>
      <link>https://mung0001.github.io/docs/network/network/packet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/network/packet/</guid>
      <description>네트워크 패킷 ( Network Packet )    패킷이란 데이터의 묶음 단위로 한번에 전송할 데이터의 크기
  제 3계층 이상 ( Network 계층 ) 에서는 이 데이터의 묶음을 패킷이라고 부르며, 제 2계층에서는 프레임( Frame )
  패킷의 크기는 네트워크의 종류에 따라 크기가 다름
  패킷을 이렇게 나눠 보내는 이유는 컴퓨터는 동시다발적으로 데이터를 전송하는 데, 한 데이터에게만 데이터를 줄 경우, 한 컴퓨터와의 통신밖에 하지 못하기에, 데이터를 나눠 모두에게 통신할 수 있게 하며, 중간에 에러가 날 경우를 대비</description>
    </item>
    
    <item>
      <title>Operating System</title>
      <link>https://mung0001.github.io/docs/infra/infra/infra03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/infra/infra/infra03/</guid>
      <description>운영체제의 종류    Linux Server    오픈소스의 대표적인 운영체제로는 리눅스를 제일 먼저 꼽을 수 있으며, 리눅스에는 여러 배포판이 존재합니다.
  배포판에 따라 애프리케이션 및 패키지 관리방법에 차이가 있으며, 각 설치 방법에도 차이가 존재합니다.
  유상지원에는 대부분 Red hat 계열을 선택하며, 유상지원이 필요없을 시에는 다른 계열을 주로 사용합니다.
    레드햇 계열   Red hat Enterprise Linux
  CentOS
  Fedora</description>
    </item>
    
    <item>
      <title>Shell Script 문법</title>
      <link>https://mung0001.github.io/docs/development/shell/shell-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell-3/</guid>
      <description>Shell Programming    Shell 문법  Shell 변수    Shell 에서 변수는 사용할 때 선언
  변수에 초기 값을 대입할 때 변수를 만들게 된다.
  모든 변수는 문자열로 간주
  숫자 값을 가지는 경우에도 문자열로 간주
  변수는 대소문자가 구별 (Linux 시스템의 특성)
  변수에 값이 부여될 때를 제외하고, 변수를 사용할 경우 변수 앞에 &amp;lsquo;$&amp;lsquo;의 표시를 붙여야 한다.
  변수에 부여된 값은 echo 명령을 통해 확인 가능</description>
    </item>
    
    <item>
      <title>자동시작, 부팅, 종료</title>
      <link>https://mung0001.github.io/docs/system/window/window03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window03/</guid>
      <description>Windows Sever 부팅 및 종료   Windows Server 종료     Windows Server는 대체로 컴퓨터를 종료하는 일이 없으며, 만약 컴퓨터를 종료하거나 재부팅할 때는 왜 종료하는 이유를 선택하거나 입력해주어야 합니다.
  이전에 종료 및 부팅된 이벤트 기록을 확인하기 위해서는 Windows의 Event Viewer에서 System View로 확인이 가능합니다.
  이벤트 ID로도 검색이 가능합니다.
     Windows의 부팅과정    전원
  POST(Power On Self Test)</description>
    </item>
    
    <item>
      <title>4장 VPC</title>
      <link>https://mung0001.github.io/docs/aws/awssaa/saa-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awssaa/saa-4/</guid>
      <description>4장 Amazon Virtual Private Cloud   4장의 목표   복원력을 갖춘 아키텍처 설계  어떻게 멀티 티어 아키텍처 솔루션을 설계할지 결정한다.      안전한 어플리케이션 및 아키텍처 설계  단일 VPC 어플리케이션을 위한 네트워킹 인프라르 정의한다. 단일 VPC 애플리케이션을 위한 네트워킹 인프라르 정의한다.       Virtual Private Cloud ( 이하 VPC )    VPC란 EC2의 네트워크 계층으로, EC2 인스턴스를 비롯한 여러 AWS 서비스에 네트워크 리소스를 담을 수 있는 가상의 네트워크를 의미한다.</description>
    </item>
    
    <item>
      <title>AWS Network</title>
      <link>https://mung0001.github.io/docs/aws/amazonwebservice/aws_network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/amazonwebservice/aws_network/</guid>
      <description>AWS Network   Amazon VPC ( Virtual Private Cloud )   AWS 상에 프라이빗 네트워크 공간을 구축할 수 있는 서비스 VPC를 이용하면 논리적인 네트워크 분리가 가능하고 라우팅 테이블과 각종 게이트웨이의 설정이 가능 AWS의 계정 전용 가상 네트워크 서비스 VPC 내에서 각종 리소스 ( EC2, RDS, ELB 등 )을 시작할 수 있으며 다른 가상 네트워크와 논리적으로 분리되어 있음 S3, Cloudfront 등은 다른 VPC 서비스로 VPC 내에서 생성되지 않음 각 Region 별로 VPC 가 다수 존재할 수 있음 VPC 하나의 사설 IP 대역을 보유하고, 서브넷을 생성하며 사설IP 대역 일부를 나누어 줄 수 있음 허용된 IP 블록 크기는 /16( IP 65536개 )- / 28 (IP 16개 ) 권고하는 VPC CIDR 블록 ( 사설 IP 대역과 동일 ) 10.</description>
    </item>
    
    <item>
      <title>AWS 사용자 정의 VPC 생성</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/vpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/vpc/</guid>
      <description>AWS 사용자 정의 VPC 생성    AWS 사용자 정의 VPC 생성    이제 본격적으로 AWS 서비스들에 대해서 다루어 보겠습니다. 그 중, AWS 서비스의 근간이 VPC를 생성해 보도록 하겠습니다. VPC 중요한 개념이므로, VPC에 대한 개념이 부족한 분들은은 AWS VPC를 참고해주세요.     GUI 환경에서의 사용자 정의 VPC 생성   기본적인 VPC 생성의 순서
1. VPC 네트워크 생성 2. Internet Gateway 설정
2. Subnet 설정</description>
    </item>
    
    <item>
      <title>Docker 기본 명령어</title>
      <link>https://mung0001.github.io/docs/docker/docker/docker/docker-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/docker/docker-4/</guid>
      <description>Doker 기본 명령어   docker 명령어의 기본 형식 $ docker + &amp;lt; 명령어 &amp;gt; $ sudo usermod -aG docker ${USER} $ sudo service docker restart # user을 docker 그룹에 넣음  항상 root 권한으로 실행     Docker search 명령으로 이미지 검색 $ sudo docker search &amp;lt; 이미지 이름 &amp;gt;   보통 ubuntu, centos, redis 등 os나 프로그램 이름을 가진 이미지가 공식 이미지
  나머지는 사용자들이 만들어서 공개한 이미지</description>
    </item>
    
    <item>
      <title>Network</title>
      <link>https://mung0001.github.io/docs/infra/infra/infra04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/infra/infra/infra04/</guid>
      <description>Network    Network Equipment   기본적으로 네트워크를 구축하려면 네트워크 장비가 필요하며, 네트워크 장비에는 라우터와 스위치 등 다양한 장비가 있으므로 이에 대한 학습이 필요합니다.   Router    라우터는 수신한 패킷을 적절한 경로로 전송하는 네트워크로 장비로, 네트워크를 논리적으로 나누는 장비입니다.
  인터넷은 전 세계에 걸친 하나의 거대한 네트워크이며, 인터넷에는 LAN(Local Area Network)라 불리는 무수한 로컬 네트워크가 있고, LAN끼리는 라우터라고 불리는 장비를 매개로 연결되어 집니다.
  LAN에서 WAN(Wide Area Network)으로 날아가는 메시지가 발생하면 라우터를 통해서 다른 LAN의 라우터로 메시지를 전달(라우팅)으로 통신이 이루어집니다.</description>
    </item>
    
    <item>
      <title>Network PortNumber</title>
      <link>https://mung0001.github.io/docs/network/network/portnumber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/network/portnumber/</guid>
      <description>TCP/ UDP 포트 번호 정리  기본적인 포트번호    Well-known port : 0 ~ 1023
  Registered port : 1024 ~ 49151
  Dynamic port : 49152 ~ 65535
    Port Tables...  Register Port  </description>
    </item>
    
    <item>
      <title>Nova</title>
      <link>https://mung0001.github.io/docs/openstack/openstack/nova/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/nova/</guid>
      <description>가상의 서버를 생성하는 서비스 : Nova   가상의 서버를 생성하는 서비스 : Nova   Nova는 compute 서비스의 핵심 compute 서비스란, 가상머신이 필요한 자원을 할당하고, 관리하는 서비스로 하이퍼바이저, 메시지 Queue, 인스턴스 접속을 하는 콘솔 등의 다양한 기능이 유기적으로 연결되어 가상 서버를 생성할 수 있는 시스템을 구성하는 시스템     Nova 서비스의 고려사항     고려사항 설명     CPU compute 서비스가 동작할 호스트 시스템의 cpu가 기본적으로 자체 하드웨어 가상화를 지원이 필수   Hypervisor 서비스에 사용할 하이퍼바이저를 맞게 설정해야 하며, 기본적으로 사용하는 Hypervisor은 KVM/QEMU   Storage compute 서비스를 통해 인스턴스가 생성되면서 시스템의 디스크 용량의 제한을 가할 수 있음, 이를 위해 넉넉한 공간이 필요   Overcommit 기본적으로 자원을 할당하는 경우 1:1이 아닌 CPU는 16:1, Memory는 1.</description>
    </item>
    
    <item>
      <title>UNIX/ Linux 시스템 관리</title>
      <link>https://mung0001.github.io/docs/development/shell/shell-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell-4/</guid>
      <description>Shell Programming    UNIX/ Linux 시스템 관리         #</description>
    </item>
    
    <item>
      <title>사용자 계정</title>
      <link>https://mung0001.github.io/docs/system/window/window04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window04/</guid>
      <description>Windows Server 사용자 계정   사용자 계정    Windows는 여러 명의 사용자가 존재할 수 있고, 각 사용자마다 별도의 환경을 구성할 수 있습니다.
  컴퓨터의 자원들에 대한 사용권한을 각 사용자마다 제한할 수 있습니다.
  독립 실행형 서버에서 생성한 사용자 계정을 로컬 사용자 계정이라 부르며, 이 계정으로는 AD(Active Directory) 도메인에 로그온할 수 없으며 현재 컴퓨터의 자원에만 접근할 수 있습니다.
  독립 실행형 서버의 경우 기본적으로 Administrato와 Guest 사용자가 있습니다.</description>
    </item>
    
    <item>
      <title>5장 데이터베이스</title>
      <link>https://mung0001.github.io/docs/aws/awssaa/saa-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awssaa/saa-5/</guid>
      <description>5장 데이터베이스   5장의 목표   복원력을 갖춘 아키텍처 설계   안정적이고/ 복원력을 갖춘 스토리지를 선택한다.
  어떻게 AWS 서비스를 사용해 결합 해제 매커니즘을 설계할지 결정한다.
  어떻게 멀티 티어 아키텍처 솔루션을 설계할지 결정한다.
  어떻게 고 가용성 및/ 내결함성을 갖춘 아키텍처를 설계할지 결정한다.
      성능이 뛰어난 아키텍처 정의  성능이 뛰어난 스토리지 및 데이터베이스를 선택한다. 탄력성과 확장성을 갖춘 솔루션을 설계한다.</description>
    </item>
    
    <item>
      <title>AWS EC2 생성</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/ec2/</guid>
      <description>AWS EC2 생성    AWS EC2 생성    이번 장에서는 저번 장에서 생성했던 사용자 정의 VPC의 대역에 EC2를 생성해 보도록 하겠습니다. EC2 또한 중요한 개념이므로, EC2에 대한 학습을 원하는 분들은 AWS EC2를 참고해주세요.      EC2 ( Elastic Compute Cloud ) 생성   기본적인 EC2 생성의 순서
1. AMI ( Amazon Machin Image ) 선택 2. Instance type 선택
2. Instance Network 설정</description>
    </item>
    
    <item>
      <title>AWS Migrate</title>
      <link>https://mung0001.github.io/docs/aws/amazonwebservice/aws_migrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/amazonwebservice/aws_migrate/</guid>
      <description>AWS Migrate   AWS Application Discovery Service    AWS Application Discovery Service는 서버로부터 구성, 사용 및 동작 데이터를 수집하여 제공함으로써 워크로를 효율적 관리를 도와주는 서비스 기업의 고객이 사내 데이터 센터에 대한 정보를 수집하여 마이그레이션 프로젝트를 계획하는 데 도움을 줌 데이터 센터 마이그레이션을 계획하는 작업에는 상호 의존성이 높은 수천 개의 워크로드가 수반 되어지는 짐 수집된 데이터는 AWS Application Discovey Service 데이터 스토어에 암호화된 형태로 보관되어짐   AWS Application Discovery Service의 이점  마이그레이션 계획 수립을 위한 신뢰할 수 있는 검색  Application Discovey Service는 서버 사양 정보, 성능 데이터, 실행 프로세스 및 네트워크 연결 세부 정보를 수집, 이러한 데이터는 AWS로 마이그레이션하기 전에 상세한 비용 추정을 수행하거나 계획을 위해 서버를 애플리케이션으로 그룹화하는 데 사용될 수 있음   Migration Hub와 통합  AWS Application Discovery Service는 AWS Migration Hub와 통합되므로 마이그레이션 추적이 간소화 및 Hub를 통한 마이그레이션 상태 추적이 가능   암호화로 데이터 보호  AWS Application Discovery Service는 수집한 데이터를 AWS로 전송할 때와 Application Discovery Service 데이터 스토어에 저장할 때 모두 암호화   마이그레이션 전문가의 지원  AWS Professional Services와 APN 마이그레이션 파트너는 수많은 엔터프라이즈 고객이 클라우드로의 마이그레이션을 성공적으로 완료하도록 지원     AWS DMS ( Database Migration Service )    AWS Database Migration Service는 데이터베이스를 AWS로 빠르고 안전하게 마이그레이션할 수 있도록 지원하는 서비스 이그레이션하는 동안 소스 데이터베이스가 변함없이 운영되어 해당 데이터베이스를 사용하는 애플리케이션의 가동 중지 시간을 최소화 AWS Database Migration Service는 Oracle에서 Oracle로의 마이그레이션과 같은 동종 마이그레이션뿐 아니라 Oracle 또는 Microsoft SQL Server에서 Amazon Aurora로의 마이그레이션과 같은 이기종 데이터베이스 플랫폼 간의 마이그레이션도 지원 데이터베이스를 Amazon Aurora, Amazon Redshift, Amazon DynamoDB 또는 Amazon DocumentDB(MongoDB 호환 가능)로 마이그레이션하는 경우 6개월 동안 DMS를 무료로 제공   AWS DMS의 이점  간편한 사용  AWS Management Console에서 클릭 몇 번으로 데이터베이스 마이그레이션을 시작 마이그레이션이 시작되면, 마이그레이션 프로세스 도중에 소스 데이터베이스에 발생한 데이터 변경을 자동으로 복제하는 것을 비롯하여 마이그레이션 프로세스의 모든 복잡성을 DMS에서 관리   최소한의 가동 중단  AWS Database Migration Service는 사실상 가동 중단 시간 없이 데이터베이스를 AWS로 마이그레이션하도록 지원 마이그레이션하는 동안 소스 데이터베이스에 발생한 모든 데이터 변경 사항은 지속적으로 대상 데이터베이스에 복제되므로, 마이그레이션하는 동안 소스 데이터베이스가 변함없이 운영   널리 사용되는 데이터베이스 지원  AWS Database Migration Service를 사용하면 가장 널리 사용되는 상용 및 오픈 소스 데이터베이스 플랫폼에서 또는 이를 대상으로 데이터를 마이그레이션 가능   저렴한 비용  마이그레이션 프로세스 중에 사용한 컴퓨팅 리소스와 추가 로그 스토리지에 대한 비용만 지불 라바이트 규모의 데이터베이스를 3 USD라는 저렴한 비용   빠르고 쉬운 설정  마이그레이션 태스크는 AWS Database Migration Service가 마이그레이션을 실행하는 데 사용할 파라미터를 정의하는 곳 마이그레이션 태스크에는 소스 및 대상 데이터베이스에 대한 연결 설정과 더불어 마이그레이션 프로세스를 실행하는 데 사용할 복제 인스턴스 선택이 포함 동일한 태스크를 사용하여 실제로 마이그레이션을 수행하기 전에 테스트를 실행가능   안정성  AWS Database Migration Service는 복원력과 자가 복구 기능 존재 소스 및 대상 데이터베이스, 네트워크 연결성 및 복제 인스턴스를 지속적으로 모니터링     AWS SMS ( Server Migration Service )    AWS Server Migration Service는 온프레미스 VMware vSphere, Microsoft Hyper-V/SCVMM 및 Azure 가상 머신을 AWS 클라우드로 자동으로 마이그레이션하는 서비스 AWS SMS는 서버 VM을 Amazon EC2에 바로 배포할 수 있는 클라우드 호스팅된 Amazon 머신 이미지(AMI)를 증분 방식으로 복제하는 서비스   AWS SMS의 이점  클라우드 마이그레이션 프로세스가 단순화  마이그레이션이 시작되면 AWS SMS은(는) 복잡한 마이그레이션 프로세스를 관리하여 라이브 서버 볼륨의 AWS로 복제하고 새로운 AMI를 정기적으로 생성하는 작업 등을 자동화   여러 서버 마이그레이션 조율  AWS SMS는 복제 일정을 예약하고 애플리케이션을 구성하는 서버 그룹에 대한 진행 상황을 추적할 수 있도록 하여 서버 마이그레이션을 조율가능   서버 마이그레이션 증분 테스트  증분 복제 지원 기능을 통해 AWS SMS은(는) 마이그레이션된 서버에 대한 테스트를 신속하게 수행하고 확장가능 AWS SMS은(는) 증분 변경 사항을 온프레미스 서버에 복제한 후 그 차이만 클라우드로 전송하기 때문에 일부 변경 사항만 반복적으로 테스트를 통해 절약 가능   가장 많이 사용되는 운영 체제 지원  Windows 및 대표적인 몇 가지 Linux 배포판을 포함하는 운영 체제 이미지 복제를 지원   가동 중지 최소화  증분 AWS SMS 복제는 최종 전환 중 애플리케이션 가동 중지로 인한 비즈니스 영향을 최소화     AWS SMS 제한사항</description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>https://mung0001.github.io/docs/docker/docker/docker/docker-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/docker/docker-5/</guid>
      <description>Dockerfile   Dockerfile      도커는 이미지를 만들기 위해 Dockerfile 이라는 이미지 빌드용 DSL (Domain Specific Language 파일을 사용합니다.)
  DSL은 단순한 텍스트 파일로 일반적으로 소스와 함께 관리됩니다.
  $ sudo docker build &amp;lt;OPTIONS&amp;gt; &amp;lt;PATH&amp;gt; &amp;lt;URL&amp;gt; $ sudo docker build -t Mydocker .    Dockerfile 내부 살펴보기   하단 외의 추가적으로 궁금한 사항들은 Docker docs를 참조해주세요. Dockerfile 예시  # 1. ubuntu 설치 (패키지 업데이트 + 만든사람 표시) FROM ubuntu:18.</description>
    </item>
    
    <item>
      <title>Neutron</title>
      <link>https://mung0001.github.io/docs/openstack/openstack/neutron/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/neutron/</guid>
      <description>네트워크를 관리하는 서비스: Neutron   네트워크를 관리하는 서비스: Neutron  Neutron은 네트워크 서비스로 여러 노드에 여러 프로세스를 배치하는 독립형 서비스 프로세스는 서로 및 다른 OpenStack의 서비스와 상화 작용     Neutron의 논리 아키텍처      구성요소 기능     neutron-server network api의 기능 및 네트워크 확장 기능을 서비스하며, 각 포트의 대한 모델 및 Pfmf 지정, AMQP를 사용하여 데이터베이스와 통신하는 플러그인을 통해 수행   neutron-L2-agent OVS 가상 Bridge 사이에서데이터 패킷을 전달하기 위한 중계장치   neutron-l3-agent 태넌트 네트워크에서 VM의 외부 네트워크 엑세서를 위한 L3/ NAT 전달을 제공   neutron-dhcp-agent 테넌트 네트워크에 DHCP 서비스를 제공, DHCP agent는 메시지 큐에 엑세스할 수 있는 권한이 필요   Queue 다른 서비스 간의 통신의 역할을 수행   Neutron Database Neutron 서비스를 수행하기 위한 일련의 정보들은 보관, 관리하는 DB   Neutron 3rd Party Plugin Neutron 서비스의 안정적인 통신 역할을 수행   plugin agent 각 compute node에서 실행되며 로컬 vswitch을 구성 및 관리   network provider services 테넌트 네트워크에 추가 네트워킹 서비스를 제공      Neutron은 다양한 네트워크 플러그인이나 네트워크 모델을 지원 사용자는 Neutron API를 이용해 neutron-server로 IP 할당을 요청 neutron-server 들어온 요청을 Queue로 다시 요청 Queue는 neutron-dhcp-agent와 Neutron 3rd Party plugin으로 IP 할당 지시를 내림 neutron-dhcp-agent와 Neutron 3rd Party Plugin은 지시 받은 작업 수행을 시작 neutron-server는 수시로 작업 상태를 Neutron database에 저장 할당된 IP를 인스턴스에서 사용 가능     Neutron의 네트워킹 프로세스   neutron-server에 의해 명령을 요청을 받음 plugin을 토대로 Messae queue를 통해 각 agent의 기능을 수행 이와 함께 SDN 서비스를 수행     Neutron network의 종류      네트워크의 종류 기능     Management network OpenStack 구성 요소 간의 내부 통신에 사용, 기본적으로 IP 주소는 데이터 센터 내에서만 사용이 가능   Guest network 클라우드 배포 내에서 인스턴스 데이터 통신에 사용되며, 네트워킹 플러그인 및 테넌트가 만든 가상 네트워크의 구성 선택에 따라 변동   External network 외부에서 인스턴스에 대한 엑세스를 위해 제공되는 네트워크   API network OpneStack API를 외부에 노출시키는 네트워크       Neutron과 VRRP, DVR    VRRP(Virtual Router Redundancy Protocl)로 랜에서 정적으로 설정된 기본 라우터를 사용할 때, 하나 이상의 백업 라우터를 사용하는 방법을 제공하는 인터넷 프로토콜</description>
    </item>
    
    <item>
      <title>SDN</title>
      <link>https://mung0001.github.io/docs/network/network/sdn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/network/sdn/</guid>
      <description>SDN   SDN ( Software Defined Networking : 소프트웨어 정의 네트워킹 )    기존의 네트워크 인프라가 가지고 있던 문제를 해결하기 위해서 나온 개념
  기존의 네트워크 인프라를 구성하는 네트워크 장비들은 하나의 장비에 HW OS APP이 모두 들어가 있었기 때문에 장비 하나하나가 복잡한 기능을 모두 가지고 있었고 장비 자체의 사양도 높아야 했다. 그러다보니 장비마다 비용도 비싸지고 장비를 하나하나 설정해야하는 문제점들이 있었다.
  SDN은 기존의 장비의 HW와 OS APP 부분을 분리하여 장비 하나하나는 HW부분만을 담당하고 SW적인 부분은 중앙의 컨트롤러에서 제어한다.</description>
    </item>
    
    <item>
      <title>Shell Script System Management</title>
      <link>https://mung0001.github.io/docs/development/shell/shell-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell-5/</guid>
      <description>Shell Programming    Shell System Management         #</description>
    </item>
    
    <item>
      <title>Storage</title>
      <link>https://mung0001.github.io/docs/infra/infra/infra05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/infra/infra/infra05/</guid>
      <description>Storage    Storage Type    일반적으로 데이터를 저장하는 장치를 스토리지라 합니다.
  스토리지에는 서버 내부의 저장영역인 로컬 스토리지와 서버 외부의 저장 영역인 외부 스토리지가 있습니다.
  외부 스토리지에는 서버에 직접 연결하는 DAS와 네트워크를 통해 연결하는 NAS, SAN이 있습니다.
     로컬 스토리지    로컬 스토리지란 서버 내부에 디스크를 설치해서 이용하는 저장 영역을 의미하며, 외부 스토리지를 사용하지 않으므로 설치 공간을 절약할 수 있습니다.</description>
    </item>
    
    <item>
      <title>파일 및 폴더 관리</title>
      <link>https://mung0001.github.io/docs/system/window/window05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window05/</guid>
      <description>파일 및 폴더 관리   확장자 및 숨은 파일 보기   기본적으로 윈도우는 파일확장자 및 숨은 파일들은 표시되어 있게 설정되어있습니다.    이에 대한 설정을 위해 파일 탐색기 &amp;gt; 보기에서 설정하거나 혹은 옵션을 통해 설정합니다.       파일 및 폴더 공유    각 PC들은 네트워크를 통해 파일 및 폴더의 공유가 가능합니다.
  이를 사용하기 위해 먼저 FIRST 서버에서 네트워크 설정으르 수행합니다.</description>
    </item>
    
    <item>
      <title>6장 인증과 권한</title>
      <link>https://mung0001.github.io/docs/aws/awssaa/saa-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awssaa/saa-6/</guid>
      <description>6장 인증과 권한 부여 - AWS Identity and Access Management   6장의 목표   안전한 애플리케이션 및 아키텍처 설명   어떻게 애플리케이션 티어를 보호할지 결정한다.
  어떻게 데이터르 보호하맂 결정한다.
         AWS 리소스는 기업의 소중한 자산이므로 엄격하게 보호돼야 한다.
  그렇다고 관리자와 고객조차 액세스 할 수 없을 정도로 보안 수준을 높일 수도 없다.
  높은 보안 수준을 유지하면서 관리자와 고객의 액세스는 허용할 수 있는 완벽한 절충점이 IAM이다.</description>
    </item>
    
    <item>
      <title>AWS AMI 생성</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/ami/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/ami/</guid>
      <description>AWS AMI 생성    저번 장에서는 EC2를 생성해보았습니다. 이번 Marketplace에서 AMI를 사용해서 인스턴스를 만들고, 생성한 인스턴스를 사용해서 AMI를 만들어 보도록하겠습니다. AMI에 대한 학습을 원하는 분들은 AWS AMI를 참고해주세요.    AWS AMI 생성      먼저 EC2 생성을 위해 인스턴스 시작을 클릭 합니다.      AMI 선택화면이 나오면 AWS Marketplace에서 CentOS를 입력 후, 선택합니다. 이와 같이 Marketplace에서는 사람들이 만들어둔 이미지를 사용할 수 있습니다.</description>
    </item>
    
    <item>
      <title>AWS Developer</title>
      <link>https://mung0001.github.io/docs/aws/amazonwebservice/aws_developer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/amazonwebservice/aws_developer/</guid>
      <description>AWS_Developer   AWS CodeBuild    AWS CodeBuild는 소스 코드를 컴파일하는 단계부터 테스트 실행 후 소프트웨어 패키지를 개발하여 배포하는 단계까지 마칠 수 있는 완전관리형의 지속적 통합 서비스 CodeBuild는 지속적으로 확장되며 여러 빌드를 동시에 처리 사전 패키징된 빌드 환경을 사용하면 신속하게 시작할 수 있으며 혹은 자체 빌드 도구를 사용하는 사용자 지정 빌드 환경제작 가능 AWS CodeBuild는 코드를 실행하고 아티팩트를 Amazon S3 버킷에 저장 CodeBuild에서는 사용한 컴퓨팅 리소스에 대한 분당 요금이 청구    AWS CodeCommit    AWS CodeCommit은 안전한 Git 기반 리포지토리를 호스팅하는 완전관리형 소스 제어 서비스 뛰어난 확장성의 안전한 에코시스템에서 여러 팀이 협업하여 코드 작업을 수행가능 CodeCommit을 사용하면 소스 코드에서 바이너리까지 모든 항목을 안전하게 저장할 수 있고 기존 Git 도구와 원활하게 연동   에코시스템</description>
    </item>
    
    <item>
      <title>Cinder</title>
      <link>https://mung0001.github.io/docs/openstack/openstack/cinder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/cinder/</guid>
      <description>블록 스토리지 서비스 : Cinder   블록 스토리지 서비스 : Cinder   Cinder은 bloack storage 서비스로 storage를 가상화 시켜 여러 스토리지로 사용하거나, 공유할 수 있는 서비스 Cinder은 하나 이상의 노드에서 실행되도록 설계되었으며, SQL 기반 중앙 데이터베이스를 사용 Cinder은 집계 시스템을 사용하여 여러 데이터 저장소로 이동이 가능     Cinder 구성요소      구성요소 역할     DB 데이터저장을 위한 SQL 데이터베이스로, 모든 구성요소에서 사용   Web Dashboard API와 통신할 수 있는 외부 인터페이스   api http 요청을 받고 명령을 변환하여 대기열 또는 http를 통해 다른 구성요소와 통신   Auth Manager 사용자/ 프로젝트/ 역할에 따라, 리소스의 대한 허용을 결정   Scheduler 볼륨을 가져올 호스트를 결정   volume 동적으로 부착 가능한 블록 장치를 관리   backup 블록 저장 장치의 백업을 관리      외부 인터페이스인 dash-board에서 요청을 보내면, Cinder-api가 keyston에게 인증을 확인하기 위해 요청을 보낸다.</description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>https://mung0001.github.io/docs/docker/docker/docker/docker-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/docker/docker-6/</guid>
      <description>Docker Compose    도커는 복잡한 설정을 쉽게 관리하기 위해 YAML방식의 설정파일을 이용한 Docker Compose라는 툴을 제공합니다.   Docker compose 설치 $ curl -L &amp;#34;https://github.com/docker/compose/releases/download/1.9.0/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose $ chmod +x /usr/local/bin/docker-compose # docker-compose download docker-compose version 1.9.0, build 2585387 docker-py version: 1.10.6 CPython version: 2.7.9 OpenSSL version: OpenSSL 1.0.1t 3 May 2016 $ docker-compose version # 확인    Docker Compose로 wordpress 생성 $ vi docker-compose.</description>
    </item>
    
    <item>
      <title>Shell Script System Security</title>
      <link>https://mung0001.github.io/docs/development/shell/shell-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell-6/</guid>
      <description>Shell Programming    Shell Script System Security         #</description>
    </item>
    
    <item>
      <title>Solution</title>
      <link>https://mung0001.github.io/docs/infra/infra/infra06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/infra/infra/infra06/</guid>
      <description>Solution    Solution   IT 인프라 운영에 이용되는 여러 장비를 효율적으로 관리하기위해서 다양한 솔루션을 활용합니다.     감시 솔루션    나기오스 감시 솔루션
  웹 설정 화면이 없으며 설정을 텍스트 파일로 저장힙니다.
  장애가 발생했는 지에 대한 이력을 데이터베이스가 아닌 텍스트 파일에 저장합니다.
  감시 설정은 플러그인으로 추가할 수 있으며, 플러그인은 직접 만들 수 있고, 전용 커뮤니티에도 다량 공개되어 있습니다.</description>
    </item>
    
    <item>
      <title>암호화</title>
      <link>https://mung0001.github.io/docs/system/window/window06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window06/</guid>
      <description>암호화   암호화               암호화 연습을 위해 C 에 암호화연습, 그 안에 암호화.txt에 중요파일을 기업 후 저장하고, 그냥.txt에 일반파일을 기입 후 저장합니다.
  저장이 완료되면 암호화파일에 속성에서 고급 &amp;gt; 데이터 보호를 위한 암호화를 설정합니다.
        파일만 암호화를 선택합니다.        설정이 완료되면 다음과 같이 암호화가 완료되며, 암호화시킨 유저만이 이 파일에 접근이 가능해집니다.</description>
    </item>
    
    <item>
      <title>AWS Elastic IP 할당</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/eip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/eip/</guid>
      <description>AWS Elastic IP 할당   AWS Elastic IP ( 이하 EIP )란 인스턴스의 IP를 고정적으로 할당시킨 IP를 뜻합니다. 만약 인스턴스를 생성할 시, 퍼블릭 IP를 활성화 하면, 인스턴스를 자동 실행시마다 유동적으로 IP가 변화하여 문제가 되는 데, 이러한 문제들을 해결할 수 있습니다.    AWS Elastic IP 할당      EIP를 생성하기 위해 메뉴에서 EC2 서비스에서 네트워크 및 보안 -&amp;gt; 탄력적 IP를 선택합니다. 탄력적 IP 주소 할당을 클릭합니다.</description>
    </item>
    
    <item>
      <title>AWS Management</title>
      <link>https://mung0001.github.io/docs/aws/amazonwebservice/aws_management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/amazonwebservice/aws_management/</guid>
      <description>AWS Management   Amazon CloudWatch    AWS 클라우드 리소스와 AWS에서 실행되는 애플리케이션을 위한 모니터링 서비스 리소스 및 애플리케이션에 대해 측정할 수 있는 변수인 지표를 수집하고 추적 가능 사용중인 모든 AWS 서비스에 대한 지표가 자동적으로 표시디며, 사용자 지정 대시보드를 통해 사용자 지정 애플리케이션에 대한 지표를 표시하고 지정 집합 표시 가능 지표는 Cloudwatch에 게시된 시간 순서별 데이터 요소 세트이며, 모니터링할 변수 ( 가령 EC2의 CPU 사용량은 EC2가 제공하는 하나의 지표 ) 기본 모니터링과 세부 모니터링으로 나뉘며, 가각 5분과 1분 주기로 수집함 기본 모니터링은 자동활성화이지만, 세부 모니터링은 선택사항 기본적으로 CPU, Network, Disk, Status Check 등을 수집 ( Memory 항목이 없음 ) 지표 데이터의 보존기간  기간 60초 미만의 경우, 3시간 기간 60초의 경우, 15일 기간 300초의 경우 63일 기간 3600초의 경우, 455일   AWS CLI 혹은 API를 이용하여, Cloudwatch에 사용자 정의 지표 게시 가능 경보기능을 사용하여 어떤 지표가 일정기간동안 일정값에 도달할 경우 각 서비스가 취해야할 행동을 정의할 수 있음 모니터링하기로 선택한 측정치가 정의한 임계값을 초과할 경우 하나 이상의자동화 작업을 수행하도록 구성 EC2의 경우, 경보에 따라, 인스턴스 중비, 복구, 종료, 재부팅 가능   Cloudwatch Agent  EC2에 Agent를 설치하게 되면 더 많은 시스템 수준 지표를 수집할 수 있음 온프레미스 서버 또한 Cloudwatch Agent 사용 가능 Memory 항목 포함 Cloudwatch Agent는 로그를 수집할 수 있으며, 후술할 Cloudwatch Logs 기능 사용 가능   Cloudwatch Logs  EC2( Agent에서 수집된 ), CloudTrail, Route 53, Route 53, VPC flow Log 등 기타 소스에서 발생한 로그 파일을 모니터링, 저장 및 엑세스하는 기능 Cloudwatch Agent를 사용하여 로그를 수집 Cloudwatch Log Insights를 사용하여 CloudWatch Logs에서 로그 데이터를 대화식으로 검색해 분석할 수 있음 Agent는 기본적으로 5초마다 로그 데이터를 전송   Cloudwatch Events  AWS 각 서비스의 이벤트가 사용자가 지정한 이벤트패턴과 일치하거나 일정이 트리거될 경우, 사용자가 월하는 기능을 발동시키도록 하는 기능 이번트 소스와 대상으로 나뉨 이벤트 소스: AWS 환경에서 발생하는 이벤트이며, 가령 S3의 경우 오브젝트 등록, 삭제 등을 들 수 있음 대상: 이벤트 발생시 해야할 행동을 정의하는 것이며, SNS 전송 혹은 람다, SQS 게시 등을 설정할 수 있음 이벤트 소스에 해당하는 규칙이 트리거될 경우 대상에 해당하는 서비스를 실행시킴 이벤트가 시스템에 생성해 둔 규칙과 일치하는 경우, AWS Lambda 함수를 자동으로 호출하고, 해당 이벤트를 Amazon Kinesis 스트림에 전달하고, Amazon SNS 주제를 알림&#39; having 1=1##    AWS CloudFormation    인프라를 관리 간소화를 목적으로 하는 서비스 AWS의 리소스를 일일이 설정하지 않고 해당 서비스의 프로비져닝과 설정을 미리 구성하여 반복작업을 줄이도록 도와주는 역할 EC2, Auto Scaling Group으로부터 ELB, RDS, S3 등을 사전에 구성하여 한 번의 클릭으로 다수의 서비스를 빠르게 생성할 수 있음 생성된 리소스 모음은 다른 계정 혹은 다른 리전에 옮겨 사용 가능   Stack  하나의 단위로 관리할 수 있는 AWS 리소스들의 모음 스택을 생성, 업데이트 또는 삭제하여 리소스 모음을 생성, 업데이트, 삭제가 가능 스택에서 실행중인 리소스를 변경해야 하는 경우 스택을 업데이트할 수 있는 데, 이 업데이트된 세트를 변경세트라 칭함 스택을 삭제하는 경우 삭제할 스택을 지정하면 해당 스택과 스택 내 모든 리소스를 삭제 AWS에서 리소스를 삭제할 수 없는 경우 스택이 삭제 스택의 리소스 중 하나라도 성공적으로 생성되지 않은 경우 성공적으로 생성한 모든 리소스를 모두 삭제함 ( Automatic rollback on error )   Template   스택을 구성하는 AWS 리소스를 JSON 혹은 YAML 형식으로 선언한 텍스트 파일</description>
    </item>
    
    <item>
      <title>Ceilometer</title>
      <link>https://mung0001.github.io/docs/openstack/openstack/ceilometer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/ceilometer/</guid>
      <description>리소스의 사용량과 부하를 관리하는 서비스 : Ceilometer   리소스의 사용량과 부하를 관리하는 서비스 : Ceilometer    Ceilometer은 각 서비스들의 예상 부하에 따라 추가 작업과 노드를 관리하는 역할을 수행 클라우드에서 배포된 자원의 사용량과 성능을 측정해 사용자가 자원 상태를 모니터링 할 수 있는 기능을 제공 Ceilomete는 리버티 버전에서 기존에 알람 서비스를 하던 부분을 aodh로 분리      핵심 서비스 역할     Polling agent OpenStack 서비스를 폴링하고 미터를 빌드하도록 설계된 데몬 프로세스   Notification agent 메시지 큐에서 알림을 듣고 이벤트 및 샘플로 변환하며 파이프 라인 조치를 적용하도록 설계된 데몬 프로세스       Ceilometer로 표준화 및 수집 된 데이터는 다양한 대상으로 전송 Gnocchi는 이러한 스토리지 및 쿼리를 최적화하기 위해 시계열 형식으로 측정 데이터를 캡처하도록 개발 Aodh는 사용자 정의 규칙이 깨졋을 때 경고를 보낼 수 있는 경보 서비스 Ceilomter은 이와 같이 리소스를 감시 및 예상하여 다른 작업을 수행할 수 있도록 하는 서비스를 의미     데이터 수집    위의 그림과 같이 Polling agents에서 각 서비스들의 API의 리소스를 읽어 데이터를 수집 Notification agents는 Polling agents에서 수집한 데이터들을 토대로 Ceilomter 서비스 혹은 Events로 변환하는 역할을 수행     데이터 처리    수집된 데이터를 토대로 Notification bus를 통해 엔드 포인트로 재분배하여 이벤트 및 샘플로 처리하느 역할을 수행     데이터 요청    데이터의 요청은 수집된 자료들을 토대로 서로 데이터를 주고 받으며, Polling agents라는 클라우드 컨트롤러에서 처리되며, 여러 플러그인을 사용하여 데이터를 통신합니다.</description>
    </item>
    
    <item>
      <title>Docker Swarm</title>
      <link>https://mung0001.github.io/docs/docker/docker/docker/docker-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/docker/docker/docker/docker-7/</guid>
      <description>Docker Swarm     Swarm은 Docker와 별개로 개발되었지만 Docker 1.12 버전부터 Swarm mode라는 이름으로 합쳐졌습니다.
  도커에 모든 게 내장되어 다른 툴을 설치할 필요가 없고 도커 명령어와 compose를 그대로 사용할 수 있어 다른 툴에 비해 압도적으로 쉬우며 편리합니다.
  기능이 단순하고 필요한 것만 구현되어 있어 세부적인 컨트롤의 난이도는 높은 편입니다.
     Docker Swarm 용어절리   Swarm   정식 명칭은 도커 1.</description>
    </item>
    
    <item>
      <title>Infra operation</title>
      <link>https://mung0001.github.io/docs/infra/infra/infra07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/infra/infra/infra07/</guid>
      <description>Infra operation    Infra operation  장애 대응    하드에어는 언젠가 반드시 고장이 난다는 생각 때문에 서비스를 멈추지 않도록 하는 방향으로 진화했습니다.
  엔지니어에게 감시 솔루션은 장애 감지를 위해 특히 중요한 도구로, 장애를 빠르고 확실하게 감지하기 위해서는 감시 솔루션 없이는 불가능합니다.
  감시 솔루션을 신중하게 선택하고 모든 보유 기기에서 일어날 수 있는 온갖 장애 패턴을 모두 확실히 감지할 수 있도록 엄격하게 설정해야 합니다.
     병목현상 해결    일반적으로 IT 시스템에서는 병목이 한 군데만 있어돋 시스템 전체의 응답에 악영향을 끼칩니다.</description>
    </item>
    
    <item>
      <title>Shell Customizing</title>
      <link>https://mung0001.github.io/docs/development/shell/shell-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell-7/</guid>
      <description>Shell Programming    Customizing         #</description>
    </item>
    
    <item>
      <title>Windows Shell</title>
      <link>https://mung0001.github.io/docs/system/window/window07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window07/</guid>
      <description>Windows Shell   Windows CLI   Windows Server는 GUI환경이 아닌 도스환경으로도 실행될 수 있으며, GUI 환경이 아닌 만큼 리소스의 낭비가 적은 특징을 가지고 있습니다.       명렁어   사용자 컴퓨터의 이름을 나타내는 명령어  $ hostname $ echo %computername%     입력 문자를 출력하는 명령어  $ echo Hello #     사용자 컴퓨터의 이름을 변경하는 명령어  $ netdom renamecomputer %COMPUTERNAME% /newname:CORE # 컴퓨터의 이름을 CORE로 변경     재부팅  $ shutdown /r /t 0 # 0/ 초/ 안에 reboot를 진행 # /s stop /r reboot /t time     네트워크 인터페이스 및 네트워크 정보 확인  $ ipconfig     DNS 확인  $ nslookup     화면의 텍스트를 지우는 명령어  $ cls     네트워크 shell 명령어  $ netsh netsh&amp;gt; interface ipv4 show interface # 인터페이스 관련 정보를 출력 netsh&amp;gt; interface ipv4 set address name=&amp;#34;3&amp;#34; source=static address=192.</description>
    </item>
    
    <item>
      <title>AWS ELB ( 2 Tier ) 생성</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/elb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/elb/</guid>
      <description>AWS ELB 생성    이번 장에서는 생성된 인스턴스들을 로드밸런싱하는 방법에 대해 알아보도록 하겠습니다. ELB 또한 중요한 개념이니, ELB에 대한 학습을 원하는 분들은 AWS ELB를 참고해주세요.    AWS ELB 생성    ELB에 대한 생성 순서은 아래의 순서대로 진행합니다.   1. 인스턴스 생성
2. 대상그룹 생성
3. 로드 밸런서 생성
  인스턴스 생성   먼저 기본 VPC에 가용영역 a와 c에 한 대씩, 총 두 대의 인스턴스를 생성해주세요.</description>
    </item>
    
    <item>
      <title>AWS Security</title>
      <link>https://mung0001.github.io/docs/aws/amazonwebservice/aws_security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/amazonwebservice/aws_security/</guid>
      <description>AWS Security    기본적으로 AWS의 보안적 요소는 설비, 인프라 등과 관련된 물리적인 부분과 네트워크 인프라 등은 AWS가 책임을 지고 보안 대책을 수행합니다. 이러한 인프라 위의 OS, 애플리케이션, 네트워크 설정, 계정 관리 등은 사용자가 책임을 져야 하는 공유 책임 모델의 구조를 띄고 있습니다.    AWS가 제공하는 기본적인 보안 서비스      AWS 제공 서비스 서비스 개요     통신 경로 암호화 AWS 매니지먼트 콘솔로의 접속 또는 API를 사용할 때 HTTPS를 사용해 데이터를 암호화합니다.</description>
    </item>
    
    <item>
      <title>Horizon</title>
      <link>https://mung0001.github.io/docs/openstack/openstack/horizon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/horizon/</guid>
      <description>외부 인터페이스 대시보드 서비스 : Horizon   외부 인터페이스 대시보드 서비스 : Horizon    사용자가 웹 UI로 인스턴스 생성, 삭제, 관리 등을 쉽고 빠르게 처리할 수 있게 지원 Horizon은 아파치 웹 서버를 사용 및 Python, Django 프레임워크로 구현     논리 아키텍처의 Horizon   논리 아키텍처에서 보이는 Horizon은 단순히 Horizon 자체 모듈만 존재 모든 서비스의 API와 연동해서 사용자에게 웹 서비스를 제공  </description>
    </item>
    
    <item>
      <title>Swift</title>
      <link>https://mung0001.github.io/docs/openstack/openstack/swift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/swift/</guid>
      <description>오브젝트 스토리지 관리 서비스 : Swift    다른 서비스와는 다르게 단독으로 구성되며, 클라우드 스토리지 서비스 ( ex : 네이버 클라우드 ) Swift 서비스는 Object Storage 서비스 중 하나 분산 구조의 Object 데이터의 저장 스토리지 체계로 구성 빠른 성능 및 대용량 저장공간이 필요 할 때 사용 동영상, 이미지, 디스크 이미지 등의 대용량, 비정형 데이터를 파일과 메타데이터로 저장하여 분산 관리     오브젝트 스토리지 관리 서비스 : Swift   Swift의 논리 아키텍처     구성요소 역할     swift-proxy-server 사용자가 서비스를 다루기 위한 REST API 서비스   swift-account-server 계정 정보 및 사용자 정보를 관리하고 각 컨테이너 별 정보를 관리하기 위한 데몬 프로세스   swift-container-server 사용자 게정의 컨테이너를 간리하는 서비스   swift-object-server 실제 데이터를 저장하고 관리하는 서비스     어카운트, 컨테이너는 별도의 메타데이터가 데이터베이스로 관리 오브젝트는 저장 공간에 직접 저장되는 방식으로 구성 swift-proxy-server는 오픈스택의 Object API를 제공 사용자는 API를 사용해 데이터를 사용     Swift의 논리적 구성 요소    Swift서비스는은 스토리지 공간 여러 개를 합쳐 하나의 커다란 공간으로 가상화하고, 그 안에서 사용자만의 별도 스토리지 공간이 있는 것처럼 다시 가상화</description>
    </item>
    
    <item>
      <title>백업과 복구</title>
      <link>https://mung0001.github.io/docs/system/window/window08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window08/</guid>
      <description>Windows Server 백업과 복구   Windows Server의 백업 기능    사고는 언제나 발생할 수 있으며, 이러한 사고를 대비하기 위한 방편 중에서 반드시 해야할 것이 백업입니다.
  기존의 폴더 또는 파일을 다른 안전한 장소에 보관하여 문제가 생길기 백업했던 데이터를 원래대로 복원혹은 복구가 가느하도록 합니다.
  Windows Server에서는 자체적으로 백업 기능을 제공하며, 백업은 대체로 별도의 하드디스크나 다른 컴퓨터의 공유 폴더에 하는 것이 효과적입니다.
  복구는 삭제된 일부 폴더만 복구할 수도 있으며, 볼륨 전체를 복구할 수도 있습니다.</description>
    </item>
    
    <item>
      <title>AWS Analysis</title>
      <link>https://mung0001.github.io/docs/aws/amazonwebservice/aws_analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/amazonwebservice/aws_analysis/</guid>
      <description>AWS Analysis   Amazon Athena       Amazon CloudSearch       Amazon EMR       Amazon ES       Amazon Kinesis       Amazon QuickSight       AWS DataPipeline      #</description>
    </item>
    
    <item>
      <title>AWS AutoScaling</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/as/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/as/</guid>
      <description>AWS AutoScaling    이번 장에서는 CloudComputing의 꽃이라고도 할 수 있는 AutoScaling 서비스를 구축해보겠습니다. AutoSacling의 대한 개념은 AutoScaling을 참조해주세요.    AWS AutoScaling ( 이하 As )      As 그룹 생성을 위해 AWS에 접속 합니다. 인스턴스를 생성하여, Apache가 자동시작되어있게 설정 후, AMI를 생성합니다. AMI 생성 참고      AMI 생성 후, As 그룹 생성을 위해 좌측의 메뉴에서 Auto Scaling &amp;gt; Auto Scaling 그룹 생성을 클릭합니다.</description>
    </item>
    
    <item>
      <title>AWS RDS 생성</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/rds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/rds/</guid>
      <description>AWS RDS 생성    AWS RDS는 우리가 흔히 아는 Database ( Oracle db, Mysql, MariaDB )와 동일한 역할을 수행하지만, 보다 편리하고 안전하게 관리가 가능합니다. AWS RDS는 중요한 개념이므로, RDS에 대한 개념이 학습이 필요한 들은 AWS RDS를 참고해주세요.    AWS RDS 생성      먼저, RDS의 생성을 위해 AWS의 접속하여 RDS를 검색 후 클릭합니다.      데이터베이스 생성 -&amp;gt; 데이터베이스 생성을 클릭합니다.</description>
    </item>
    
    <item>
      <title>Heat</title>
      <link>https://mung0001.github.io/docs/openstack/openstack/heat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/heat/</guid>
      <description>오케스트레이션 서비스 : Heat   Heat   Heat는 탬블릿과 Stack을 사용하여 자동으로 인스턴스의 리소스를 추가하거나 줄이는 서비스 오케스트레이션은 자원 관리, 배치, 정렬을 자동화하는 것 오케스트레이션은 인스턴스 생성에 대한 일련의 과정을 자동화해서 인프라를 쉽게 배포할 수 있도록 하는 탬플릿 기반 엔진 오케스트레이션에서 사용되는 템플릿 언어는 인프라, 서비스, 응용프로그램, 프로비저닝, 자동화 컴퓨팅, 스토리지, 네트워킹, 자동 스케일링 등에 사용 가능   Heat의 논리 아키텍처      구성요소 역할     heat-api RPC heat 엔진에 전송해서 요청된 API를 처리한 REST API를 제공   heat-api-cfn AWS CloudFormation과 호환되는 AWS 타입의 Query API를 제공   heat-engine 템플릿을 생성하고, Consumer(API를 사용하려고 접근하는 애플리케이션이나 서비스)를 다시 이벤트로 제공하는 오케스트레이션의 주 작업을 수행   queue 각 서비스들이 통신을 하기 위한 서비스      </description>
    </item>
    
    <item>
      <title>원격접속서버</title>
      <link>https://mung0001.github.io/docs/system/window/window09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window09/</guid>
      <description>원격접속을 위한 TELNET Server, SSH Server   TELNET Server    TELNET 서버는 오랫동안 전통적으로 사용되어 온 원격 접속 서버로, 보안이 취약하지만 최근에는 보안 기능을 첨가하여 사용되어지고 있습니다.
  기본적으로서버에 접속하기 이해서는 꼭 클라이언트 프로그램이 필요합니다.
  서버 OS Windows라고 클라이언트 OS도 반드시 Windows일 필요는 없으며, 즉 서버의 OS와 클라이어트의 OS가 같을 할 필요는 없습니다.
  Windows Server 2016부터는 내장된 TELNET 서버가 제거되어 직접 설치가 필요합니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/network/mail/mail-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/mail/mail-server/</guid>
      <description>Mail 서버 생성   단계  SSL 보안 인증서 발급받기  도메인 주소   메일서버 설치   Ubuntu 18.04
   SSL 보안 인증서 발급받기  1. 도메인 주소 설정  SSL 보안 인증서를 사용하기 위해서는 http://도메인으로 해당 사이트에 접근이 가능해아합니다. 이미 도메인 주소가 있으신 분은 그것을 사용하고, 없으신 분은 Link에서 무료 도메인을 사용하시면 됩니다.   2. SSL  무료 SSL을 생성합니다.  $ sudo apt-get install -y postfix # postfix 설치    VMware에 NAS 설치   Vmware에서 Custom으로 Virtual Machine을 설치합니다.</description>
    </item>
    
    <item>
      <title>3Tier</title>
      <link>https://mung0001.github.io/docs/network/network/3tier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/network/3tier/</guid>
      <description>Local 3Tier 구현    OS, 구현 프로그램  Ubuntu18.04 Apache2 Tomcat8 Mysql5.8 GNS3   IP 대역  10.10.10.0/24 Public 20.20.20.0/24 Private 30.30.30.0/24 Private2  Public 대역 10.10.10.10 Apache1 10.10.10.11 Apache2  Private 대역 20.20.20.20 Tomcat1 20.20.20.21 Tomcat2  Public 대역 30.30.30.30 Mysql1 30.30.30.30 Mysql2     sudo vi /etc/netplan/50-cloud-init.yaml network: version: 2 ethernets: ens33: dhcp6: no addresses: - [ IP addresses ] gateway4: [ gateway ] nameservers: addresses: [ [nameserver] ] $ sudo netplan apply $ hostname -l 아키텍처 사진</description>
    </item>
    
    <item>
      <title>AWS 3Tier 구현</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/3tier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/3tier/</guid>
      <description>****    ****          예제 1. 다음의 인스턴스를 생성해보세요.  예제 1. 답안↕ 사용자 계정을 생성할 시, 엑세스 유형에서 프로그래밍 방식 엑세스만을 선택합니다. 정책에서 admin의 권한을 선택 후 생성합니다.   </description>
    </item>
    
    <item>
      <title>Az-900 : CloudComputing</title>
      <link>https://mung0001.github.io/docs/azure/azuretraining/azure00/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/azuretraining/azure00/</guid>
      <description>Az-900 : CloudComputing   클라우드 컴퓨팅    클라우드 컴퓨팅은 스토리지 공간이나 CPU 주기와 같은 리소스를 다른 회사의 컴퓨터에 대여하는 서비스이며 사용한 만큼의 요금만을 지불합니다.
  클라우드 공급 기업은 작업을 싱행하는 데 필요한 실제 하드웨어와 이 하드웨어를 최신 상태로 유지할 책임이 존재하며, 제공되는 컴퓨팅 서비스는 클라우드 공급자에 따라 달라지며, 일반적으로는 하단의 항목이 기본적으로 포함됩니다.
     Compute power : 리눅스 서버나 웹 프로그램
  Storage : 저장 및 데이터베이스 역할</description>
    </item>
    
    <item>
      <title>Azure Computing</title>
      <link>https://mung0001.github.io/docs/azure/microsoftazure/azure00/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/microsoftazure/azure00/</guid>
      <description>Azure Computing     Azure Computing은 클라우드 기반의 애플리케이션을 실행하기 이한 주문형 컴퓨팅 서비스로 가상 머신 및 컨테이너를 통해 멀티 코어 프로세서, 슈퍼 컴퓨팅 리소스를 제공합니다.
  Azure Computing은 애플리케이션 및 서비스를 호스팅하는 다양한 옵션을 제공합니다.
     Azure Virtual Machines     가상 머신 또는 VM은 무리적 컴퓨터의 소프트웨어 에뮬레이션입니다.
  VM에는 가상 프로세서, 메모리, 스토리지 및 네트워킹 리소스가 포함됩니다.</description>
    </item>
    
    <item>
      <title>GNS3</title>
      <link>https://mung0001.github.io/docs/network/network/gns3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/network/gns3/</guid>
      <description>네트워크 실습을 위한 GNS3 설치    GNS3 Download Link      상단의 GNS3 다운로드 링크를 클릭하여 GNS3에 접속 후, 로그인 혹은 회원가입을 진행합니다.      로그인 후, Download를 클릭하여 운영체제에 맞는 GNS3 설치파일을 다운로드 합니다.      기본 값으로 설치를 진행합니다. 단 솔라윈드 톨킷은 설치하지 않습니다.      GNS3의 설치가 완료되었습니다.      GNS3가 설치되면 GNS3를 실행시킵니다.</description>
    </item>
    
    <item>
      <title>HTML 문법</title>
      <link>https://mung0001.github.io/docs/development/web/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/web/html/</guid>
      <description>HTML   HTML 기본양식...&amp;lt;head&amp;gt;&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;   태그   줄 바꾸기 &amp;lt;br&amp;gt;  구분선 &amp;lt;hr&amp;gt;  제목 &amp;lt;h1- h6&amp;gt; &amp;lt;/hn&amp;gt;  문단 &amp;lt;p&amp;gt; &amp;lt;/p&amp;gt;  입력을 그대로 표시하는 태그 &amp;lt;pre&amp;gt; &amp;lt;/pre&amp;gt;  인용문을 넣는 태그 &amp;lt;blockquote&amp;gt; &amp;lt;/blockquote&amp;gt;  인용문을 인 라인에 넣는 태그 &amp;lt;q&amp;gt; &amp;lt;/q&amp;gt;   text   밑줄 &amp;lt;u&amp;gt; &amp;lt;/u&amp;gt;  굵은 텍스트 &amp;lt;b&amp;gt; &amp;lt;/b&amp;gt;  텍스트 강조 &amp;lt;strong&amp;gt; &amp;lt;/strong&amp;gt;  형광펜 텍스트 &amp;lt;mark&amp;gt;&amp;lt;/mark&amp;gt;  동아시아 글자 표시 rt는 읽는 방법표기법 &amp;lt;ruby&amp;gt; &amp;lt;rt&amp;gt; &amp;lt;/rt&amp;gt; &amp;lt;/ruby&amp;gt;  이탤릭 체 Emphasized tag &amp;lt;em&amp;gt; &amp;lt;/em&amp;gt;  줄 찍 &amp;lt;del&amp;gt; &amp;lt;/del&amp;gt;  인설트 태그 &amp;lt;ins&amp;gt; &amp;lt;/ins&amp;gt;  This is &amp;lt;sub&amp;gt; sub &amp;lt;sub&amp;gt; text &amp;lt;/sub&amp;gt; &amp;lt;/sub&amp;gt; &amp;lt; &amp;gt; 태그 요소 &amp;amp;lt; &amp;amp;gt;  스페이스바 &amp;amp;nbsp; 약자 속성, title 속성을 함께 사용가능 &amp;lt;addr&amp;gt; &amp;lt;/addr&amp;gt;  포스트에서 참고 내용을 표시 &amp;lt;cite&amp;gt; &amp;lt;/cite&amp;gt;  컴퓨터 인식코드 &amp;lt;code&amp;gt; &amp;lt;/code&amp;gt;  키보드, 음성 입력 &amp;lt;kbd&amp;gt; &amp;lt;/kbd&amp;gt;  작게 표시 (부가정보) &amp;lt;small&amp;gt; &amp;lt;/small&amp;gt;  아래 첨자 &amp;lt;sub&amp;gt; &amp;lt;/sub&amp;gt;  위 첨자 &amp;lt;sup&amp;gt; &amp;lt;/sup&amp;gt;  취소선 &amp;lt;s&amp;gt; &amp;lt;/s&amp;gt;   List  #list &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; ul의 종류: disc, circle, sqaure, none &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;ol&amp;gt; ol의 종류: 1, i, l, a, A, none &amp;lt;dl&amp;gt; &amp;lt;dt&amp;gt; &amp;lt;/dt&amp;gt; &amp;lt;dd&amp;gt; &amp;lt;/dd&amp;gt; &amp;lt;dt&amp;gt; &amp;lt;/dt&amp;gt; &amp;lt;dd&amp;gt; &amp;lt;/dd&amp;gt; &amp;lt;/dl&amp;gt; &amp;lt;h1 style= &amp;#34; 설정 값 &amp;#34; &amp;gt; &amp;lt;/h1&amp;gt; p { color : xx; background: xx; adding: xx; } xx-color: rgb(x,x,x); #xxxxxx; hsl(x,x%,x%)   링크태그   인터넷 링크 &amp;lt;a href=&amp;#34;링크할 주소&amp;#34; [속성=&amp;#34;속성 값&amp;#34;]&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;a href =&amp;#34;도메인 주소&amp;#34;&amp;gt; &amp;lt;/a&amp;gt; a 태그 안에서 사용 가능한 요소 href 링크한 문서나 사이트의 주소를 입력 target 링크한 내용이 표시될 위치를 지정 target =&amp;#34;_blank&amp;#34; 링크 내용이 새 창이나 새 탭에서 열림 열림 표시 전체 화면에 표시 download 링크한 내용을 보여주는 것이 아니라 다운로드 rel 현재 문서와 링크한 문서의 관계를 알려줌 hreflang 링크한 문서의 언어를 지정 type 링크한 문서의 파일 유형을 알려줌 a 대신 iframe을 사용시 액자식 구성 사용 가능 앵커 기능 &amp;lt;태그 id=&amp;#34;앵커 이름&amp;#34;&amp;gt; 텍스트 또는 이미지&amp;lt;/태그&amp;gt; &amp;lt;a href=&amp;#34;#앵커 이름&amp;#34;&amp;gt;텍스트 또는 이미지&amp;lt;/a&amp;gt;   이미지 링크  &amp;lt;img src=&amp;quot;이미지의 경로&amp;quot; 속성값=&amp;quot;&amp;quot;&amp;gt;width=&amp;quot;n&amp;quot;이미지의 넓이를 지정height=&amp;quot;n&amp;quot;이미지의 높이를 지정alt=&amp;quot;설명&amp;quot;이미지의 설명을 지정&amp;lt;figure&amp;gt; 요소 &amp;lt;/figure&amp;gt;&amp;lt;figcaption&amp;gt; 설명 &amp;lt;/figcaption&amp;gt;요소로 묶은 것에 대한 설명을 붙임&amp;lt;map name=&amp;quot;이름&amp;quot;&amp;gt;&amp;lt;area&amp;gt;&amp;lt;area shape=&amp;quot;rect&amp;quot; coords=&amp;quot;n,n,n,n&amp;quot; href=&amp;quot;주소&amp;quot; alt=&amp;quot;설명&amp;quot;&amp;gt;.</description>
    </item>
    
    <item>
      <title>Linux 개요</title>
      <link>https://mung0001.github.io/docs/system/linux/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/linux/</guid>
      <description>Linux   Linux 기초   유닉스 기반의 컴퓨터 운영체제의 한 종류 핀란드 헬싱키 대학의 대학원생 리누스 토발즈가 1991년에 개발 오픈 소스의 운영체제 대표적인 리눅스 기관 GNU 높은 이식성과 확정성 ( C언어 기반 ) 안전성과 신뢰성 ( 국제적이고 개방적으로 개발되었기 때문에 문제점에 대한 대처가 빠름 ) 계층적 파일 시스템 ( 최상위 디렉토리가 존재하고 모든 것들은 해당 디렉토리 하부에 존재 )   유닉스 운영체제 종류  리눅스의 구성요소   명령어 : 사용자가 원하는 프로그램을 콜링</description>
    </item>
    
    <item>
      <title>SQL 개요</title>
      <link>https://mung0001.github.io/docs/database/sqld/sqld-0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/database/sqld/sqld-0/</guid>
      <description>****  ****       </description>
    </item>
    
    <item>
      <title>VNC Server</title>
      <link>https://mung0001.github.io/docs/system/window/window10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window10/</guid>
      <description>VNC Server   VNC Server    원격지에서 Windows 환경 자체를 사용할 수 있도록 제공하는 서버
  Windows Server는 VNC 서버를 제공하지 않습니다.
  오픈소스로 제공되므로별도의 추가 비용 없이 자유롭게 사용가능하지만, 텍스트만 전송되는 Telnet에 비해 속도가 느린 단점을 가지고 있습니다.
         FIRST 서버에서 VNC를 설치합니다.
  기본 값으로 설정 후, 설치를 진행합니다.
        패스워드 입력시 12345를 입력합니다.</description>
    </item>
    
    <item>
      <title>AWS S3 생성</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/s3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/s3/</guid>
      <description>AWS S3 생성    이번 장에서는 S3를 생성해보도록 하겠습니다. S3 또한 중요한 개념이니, S3에 대한 학습을 원하는 분들은 AWS S3를 참조해주세요.    AWS S3 생성       AWS 서비스에서 S3를 검색합니다.      버킷 생성을 클릭합니다.      버킷의 이름과 리전을 선택합니다. 참고로 S3는 VPC에 영향을 받지 않습니다.      옵션을 선택합니다. 여기서는 기본 값으로 생성을 진행합니다.</description>
    </item>
    
    <item>
      <title>Az-900 : Region</title>
      <link>https://mung0001.github.io/docs/azure/azuretraining/azure01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/azuretraining/azure01/</guid>
      <description>Azure 글로벌 인프라 아키텍처   Microsoft Geography     Azure는 전 세계를 지정학적 경계 또는 국가 경계로 정의되는 지리적 위치로 분할합니다.
  Azure Geography란 일반적으로 데이터 상주성 및 규정 준수 경계를 유지하는 두 개 이상의 Azure 지역을 포함하고 있는 별도의 시장을 의미합니다.
  Azure Geography을 사용하면 아래와 같은 이점을 가질 수 있습니다.
  지리적 위치를 통해 특정 데이터 상주성 및 규정 준수 요구 사항이 있는 고객은 데이터와 애플리케이션을 가깝게 유지할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Azure Networking</title>
      <link>https://mung0001.github.io/docs/azure/microsoftazure/azure01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/microsoftazure/azure01/</guid>
      <description>Azure Networking    Azure Networking은 컴퓨팅 리소스를 연결하고 애플리케이션에 대한 액세스를 제공하는 것으로 Microsoft Azure 데이터 센터의 서비스 및 기능을 외부 환경에 연결하는 다양한 옵션이 포함되어 있습니다.     Azure Virtual Network   수신 VPN(가상 사설망) 연결에 VM을 연결합니다.     Azure Load Balancer     Azure Load Balancer는 사용자를 위한 유지 관리를 Azure에서 담당하는 서비스 입니다.
  인바운 및 아웃바운드의 시나리오에 맟춰 해당 TCP, UDP 포트로 접근하는 각 트래픽을 부하분산합니다.</description>
    </item>
    
    <item>
      <title>SQL Server</title>
      <link>https://mung0001.github.io/docs/system/window/window11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window11/</guid>
      <description>SQL Server   데이터베이스의 정의   데이터의 저장 공간으로 자료가 저장되는 디스크 공간을 의미합니다.     Windows SQL Sever    Microsoft사에서 제작한 데이터베이스 관리 소프트웨어로 대용량 데이터를 운영하기에 적합한 툴로 인정받고 있습니다.
  SQL Server 2016 주요 에디션
     특징 Enterprise Standard Express     라이선스 유료 유료 무료   주용도 대규모 중소규모 소규모 혹은 개인   최대 CPU OS 지원 최대 개수 소켓 4개 또는 코어 16개 소켓 1개 또는 코어 4개   최대 RAM 사용량 OS 지원 최대 크기 128GB 1GB   DB 크기 524PB 524PB 10GB       SQL Server 실습   SQL Server 설치를 위해 FIRST 서버에서 SQL Server를 설치합니다.</description>
    </item>
    
    <item>
      <title>SQLD : 데이터 모델링</title>
      <link>https://mung0001.github.io/docs/database/sqld/sqld-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/database/sqld/sqld-1/</guid>
      <description>데이터 모델링   데이터 모델링의 이해   데이터 모델링이란 현실에 존재하는 것을 데이터베이스에 사용할 수 있도록 모델링하는 과정     데이터 모델링의 중요성 및 유의점   중복 : 같은 시간 같은 데이터 제공
  비유연성 : 사소한 업무변화에 데이터 모델이 수시로 변경되면 안됨
  비일관성 : 신용 상태에 대한 갱신 없이 고객의 납부 이력 정보 갱신 안됨
        데이터 모델링</description>
    </item>
    
    <item>
      <title>Trove</title>
      <link>https://mung0001.github.io/docs/openstack/openstack/trove/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/trove/</guid>
      <description>데이터베이스 서비스 : Trove   Trove는 관계형 데이터베이스 기능을 활용 클라우드 사용자와 데이터 베이스 관리자는 필요에 따라 Trove를 통해 데이터베이스 인스턴스를 제공, 관리 서비스   Trove의 논리 아키텍처      구성요소 역할     python-troveclient 클라이언트에서 콘솔로 trove-api를 실행할 수 있게 지원   trove-api RESTful API 방식의 JSON을 지원, Trove인스턴스를 관리하고 프로비저닝   trove-taskmanager 인스턴스 프로비저닝을 지원, 라이프 사이클 관리 및 운영하는 작업을 수행   trove-conductor 호스트에서 실행되는 서비스로 호스트 정보를 업데이트 및 게스트 인스턴스 메시지를 수신   trove-guestagent 게스트 인스턴스 안에서 실행, 데이터 베이스 작업을 실행, 관리    </description>
    </item>
    
    <item>
      <title>Azure Mobile</title>
      <link>https://mung0001.github.io/docs/azure/microsoftazure/azure02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/microsoftazure/azure02/</guid>
      <description>Azure Mobile    Azure Mobile은 개발자가 iOS, Android 및 Windows 앱용 모바일 백 엔드 서비스를 쉽고 빠르게 만들 수 있게 해줍니다. Azure Mobile의 기능은 다음과 같습니다.   오프라인 데이터 동기화
  온-프레미스 데이터 연결
  푸시 알림 브로드캐스트
  비즈니스 요구 사항과 일치하도록 자동 크기조정
      </description>
    </item>
    
    <item>
      <title>IIS</title>
      <link>https://mung0001.github.io/docs/system/window/window12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window12/</guid>
      <description>Windows Web Server IIS, FTP Server   IIS(Internet Information Services)   WIndows Server 2016에 내장되어 있는 웹 서버 및 FTP 서버는 IIS라는 이름으로제공됩니다.     IIS 실습   IIS 설치를 위해 FIRST Server에서 서버매니저 &amp;gt; 관리 &amp;gt; 역할 및 기능 추가를 선택합니다.       서버역할에서 Web Server IIS를 선택 후 킷을 포함하여 설치를 진행합니다.        역할 서비스 에서 Application Development &amp;gt; CGI 및 FTP Server를 설치하기 위해 체크 후, 설치합니다.</description>
    </item>
    
    <item>
      <title>SQLD : SQL 기본</title>
      <link>https://mung0001.github.io/docs/database/sqld/sqld-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/database/sqld/sqld-2/</guid>
      <description>SQL 기본  SQL 기본    DataBase
 특정 기업이나 조직 또는 개인이 필요에 의해 데이터를 일정한 형태로 저장해 놓은 것을 의미한다.        DBMS
 효율적인 데이터 관리 뿐만 아니라 예기치 못한 사건으로 인한 데이터의 손상을 피하고, 필요시 필요한 데이터를 복구하기 위한 강력한 기능의 SW(SoftWare)       DB 발전   1960 : 플로우차트 중심의 개발, 파일구조 사용</description>
    </item>
    
    <item>
      <title>Active Directory</title>
      <link>https://mung0001.github.io/docs/system/window/window13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window13/</guid>
      <description>Windows Active Directory   Windows Active Directory    일반적인 회사의 네트워크 상황을 Windows Server에서 구현하기 위한한 기술입니다.
  네트워크 상으로 나누어져 있는 여러 자원을 중앙의 관리자가 통합하여 관리함으로써, 본사 및 지사의 직원들은 자신의 PC에 몯느 정보를 보관할 필요가 없어집니다.
  한 PC에서 관리하는 만큼 타 지사에 출장을 가서도 자신의 아이디로 로그인만 하면 타인의 PC가 자신의 PC 환경과 동일하게 변경되어집니다.
  PC가 있는 장소와 무관하게 회사의 어디서든지 회사 전체 자원을 편리하게 이용하기 위해 사용되어집니다.</description>
    </item>
    
    <item>
      <title>Az-900 : 관리옵션</title>
      <link>https://mung0001.github.io/docs/azure/azuretraining/azure02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/azuretraining/azure02/</guid>
      <description>Azure 관리옵션   Azure 관리옵션의 다양한 종류    Azure의 관리는 다양한 도구 및 플랫폼을 사용하여 Azure을 구성하고 관리할 수 있습니다.
  명령줄, 언어별 SDK, 개발자 도구, 마이그레이션 도구 등에 제공되는 여러 도구가 있습니다.
  하단은 가장 일상적으로 사용되는 관리 및 조작에 주로 사용되는 도구들입니다.
  Azure Portal : GUI를 통해 Azure 조작
  Azure PowerShell 및 Azure CLI : 명령줄 및 자동화 기반으로 Azure 조작</description>
    </item>
    
    <item>
      <title>Azure DataBase</title>
      <link>https://mung0001.github.io/docs/azure/microsoftazure/azure10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/microsoftazure/azure10/</guid>
      <description>Azure DataBase     Azure DataBase는 기존 스토리지 문제를 해결하기 위해 클라우드에 데이터를 저장하는 것을 고려합니다.
  하지만 보안, 백업 및 재해 복구에 대한 우려가 존재합니다.
  Azure에서는 다양한 형식과 볼륨의 데이터를 저장하도록 여러 데이터베이스 서비스를 제공합니다.
     Azure Database의 특징    Azure Database의 이점
  자동화된 백업 및 복구
  전 세계에서 복제
  데이터 분석 지원</description>
    </item>
    
    <item>
      <title>Azure Storage</title>
      <link>https://mung0001.github.io/docs/azure/microsoftazure/azure03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/microsoftazure/azure03/</guid>
      <description>Azure Storage     Azure Storage는 기본적인 스토리지 서비스를 제공하며 다음과 같은 특성을 가지고 있습니다..
 중복 및 복제 기능을 갖추고 있어 내구성과 가용성이 뛰어납니다.  자동 암호화와 역할 기반 액세스 제어를 통해 보안을 유지합니다.
 사실상 스토리지에 제한이 없으므로 확장성이 뛰어납니다. 유지 관리 및 사용자에 대한 중요한 문제를 관리하고 처리합니다. HTTP 또는 HTTPS를 통해 전 세계 어디에서든 액세스할 수 있습니다.       Azure Blob Storage   비디오 파일이나 비트맵 같은 대규모 개체를 위한 스토리지 서비스     Azure File   스토리지	파일 서버처럼 액세스하고 관리할 수 있는 파일 공유     Azure Queue   스토리지	애플리케이션 간 메시지를 큐에 넣고 안정적으로 전달하기 위한 데이터 저장소     Azure Table   스토리지	스키마와 관계없이 비정형 데이터를 호스팅하는 NoSQL 스토리지    </description>
    </item>
    
    <item>
      <title>Az-900 : 서비스</title>
      <link>https://mung0001.github.io/docs/azure/azuretraining/azure12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/azuretraining/azure12/</guid>
      <description>Az-900 : 서비스    서비스는 Link를 참조하세요.   IOT 솔루션 (Internet of Things)   Azure IoT Central  보다 손 쉬운 IOT 서비스 구축을 위한 SaaS 형태의 관리형 서비스, (디바이스 연결, 모니터 그리고 관리 및 확장 지원)       Azure IoT Hub  클라우드 기반의 IOT 관리 플랫폼 서비스 (중앙 메시지 허브, 양방향 통신 및 관리)       빅 데이터 분석 솔루션 (Big data and analytics)   Azure Sysnapse Analytics  클라우드 기반의 수십 페타의 데이터를 MPP기반으로 빠르게 처리할 수 있는 온 디맨드 분석을 지원하여 인사이트를 찾아낼 수 있는 솔루션       Azure HDInsight  오픈소스 기반의 Hadoop을 관리되는 형태의 서비스를 제공, 쉽고 빠르고 비용 효율적으로 데이터 처리가 가능       인공지능 (Artificial Intelligence   Azure Machin Learning service  SDK 기반으로 손쉽게 code를 작성하고 train, test, deploy, manage 및 track 할 수 있는 플랫폼을 제공       Azure Machine Learning Studio  GUI 기반으로 코드 없이도 손쉽게 ML model을 만들고 테스트를 배퐇라 수 있는 플랫폼을 제공       서버리스 (Serveless computing)   Azure Functions  서비스를 위한 코드에 집중 (인프라 및 플랫폼으로 부터의 자유도 확보)       Azure Logic Apps  작업 및 비즈니스 프로세스를 자동화하고 오케스트레이션 할 수 있도록 서비스 제공 엔터프라이즈 환경에서 앱, 데이터 긜고 시스템의 통합을 지원       Azure Event Grid  배포와 구독형태의 이벤트 소비를 위한 관리형 엔진 기반의 이벤트 라우팅 서비스       DevOps   Azure DevOps services  클라우드 기반의 통합 개발 협업 서비스 (CI/CD) 제공 파이프라인, Git 저장소, 오픈 소스 연계 등       Azure DevTest Labs  쉽고 빠르게 재사용 가능한 템플릿을 통해 배포하여 최신 개발 코드를 배포 및 테스트 가능       Azure 관리 도구   Azure Advisor  배포된 Azure 리소스를 분석하고 가용성, 보안, 성능, 비용측면을 개선하는 방법을 제공       Azure quick start templates  사전에 code로 설정이 되어 있는 탬플릿을 토대로 리소스를 배포할 수 있게 도와주는 도구 JSON 형태를 가지고 있다.</description>
    </item>
    
    <item>
      <title>Azure Web</title>
      <link>https://mung0001.github.io/docs/azure/microsoftazure/azure04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/microsoftazure/azure04/</guid>
      <description>Azure Web    Azure Web 에는 웹앱 및 HTTP 기반 웹 서비스의 빌드 및 호스트에 대한 최고 수준의 지원이 포함되어 있습니다.     Azure App Service   강력한 클라우드 웹 기반 앱을 신속하게 만들기     Azure Notification Hubs   원하는 백 엔드에서 원하는 플랫폼으로 푸시 알림을 전송할 수 있습니다.  Azure API Management   개발자, 파트너 및 직원에게 API를 안전하게 대규모로 게시할 수 있습니다.</description>
    </item>
    
    <item>
      <title>DHCP Server</title>
      <link>https://mung0001.github.io/docs/system/window/window14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window14/</guid>
      <description>DHCP Server   DHCP Server의 정의    DHCP란 Dynamic Host Configuration Protocol 서버가 하는 역할은 자신의 네트워크 안에 있는 클라이언트 컴퓨터가 부팅될 떄 자동으로 IP, Subnet, Gateway, DNS를 할당해 주는 역할을 수행합니다.
  DHCP의 가장 큰 장점은 관리하기 편하고 이용자가 편하다는 장점을 가지고 있습니다.
     DHCP Server 실습   DHCP 서버 설치를 위해 FIRST 서버에서 서비스 매니저 &amp;gt; 역할 및 기능 추가 &amp;gt; DHCP 서버를 설치합니다.</description>
    </item>
    
    <item>
      <title>15장 기출문제 정리</title>
      <link>https://mung0001.github.io/docs/aws/awssaa/saa-15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awssaa/saa-15/</guid>
      <description>15장 기출문제 정리   답들은 정확하지 않습니다. 공부하시면서 찾아보셔야 합니다.   QUESTION 1-100   QUESTION A company has a web application with sporadic usage patterns. There is heavy usage at the beginning of each month, moderate usage at the start of each week, and unpredictable usage during the week. The application consists of a web server and a MySQL database server running inside the data center. The company would like to move the application to the AWS Cloud, and needs to select a cost-effective database platform that will not require database modifications.</description>
    </item>
    
    <item>
      <title>Az-900 : 문제풀이</title>
      <link>https://mung0001.github.io/docs/azure/azuretraining/az-900/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/azuretraining/az-900/</guid>
      <description>Az-900 시험대비 문제풀이    다음 각 명령문에 대해 해당 명령문이 참이면 Yes 거짓이면 No를 선택하십시오.      문제 Yes No     PaaS는 Azure 서비스에서 모든 시스템의 제공하고 호스트는 웹, 애플리케이션을 모두 컨트롤 한다.       PaaS의 웹, 애플리케이션에서 자동으로 Scale ability를 수행한다.       PaaS는 솔루션은 사용자 지정 응용 프로그램에 기능을 지속적으로 추가하는 전문 개발 서비스를 제공한다.</description>
    </item>
    
    <item>
      <title>Azure IoT</title>
      <link>https://mung0001.github.io/docs/azure/microsoftazure/azure05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/microsoftazure/azure05/</guid>
      <description>Azure IoT    Azure에서 IoT를 위한 엔드투엔드 솔루션을 지원하고 구동할 수 있는 여러 서비스가 있습니다.     IoT Central   대규모 IoT 자산의 연결, 모니터링 및 관리를 도와주는, 완전히 관리되는 글로벌 IoT SaaS(Software-as-a-Service) 솔루션     Azure IoT Hub   수백만 개의 IoT 디바이스 간의 안전한 통신 및 모니터링을 제공하는 메시징 허브     IoT Edge   데이터 분석 모델을 IoT 디바이스로 직접 푸시하여 클라우드 기반 AI 모델을 참조할 필요 없이 상태 변경에 신속하게 대응할 수 있습니다.</description>
    </item>
    
    <item>
      <title>DNS Server</title>
      <link>https://mung0001.github.io/docs/system/window/window15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window15/</guid>
      <description>DNS Server   DNS Server의 정의    DNS 서버란 Domain Name System으로 읽기 힘든 IP(192.168.10.123)을 사람이 읽기 쉽게 이름(www.xxx.xxx)으로 바꾸어주는 역할을 수행하는 기술입니다.
  hosts 파일을 이용하여 네트워크를 접속할 수 있으며, 기하급수적으로 늘어나는 네트워크 상의 컴퓨터에 대한 모든 IP 정보를 파일 하나에 기록하는 것이 무리이기 때문에 전문적으로 해석해주는 서버 컴퓨터가 필요해졌습니다.
     DNS Server 실습    FIRST 서버에서 cmd 창을 실행 후 nslookup을 입력합니다.</description>
    </item>
    
    <item>
      <title>Mail Server</title>
      <link>https://mung0001.github.io/docs/system/window/window15-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window15-2/</guid>
      <description>Mail Server   E-Mail 작동 개념    SMTP(Simple Mail Transfer Protocol)을 사용하여 클라이언트가 메일을 보내거나, 메일 서버끼리 메일을 주고 받습니다.
  POP3(Post Office Protocol)을 사용하여 메일 서버에 도착되어 있는 메일을 클라이언트로 가져옵니다.
  IMAP(Internet Mail Access Protocol)은 POP3와 동일합니다.
     Mail Server 실습                                                                                                     </description>
    </item>
    
    <item>
      <title>Azure BigData</title>
      <link>https://mung0001.github.io/docs/azure/microsoftazure/azure06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/microsoftazure/azure06/</guid>
      <description>Azure BigData    Microsoft Azure는 빅 데이터 및 분석 솔루션을 제공하기 위해 광범위한 기술 및 서비스를 지원합니다.     Azure Synapse Analytics   MPP(대규모 병렬 처리)를 활용하여 페타바이트 단위의 데이터에서 복잡한 쿼리를 빠르게 실행하는 클라우드 기반 EDW(Enterprise Data Warehouse)를 사용하여 대규모로 분석 실행     Azure HDInsight   클라우드의 관리형 Hadoop 클러스터를 사용하여 대량의 데이터 처리     Azure Databricks   Azure의 다른 빅 데이터 서비스와 통합할 수 있는 Apache Spark 기반의 공동 작업용 분석 서비스입니다.</description>
    </item>
    
    <item>
      <title>WDS</title>
      <link>https://mung0001.github.io/docs/system/window/window16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window16/</guid>
      <description>Windows 배포 서비스   WDS(Windows Deployment Services)의 정의   WDS를 구성하면 사내 네트워크 안의 컴퓨터에서 Windows를 설치할 때 DVD 매체 없이도 자동 부팅 및 설치를 진행할 수 있습니다.     WDS로 구성할 수 있는 내용
  설치할 컴퓨터의 디스크 분할 및 포맷
  운영체제 설치 및 구성
  설치의 단순화
  회사 전체에 통일되고 일관적인 작업 환경을 제공
       WDS의 장점</description>
    </item>
    
    <item>
      <title>Azure AI</title>
      <link>https://mung0001.github.io/docs/azure/microsoftazure/azure07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/microsoftazure/azure07/</guid>
      <description>Azure AI    클라우드 컴퓨팅과 관련된 AI는 광범위한 서비스에 기반을 두고 있으며, 그 중 Machine Learning이 핵심입니다. Machine Learning은 컴퓨터에서 기존 데이터를 사용하여 미래 동작, 결과 및 추세를 예측하는 데이터 과학 기술입니다. Machine Learning을 사용하면 컴퓨터에서 명시적으로 프로그래밍하지 않고 학습합니다.     Azure Machine Learning   서비스	기계 학습 모델의 개발, 교육, 테스트, 배포, 관리 및 추적에 사용할 수 있는 클라우드 기반 환경입니다. 모델을 자동으로 생성하여 사용자에 맞게 조정할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Hyper-V</title>
      <link>https://mung0001.github.io/docs/system/window/window17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/window/window17/</guid>
      <description>Windows 가상화   Hyper-V의 정의    Hyper-V는 Windows Server에 내장되어 있는 가상화 기술로, 최신의 인텔 및 AMD CPU의 강력한 하드웨어 가상화 기술로 사용되어지고 있습니다.
  hosts 파일을 이용하여 네트워크를 접속할 수 있으며, 기하급수적으로 늘어나는 네트워크 상의 컴퓨터에 대한 모든 IP 정보를 파일 하나에 기록하는 것이 무리이기 때문에 전문적으로 해석해주는 서버 컴퓨터가 필요해졌습니다.
  Hyper-V의 장점
  하드웨어 사용률을 높여 물리적인 서버의 운영 및 유지 관리비용 감소</description>
    </item>
    
    <item>
      <title>Azure DevOps</title>
      <link>https://mung0001.github.io/docs/azure/microsoftazure/azure08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/microsoftazure/azure08/</guid>
      <description>Azure DevOps    Azure DevOps Services를 사용하여 애플리케이션에 연속 통합, 제공 및 배포를 제공하는 빌드 및 릴리스 파이프라인을 만들 수 있습니다. 리포지토리 및 애플리케이션 테스트를 통합하고, 애플리케이션 모니터링을 수행하고, 빌드 아티팩트로 작업할 수 있습니다.     Azure DevOps   Azure DevOps Services(이전 명칭: Visual Studio Team Services 또는 VSTS)는 고성능 파이프라인, 무료 비공개 Git 리포지토리, 구성 가능한 Kanban 보드, 광범위한 자동 및 클라우드 기반 부하 테스트를 비롯한 개발 협업 도구를 제공합니다.</description>
    </item>
    
    <item>
      <title>Azure HybridCloud</title>
      <link>https://mung0001.github.io/docs/azure/microsoftazure/azure09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/microsoftazure/azure09/</guid>
      <description>****   ****         ****        </description>
    </item>
    
    <item>
      <title>Linux System Management</title>
      <link>https://mung0001.github.io/docs/system/linux/linux01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/linux01/</guid>
      <description>Linux   Linux System Management   Linux 시스템관리는 프로세스, 메모리 관리를 위해 주로 사용됩니다.      crontab   정기적으로 지정한 시간에 실행하고 싶은 명령어를 등록하여 사용되며, 스크립트를 통해 등록도 가능합니다.   주요 옵션     옵션 설명     -l 등록된 명령어 리스트 확인   -e 등록된 명령어 수정     crontab 등록   -e옵션으로 실행하면 크롭탭을 위한 파일이 열리며, vi에디터와 동일한 명령으로 필요한 명령어를 등록할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Network Master 2급 필기정리</title>
      <link>https://mung0001.github.io/docs/network/nm/nm01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/nm/nm01/</guid>
      <description>Network Master 2급   Network Master 필기정리  네트워크 개요  정보통신 (정보처리기능+정보전송기능)   개념   컴퓨터에 의한 정보처리기술과 정보전송기능이 통합된 형태
  정보의 공유,변환,전송이 가능한 처리기술
        특징
  신속, 정확한 정보의전달.
  신뢰성이 높고 광대역 전송이 가능.
  정보 자원의 공유 및 이용.
  거리와 시간의 한계 극복.
  하드웨어 기술뿐만 아니라 소프트웨어 기술도 필요.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Overview</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-01/</guid>
      <description>OpenStack Ussuri : Overview  OpenStack Ussuri : Overview    OpenStack Ussuri 설치는 위의 그림과 표에 맞춰 설치가 진행됩니다. minimal 기본 설치는 keystone, glance, nova, neutron, cinder, horizon이며 여기서는 가능한 모든 서비스를 설치하도록 하겠습니다.      OS HOST NAME CPU/thead RAM DISK Network Interface-1 Network Interface-2      CentOS8 controller 4/8 6144 100G Nat host1    CentOS8 network 2/4 2048 40G Nat host1    CentOS8 compute 4/8 4096 40G   host1    CentOS8 storage1 1/2 1024 50G   host1    CentOS8 storage2 1/2 1024 50G   host1    CentOS8 storage3 1/2 1024 50G   host1         Service Code Name Description     Identity Service Keystone User Management   Compute Service Nova Virtual Machine Management   Image Service Glance Manages Virtual image like kernel image or disk image   Dashboard Horizon Provides GUI console via Web browser   Object Storage Swift Provides Cloud Storage   Block Storage Cinder Storage Management for Virtual Machine   Network Service Neutron Virtual Networking Management   Orchestration Service Heat Provides Orchestration function for Virtual Machine   Metering Service Ceilometer Provides the function of Usage measurement for accounting   Database Service Trove Database resource Management   Data Processing Service Sahara Provides Data Processing function   Bare Metal Provisioning Ironic Provides Bare Metal Provisioning function   Messaging Service Zaqar Provides Messaging Service function   Shared File System Manila Provides File Sharing Service   DNS Service Designate Provides DNS Server Service   Key Manager Service Barbican Provides Key Management Service      </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/openstack/openstack/sahara/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/sahara/</guid>
      <description>Sahara   데이터 프로세싱 서비스 Sahara  오픈스택 위 빅데이터를 다루기 위한 Hadoop이나 Spark를 쉽게 제공할 수 있게 도와주는 서비스 Sahara는 다음 요소로 구성  Auth: 클라이언트 인증 및 권한을 부여, 오픈스택 인증 서비스 Keystone과 통신 DAL: Data Access Layer의 약어로 데이터 엑세스 계층을 의미, DB의 내부 모델을 유지 Secure Storage Access Layer: 암호 및 개인 키 같은 인증 데이터를 안전한 저장소에 보관 Provisioning Engine: 오픈스택 컴퓨트 서비스 Nova, Heat, Cinder, Glance, Designate와 통신을 담당하는 구성 요소 Vendor Plugins: 프로비저닝된 VM에서 데이터 처리 프레임워크를 구성하고 시작하는 기능을 담당하는 플러그 가능한 메커니즘 EDP: Elastic Data Processing의 약어로 Sahara가 제공하는 클러스테에서 데이터 처리 작업을 예약하고 관리 REST API: REST HTTP 인터페이스로 Sahara 기능을 호출 Python Sahara Client: 다른 오픈스택 구성 요소와 마찬가지로 Sahara에는 자체 Python 클라이언트가 있음 Sahara Pages: Sahara용 GUI로 오픈스택 대시보드인 Horizon에 있음    </description>
    </item>
    
    <item>
      <title>Linux Filesystem</title>
      <link>https://mung0001.github.io/docs/system/linux/linux02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/linux02/</guid>
      <description>Linux   Linux Filesystem   Filesystem은 각 파일들에 대한 관리를 다루는 명령어들입니다.      cd   cd는 디렉터리를 이동하는 명령어입니다.   주요 옵션     옵션 내용     . 현재위치   .. 상위 디렉토리   ~ 홈 디렉터리   - 이전 디렉토리   / 최상단(root) 디렉토리        cp   파일, 디렉터리를 복사하는 명령어입니다.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : 환경설정</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-02/</guid>
      <description>OpenStack Ussuri : 기본 환경설정   ----------------------- | [ Controller Node ] | | | | MariaDB RabbitMQ | | Memcached | -----------------------  OpenStack Ussuri : 기본 환경설정   앞 기본 환경설정을 모든 노드에서 진행한 후, DB, RabbitMQ, Memcached는 controller에서만 설치를 진행합니다.  $ all&amp;gt; $ controller&amp;gt; $ controller ~(keystone)&amp;gt; $ compute&amp;gt; $ network&amp;gt; # 위와 같은 호스트를 주의헤 주세요 ! # (keystone)은 keystone 설치 후 인증 받은 터미널입니다.</description>
    </item>
    
    <item>
      <title>Ironic</title>
      <link>https://mung0001.github.io/docs/openstack/openstack/ironic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/ironic/</guid>
      <description>Ironic   베어메탈 서비스 Ironic   물리적인 컴퓨터를 관리하고 자원을 제공하는 구성요소의 모음
  Ironic은 구성에 따라 다음과 같은 다른 여러 오픈스택 서비스와 상호 작용할 수 있음
  IPMI 메트릭을 사용하는 오픈스택 텔레미터 모듈(Ceilometer)
  인증 요청 및 다른 오픈스택 서비스를 인증하는 오픈스택 인증 서비스(Keystone)
  이미지 및 이미지 메타데이터를 검색할 수 있는 오픈스택 이미지 서비스(Glance)
  DHCP 및 네트워크를 구성하는 오픈스택 네트워크 서비스(Neutron)</description>
    </item>
    
    <item>
      <title>Linux 압축</title>
      <link>https://mung0001.github.io/docs/system/linux/linux03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/linux03/</guid>
      <description>**Linux **   Linux 압축    Linux는 여러 압축포맷을 지원하며, 이를 통해 범용성있는 활용범위를 가지고 있습니다.
  대표적인 사용예시로는 Linux는 압축을 통해 전체적인 백업 및 복구를 진행할 수 있습니다.
      gzip, gunzip, zcat    gzip은 파일을 압축할 때 gunzip은 파일의 압축을 해제할 때 사용됩니다.
  압축한 파일은 .gz의 확장자를 가지며, 파일, 디렉터리 단위로 압축되므로 여러 개의 파일을 압축하기 위해서는 tar 명령어를 사용합니다.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Keystone</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-03/</guid>
      <description>OpenStack Ussuri : Keystone   ----------------------- | [ Controller Node ] | | | | MariaDB RabbitMQ | | Memcached Keystone | | httpd | -----------------------  OpenStack Ussuri : Keystone   Keystone은 OpenStack에서 인증 서비스를 구성하고 있습니다. Keystone에 대한 자세한 설명은 Keystone을 참조해주세요.   Keystone 유저와 DB를 생성합니다.  $ controller&amp;gt; mysql -u root -p $ MariaDB&amp;gt; create database keystone; $ MariaDB&amp;gt; grant all privileges on keystone.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Glance</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-04/</guid>
      <description>OpenStack Ussuri : Glance  ----------------------- | [ Controller Node ] | | | | MariaDB RabbitMQ | | Memcached Keystone | | httpd Glance | -----------------------  OpenStack Ussuri : Glance   Glance는 OpenStack에서 이미지 생성에 필요한 Iamge 관리 서비스를 구성하고 있습니다. Glance에 자세한 설명은 Glance를 참조해주세요.   Glance service 및 User 생성 $ contoller ~(keystone)&amp;gt; openstack user create --domain default --project service --password qwer1234 glance +---------------------+----------------------------------+ | Field | Value | +---------------------+----------------------------------+ | default_project_id | 7c10c02365be496fb47f12bfd40fe4a7 | | domain_id | default | | enabled | True | | id | 03f5b16a7be84cb688617d1943c8fe8c | | name | glance | | options | {} | | password_expires_at | None | +---------------------+----------------------------------+ $ contoller ~(keystone)&amp;gt; openstack role add --project service --user glance admin $ contoller ~(keystone)&amp;gt; openstack service create --name glance --description &amp;#34;OpenStack Image service&amp;#34; image +-------------+----------------------------------+ | Field | Value | +-------------+----------------------------------+ | description | OpenStack Image service | | enabled | True | | id | af365771c17a4a25ae1d0c659e2dc0eb | | name | glance | | type | image | +-------------+----------------------------------+ $ contoller ~(keystone)&amp;gt; openstack endpoint create --region RegionOne image public http://controller:9292 +--------------+----------------------------------+ | Field | Value | +--------------+----------------------------------+ | enabled | True | | id | cc65faecd7b042ffafd0f262cd7547df | | interface | public | | region | RegionOne | | region_id | RegionOne | | service_id | af365771c17a4a25ae1d0c659e2dc0eb | | service_name | glance | | service_type | image | | url | http://controller:9292 | +--------------+----------------------------------+ $ contoller ~(keystone)&amp;gt; openstack endpoint create --region RegionOne image internal http://controller:9292 +--------------+----------------------------------+ | Field | Value | +--------------+----------------------------------+ | enabled | True | | id | ea41c7b17c844e658ac83c547eddcf6d | | interface | internal | | region | RegionOne | | region_id | RegionOne | | service_id | af365771c17a4a25ae1d0c659e2dc0eb | | service_name | glance | | service_type | image | | url | http://controller:9292 | +--------------+----------------------------------+ $ contoller ~(keystone)&amp;gt; openstack endpoint create --region RegionOne image admin http://controller:9292 +--------------+----------------------------------+ | Field | Value | +--------------+----------------------------------+ | enabled | True | | id | 1393a64ef0ec428ba437602ac5b390f6 | | interface | admin | | region | RegionOne | | region_id | RegionOne | | service_id | af365771c17a4a25ae1d0c659e2dc0eb | | service_name | glance | | service_type | image | | url | http://controller:9292 | +--------------+----------------------------------+    Glance 유저의 DB를 생성합니다.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Nova</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-05/</guid>
      <description>OpenStack Ussuri : Nova  ----------------------- ----------------------- | [ Controller Node ] | | [ Compute Node ] | | | | Libvirt | | MariaDB RabbitMQ | | Nova-compute | | Memcached Keystone | | Open vSwitch | | httpd nova | | L2 Agent | | Nova-API | ----------------------- -----------------------  OpenStack Ussuri : Nova   Nova는 OpenStack에서 인스턴스를 생성하는 서비스입니다. Nova에 대한 자세한 설명은 Nova를 참조해주세요.     Nova, ceilometer service 및 User 생성  $ controller ~(keystone)&amp;gt; openstack user create --domain default --project service --password qwer1234 nova +---------------------+----------------------------------+ | Field | Value | +---------------------+----------------------------------+ | default_project_id | 7c10c02365be496fb47f12bfd40fe4a7 | | domain_id | default | | enabled | True | | id | f26027517d5e4b5b984b5db8d42398c8 | | name | nova | | options | {} | | qwer1234_expires_at | None | +---------------------+----------------------------------+ $ controller ~(keystone)&amp;gt; openstack user create --domain default --project service --password qwer1234 placement +---------------------+----------------------------------+ | Field | Value | +---------------------+----------------------------------+ | default_project_id | 7c10c02365be496fb47f12bfd40fe4a7 | | domain_id | default | | enabled | True | | id | 2394500b4512456f9d9d5066a5ecb1f7 | | name | placement | | options | {} | | qwer1234_expires_at | None | +---------------------+----------------------------------+ $ controller ~(keystone)&amp;gt; openstack role add --project service --user nova admin $ controller ~(keystone)&amp;gt; openstack role add --project service --user placement admin $ controller ~(keystone)&amp;gt; openstack service create --name nova --description &amp;#34;OpenStack Compute service&amp;#34; compute +-------------+----------------------------------+ | Field | Value | +-------------+----------------------------------+ | description | OpenStack Compute service | | enabled | True | | id | 28d495eca718439f9dc6ce395e0720dc | | name | nova | | type | compute | +-------------+----------------------------------+ $ controller ~(keystone)&amp;gt; openstack service create --name placement --description &amp;#34;OpenStack Compute Placement service&amp;#34; placement +-------------+-------------------------------------+ | Field | Value | +-------------+-------------------------------------+ | description | OpenStack Compute Placement service | | enabled | True | | id | 8515d3d046834de9b71b2938aae89898 | | name | placement | | type | placement | +-------------+-------------------------------------+ $ controller ~(keystone)&amp;gt; openstack endpoint create --region RegionOne compute public http://controller:8774/v2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/openstack/openstack/service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstack/service/</guid>
      <description>****   옵셔널 서비스  컴퓨트, 오브젝트 스토리지, 이미지, 인증, 네트워크, 블록 스토리지, 대시보드 서비스만으로도 오픈스택을 구축할 수 있음 텔레미터, 오케스트레이션, 데이터베이스 같은 서비스를 제대로 사용한다면 효율적인 클라우드 관리와 운영에 많은 도움을 많을 수 있음 메시징 서비스 Zaqar 공유 파일 시스템 서비스 Manila DNS 서비스 Designate  </description>
    </item>
    
    <item>
      <title>Linux 문자열 처리</title>
      <link>https://mung0001.github.io/docs/system/linux/linux04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/linux04/</guid>
      <description>Linux   Linux 문자열처리   Linux 문자열 처리는 입력 혹은 출력되는 문자열을 검색하거나, 혹은 데이터를 사용할 수 있도록 치환하는 명령어입니다.      awk   입력을 주어진 분리자(field seperator)로 분리하여 명령을 처리   주요 옵션     옵션 내용     F 문자열을 분리할 기준이 되는 분리문자 입력   v 파라미터 전달     내장함수     함수 설명     sub 지정한 문자열 치환   gsub 문자열 일괄 치환   index 주어진 무나열과 일치하는 문자의 인덱스를 반환   length 문자열의 길이를 반환   substr 시작위치에서 주어진 길이 만큼의 문자열을 반환   split 문자열을 분리하여 배열로 변환     사용예제  $ echo &amp;#34;i have a water.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Neutron</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-06/</guid>
      <description>OpenStack Ussuri : Neutron  ----------------------- ----------------------- ----------------------- | [ Controller Node ] | | [ Compute Node ] | | [ Network Node ] | | | | Libvirt | | Open vSwitch | | MariaDB RabbitMQ | | Nova compute | | L2 Agent | | Memcached Keystone | | Open vSwitch | | L3 Agent | | httpd Neutron | | L2 Agent | | metadata agent | | Nova-API Compute | ----------------------- ----------------------- | L2 agent L3 agent | | metadata agent | | Neutron Server | -----------------------  OpenStack Ussuri : Neutron   Neutron는 OpenStack에서 네트워크 전반을 관리하는 서비스입니다.</description>
    </item>
    
    <item>
      <title>Linux 날짜</title>
      <link>https://mung0001.github.io/docs/system/linux/linux05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/linux05/</guid>
      <description>Linux   Linux 날짜   Linux 날짜는 날짜 처리를 위한 명령어 입니다.      date   date는 일자, 시간을 처리하는 명령어입니다.   주요 옵션     옵션 내용     -d 원하는 일자를 지정   + 출력 포맷을 지정     사용예제  $ date +%Y%m%d 2020-11-21 # 년월일 형태  $ date +\%Y\%m\%d 2020-11-21 # %를 지원하지 않는 환경(ex: crontab)에서는 특수기호로 입력  $ date +&amp;#34;%Y%m%d %H:%M:%S&amp;#34; 2020-11-21 08:46:53 # 년월일 시간 출력  $ date +%W 06 # 주차 계산  $ date +%Y-%m-%d -d &amp;#39;1 days ago&amp;#39; 2020-11-20 # 1일 전  $ date +%Y-%m-%d -d &amp;#39;+1days&amp;#39; 2020-11-22 # 1일 후  $ date +%Y-%m-%d -d &amp;#39;20190101 +1days&amp;#39; 2020-11-22 # 20201121 일자 지정후 1일 추가   </description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Cinder</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-07/</guid>
      <description>OpenStack Ussuri : Cinder  ----------------------- ----------------------- ----------------------- | [ Controller Node ] | | [ Compute Node ] | | [ Network Node ] | | | | Libvirt | | Open vSwitch | | MariaDB RabbitMQ | | Nova compute | | L2 Agent | | Memcached Keystone | | Open vSwitch | | L3 Agent | | httpd Cinder API | | L2 Agent | | metadata agent | | Nova-API Compute | | Cinder-LVM | ----------------------- | L2 agent L3 agent | | NFS | | metadata agent | ----------------------- | Neutron Server | -----------------------  OpenStack Ussuri : Cinder   Cinder는 OpenStack에서 전체적인 볼륨, 디스크를 관리하는 서비스입니다.</description>
    </item>
    
    <item>
      <title>Linux 파일처리</title>
      <link>https://mung0001.github.io/docs/system/linux/linux06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/linux06/</guid>
      <description>Linux   Linux 파일처리   Linux 파일처리는 각 파일들을 읽거나, 데이터를 수정하는 데 주로 사용됩니다.      file   파일의 타입을 확인합니다. 텍스트파일, 실행파일, 아카이브 파일 등의 파일 타입을 확인합니다.   주요 옵션     옵션 내용     -z 파일이 압축되어 있는 경우 압축되기 전의 파일 타입을 확인        head   head는 파일의 앞 부분을 출력하는 명령어입니다.</description>
    </item>
    
    <item>
      <title>Linux Network</title>
      <link>https://mung0001.github.io/docs/system/linux/linux07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/linux07/</guid>
      <description>Linux   Linux Network 처리    Linux 상의 Network는 OS와 함께 핵심요소 중 하나입니다.
  Network 명령어를 통해 보다 편리하게 Network 요소들의 확인 및 관리가 가능합니다.
      curl    curl은 여러 프로토콜을 이용하여 네트워크 명령을 전송하는 도구로, 지원되는 프로토콜 (HTTP,HTTPS,FTP,FTPS,SCP,SFTP,TFTP,DICT,TELNET,LDAP 또는 FILE) 중 하나를 사용하여 서버 간의 데이터를 전송할 수 있습니다.
  프록시 지원, 사용자 인증, FTP 업로드, HTTP 캐시, SSL 연결, 파일 전송 이력 등과 같은 유용한 기능을 제공합니다.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Horizon</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-08/</guid>
      <description>OpenStack : Horizon  OpenStack : Horizon   Horizon은 openstack에서 GUI 환경을 제공해주는 서비스입니다. Horizon에 대한 자세한 설명은 Horizon을 참조해주세요.   $ controller&amp;gt; dnf --enablerepo=centos-openstack-ussuri,PowerTools,epel -y install openstack-dashboard $ controller&amp;gt; vi /etc/openstack-dashboard/local_settings ALLOWED_HOSTS = [&amp;#39;*&amp;#39;,&amp;#39;&amp;#39;] # 모든 host의 접속이 가능하게 설정합니다. CACHES = { &amp;#39;default&amp;#39;: { &amp;#39;BACKEND&amp;#39;: &amp;#39;django.core.cache.backends.memcached.MemcachedCache&amp;#39;, &amp;#39;LOCATION&amp;#39;: &amp;#39;controller:11211&amp;#39;, }, } SESSION_ENGINE = &amp;#34;django.contrib.sessions.backends.cache&amp;#34; OPENSTACK_HOST = &amp;#34;controller&amp;#34; OPENSTACK_KEYSTONE_URL = &amp;#34;http://controller:5000/v3&amp;#34; # openstack host와 SESSION 서버의 host를 지정합니다. TIME_ZONE = &amp;#34;Asia/Seoul&amp;#34; # 시간을 지정합니다.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Swift</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-09/</guid>
      <description>OpenStack Ussuri : Swift  ----------------------- ----------------------- ----------------------- | [ Controller Node ] | | [ Compute Node ] | | [ Network Node ] | | | | Libvirt | | Open vSwitch | | MariaDB RabbitMQ | | Nova compute | | L2 Agent | | Memcached Keystone | | Open vSwitch | | L3 Agent | | httpd Cinder API | | L2 Agent | | metadata agent | | Nova-API Compute | | Cinder-LVM | | Swift-proxy | | L2 agent L3 agent | | NFS | ----------------------- | metadata agent | ----------------------- | Neutron Server | ----------------------- --------------------------------- | [ Storage Node 1, 2, 3 ] | | | | Swift-account-auditor | | Swift-account-replicator | | Swift-account | | Swift-container-auditor | | Swift-container-replicator | | Swift-container-updater | | Swift-container | | Swift-object-auditor | | Swift-object-replicator | | Swift-object-updater | | Swift-swift-object | ---------------------------------  OpenStack Ussuri : Swift   Swift는 우리가 흔히 사용하는 네이버 클라우드, 구글 드라이브와 같은 오브젝트 스토리지 서비스 입니다.</description>
    </item>
    
    <item>
      <title>Linux 형식파일</title>
      <link>https://mung0001.github.io/docs/system/linux/linux08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/linux08/</guid>
      <description>Linux   Linux 형식파일   Linux 형식파일은 xml, xmllint, json, jq 형식의 파일들을 처리하기 위한 명령어입니다..      jq   jq는 JSON 형식 파일을 포맷과 들여쓰기에 맞게 출력하고, xpath 형식으로 값을 확인할 수 있습니다.   사용예제  $ echo &amp;#39;{&amp;#34;key1&amp;#34;:&amp;#34;val1&amp;#34;, &amp;#34;key2&amp;#34;:&amp;#34;val2&amp;#34;}&amp;#39; {&amp;#34;key1&amp;#34;:&amp;#34;val1&amp;#34;, &amp;#34;key2&amp;#34;:&amp;#34;val2&amp;#34;} $ echo &amp;#39;{&amp;#34;key1&amp;#34;:&amp;#34;val1&amp;#34;, &amp;#34;key2&amp;#34;:&amp;#34;val2&amp;#34;}&amp;#39; | jq { &amp;#34;key1&amp;#34;: &amp;#34;val1&amp;#34;, &amp;#34;key2&amp;#34;: &amp;#34;val2&amp;#34; } # jq를 이용하면 JSON 형식의 문자열을 포맷에 맞게 출력  $ echo &amp;#39;{&amp;#34;key1&amp;#34;:&amp;#34;val1&amp;#34;, &amp;#34;key2&amp;#34;:&amp;#34;val2&amp;#34;}&amp;#39; | jq &amp;#39;.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Heat</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-10/</guid>
      <description>OpenStack Ussuri : Heat  ----------------------- ----------------------- ----------------------- | [ Controller Node ] | | [ Compute Node ] | | [ Network Node ] | | | | Libvirt | | Open vSwitch | | MariaDB RabbitMQ | | Nova compute | | L2 Agent | | Memcached Keystone | | Open vSwitch | | L3 Agent | | httpd Cinder API | | L2 Agent | | metadata agent | | Nova-API Compute | | Cinder-LVM | | Swift-proxy | | L2 agent L3 agent | | NFS | | Heat API | | metadata agent | ----------------------- | API-CFN | | Neutron Server | | Heat Engine | ----------------------- ----------------------- --------------------------------- | [ Storage Node 1, 2, 3 ] | | | | Swift-account-auditor | | Swift-account-replicator | | Swift-account | | Swift-container-auditor | | Swift-container-replicator | | Swift-container-updater | | Swift-container | | Swift-object-auditor | | Swift-object-replicator | | Swift-object-updater | | Swift-swift-object | ---------------------------------  OpenStack Ussuri : Heat   클라우딩 컴퓨팅이 꽃인 Orchestaration 기능을 수행하는 Heat 서비스를 설치해보도록 하겠습니다.</description>
    </item>
    
    <item>
      <title>Network Security</title>
      <link>https://mung0001.github.io/docs/network/network/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/network/security/</guid>
      <description>Network Security   Hacking Process  확인 정보 ( OS 버전, 응용 프로그램, IP주소, 도메인 )  정보수집  정보 수집...  구글 검색    intitle : [검색어] - 탭 제목에 포함된 내용으로 검색
  filetype : [검색어] - 특정 파일 확장자로 검색
  site : [검색어] - 특정 도메인 주소 검색
  inurl : [검색어] - URL에 포함된 문자 검색</description>
    </item>
    
    <item>
      <title>Openstack Stain Manual 설치</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-stein/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-stein/</guid>
      <description>Openstack Stain Manual 설치    1. 시스템 및 네트워크 구성   여기서는 Nat 네트워크를 외부, host1 대역을 내부로 사용하여 Openstack을 구축해보도록 하겠습니다.    운영체제 및 네트워크 구성  Hypervisor : Vmware Workstation 15 OS : CentOS7      노드 구성     OS Hostname Network Interface Network Interface2 CPU RAM DISK     CentOS7 controller Nat ( 192.168.10.100 ) HOST1 ( 10.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Gnocch</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-11/</guid>
      <description>OpenStack Ussuri : Gnocch  ----------------------- ----------------------- ----------------------- | [ Controller Node ] | | [ Compute Node ] | | [ Network Node ] | | | | Libvirt | | Open vSwitch | | MariaDB RabbitMQ | | Nova compute | | L2 Agent | | Memcached Keystone | | Open vSwitch | | L3 Agent | | httpd Cinder API | | L2 Agent | | metadata agent | | Nova-API Compute | | Cinder-LVM | | Swift-proxy | | L2 agent L3 agent | | NFS | | Heat API | | metadata agent | ----------------------- | API-CFN | | Neutron Server | | Heat Engine | | Gnocchi | ----------------------- ----------------------- --------------------------------- | [ Storage Node 1, 2, 3 ] | | | | Swift-account-auditor | | Swift-account-replicator | | Swift-account | | Swift-container-auditor | | Swift-container-replicator | | Swift-container-updater | | Swift-container | | Swift-object-auditor | | Swift-object-replicator | | Swift-object-updater | | Swift-swift-object | ---------------------------------  OpenStack Ussuri : Gnnoch   Gnnoch     Gnocchi service 및 User 생성 $ controller ~(keystone)&amp;gt; openstack user create --domain default --project service --password qwer1234 gnocchi +---------------------+----------------------------------+ | Field | Value | +---------------------+----------------------------------+ | default_project_id | b470c69e28db47cdbfc81e06cc67f627 | | domain_id | default | | enabled | True | | id | 3217be4917454641994660bd1f3ea007 | | name | gnocchi | | options | {} | | password_expires_at | None | +---------------------+----------------------------------+ $ controller ~(keystone)&amp;gt; openstack role add --project service --user gnocchi admin $ controller ~(keystone)&amp;gt; openstack service create --name gnocchi --description &amp;#34;Metric Service&amp;#34; metric -------------------------------------------------+ | Field | Value | +-------------+----------------------------------+ | description | Metric Service | | enabled | True | | id | 6ac9ec31386f4291b582bd5b504ac485 | | name | gnocchi | | type | metric | +-------------+----------------------------------+ $ controller ~(keystone)&amp;gt; openstack endpoint create --region RegionOne metric public http://controller:8041 +--------------+----------------------------------+ | Field | Value | +--------------+----------------------------------+ | enabled | True | | id | 12f4410ed82240b0b1340d48b0627612 | | interface | public | | region | RegionOne | | region_id | RegionOne | | service_id | 6ac9ec31386f4291b582bd5b504ac485 | | service_name | gnocchi | | service_type | metric | | url | http://controller:8041 | +-------------------------------------------------+ $ controller ~(keystone)&amp;gt; openstack endpoint create --region RegionOne metric internal http://controller:8041 +--------------+----------------------------------+ | Field | Value | +--------------+----------------------------------+ | enabled | True | | id | 70f43453f93b407e94d2dd11ddce7260 | | interface | internal | | region | RegionOne | | region_id | RegionOne | | service_id | 6ac9ec31386f4291b582bd5b504ac485 | | service_name | gnocchi | | service_type | metric | | url | http://controller:8041 | +--------------+----------------------------------+ $ controller ~(keystone)&amp;gt; openstack endpoint create --region RegionOne metric admin http://controller:8041 +--------------+----------------------------------+ | Field | Value | +--------------+----------------------------------+ | enabled | True | | id | bb9a955359fd4af18599913465f46958 | | interface | admin | | region | RegionOne | | region_id | RegionOne | | service_id | 6ac9ec31386f4291b582bd5b504ac485 | | service_name | gnocchi | | service_type | metric | | url | http://controller:8041 | +--------------+----------------------------------+  Gnocchi 유저의 DB를 생성합니다.</description>
    </item>
    
    <item>
      <title>Firewall</title>
      <link>https://mung0001.github.io/docs/network/network/firewall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/network/network/firewall/</guid>
      <description>방화벽 (CentOS - firewalld)    리눅스의 방화벽
 커널의 Netfilter 모듈에 기초를 두고 있는 하나의 프로그램 방화벽은 일반적으로 내부와 외부 네트워크의 경계 지점에 위치 기본적으로 들어오고 나가는 패킷에 대해 지정된 정책과 규칙을 사용 허용(Accept)과 거절(Reject)이라는 행동을 통해 모든 패킷을 통제       방화벽의 종류
 패킷 필터링 방화벽  - 제 1세대 방화벽- 레이어 1~4에서 사용- 단순하기 때문에 빠르고 효과적- 5~7계층 대응 불가 Stateful 방화벽  - 제 2세대 방화벽- 패킷의 연결 상태를 관찰- 메모리에서 상태 테이블 사용 - DoS 공격과 같은 메모리 잠식 공격에 취약 **애플리케이션 레이어 방화벽 **  - 제 3세대 방화벽- 레이어7까지 패킷 검사와 필터링 - 고사양의 장비가 필요     방화벽의 구성요소   규칙(Rule) : Netfilter에서 가장 핵심적인 구성 요소로서 하나 또는 그 이상 일치돼야 할 항목들로 구성되며, 패킷이 이러한 규칙이 일치(match)할 경우 타겟을 이용해 구체적인 행동 사항을 지정한다.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Trove</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-12/</guid>
      <description>! 아직 수정 중 문제있음 OpenStack Ussuri : Trove  ----------------------- ----------------------- ----------------------- | [ Controller Node ] | | [ Compute Node ] | | [ Network Node ] | | | | Libvirt | | Open vSwitch | | MariaDB RabbitMQ | | Nova compute | | L2 Agent | | Memcached Keystone | | Open vSwitch | | L3 Agent | | httpd Cinder API | | L2 Agent | | metadata agent | | Nova-API Compute | | Cinder-LVM | | Swift-proxy | | L2 agent L3 agent | | NFS | | Heat API | | metadata agent | ----------------------- | API-CFN | | Neutron Server | | Heat Engine | | Gnocchi Trove API | ----------------------- ----------------------- --------------------------------- | [ Storage Node 1, 2, 3 ] | | | | Swift-account-auditor | | Swift-account-replicator | | Swift-account | | Swift-container-auditor | | Swift-container-replicator | | Swift-container-updater | | Swift-container | | Swift-object-auditor | | Swift-object-replicator | | Swift-object-updater | | Swift-swift-object | ---------------------------------  OpenStack Ussuri : Trove   Trove는 관리형 데이터베이스 서비스 입니다.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Designate</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-13/</guid>
      <description>OpenStack Ussuri : Designate  ----------------------- ----------------------- ----------------------- | [ Controller Node ] | | [ Compute Node ] | | [ Network Node ] | | | | Libvirt | | Open vSwitch | | MariaDB RabbitMQ | | Nova compute | | L2 Agent | | Memcached Keystone | | Open vSwitch | | L3 Agent | | httpd Cinder API | | L2 Agent | | metadata agent | | Nova-API Compute | | Cinder-LVM | | Swift-proxy | | L2 agent L3 agent | | NFS | | Heat API | | metadata agent | ----------------------- | API-CFN | | Neutron Server | | Heat Engine | | Gnocchi Trove API | | Designate Services | ----------------------- -----------------------  OpenStack Ussuri : Designate   Designate는 OpenStack 서비스에서 DNS 서비스를 배포, 관리를 담당합니다.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Barbican</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-14/</guid>
      <description>OpenStack Ussuri : Barbican  ----------------------- ----------------------- ----------------------- | [ Controller Node ] | | [ Compute Node ] | | [ Network Node ] | | | | Libvirt | | Open vSwitch | | MariaDB RabbitMQ | | Nova compute | | L2 Agent | | Memcached Keystone | | Open vSwitch | | L3 Agent | | httpd Cinder API | | L2 Agent | | metadata agent | | Nova-API Compute | | Cinder-LVM | | Swift-proxy | | L2 agent L3 agent | | NFS | | Heat API | | metadata agent | ----------------------- | API-CFN | | Neutron Server | | Heat Engine | | Gnocchi Trove API | | Designate Services | | Barbican API | ----------------------- -----------------------  OpenStack Ussuri : Barbican   Barbican은 키 관리 서비스 입니다.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Rally</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-15/</guid>
      <description>OpenStack Ussuri : Rally  ----------------------- ----------------------- ----------------------- | [ Controller Node ] | | [ Compute Node ] | | [ Network Node ] | | | | Libvirt | | Open vSwitch | | MariaDB RabbitMQ | | Nova compute | | L2 Agent | | Memcached Keystone | | Open vSwitch | | L3 Agent | | httpd Cinder API | | L2 Agent | | metadata agent | | Nova-API Compute | | Cinder-LVM | | Swift-proxy | | L2 agent L3 agent | | NFS | | Heat API | | metadata agent | ----------------------- | API-CFN | | Neutron Server | | Heat Engine | | Gnocchi Trove API | | Designate Services | | Barbican API | ----------------------- | Rally | -----------------------  OpenStack Ussuri : Rally   Rally는 오픈스택 소스를 GUI 환경으로 보여주는 서비스입니다.</description>
    </item>
    
    <item>
      <title>OpenStack Ussuri : Manila</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/openstack-ussuri-16/</guid>
      <description>OpenStack Ussuri : Manila  ----------------------- ----------------------- ----------------------- | [ Controller Node ] | | [ Compute Node ] | | [ Network Node ] | | | | Libvirt | | Open vSwitch | | MariaDB RabbitMQ | | Nova compute | | L2 Agent | | Memcached Keystone | | Open vSwitch | | L3 Agent | | httpd Cinder API | | L2 Agent | | metadata agent | | Nova-API Compute | | Cinder-LVM | | Swift-proxy | | L2 agent L3 agent | | NFS | | Heat API | | metadata agent | | Manila Share | | API-CFN | | Neutron Server | ----------------------- | Heat Engine | | Gnocchi Trove API | | Designate Services | | Barbican API | ----------------------- | Rally Manila API | -----------------------  OpenStack Ussuri : Manila   Manila는 OpenStack에서 맡는 서비스입니다.</description>
    </item>
    
    <item>
      <title>Linux Mount</title>
      <link>https://mung0001.github.io/docs/system/linux/mount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/mount/</guid>
      <description>Linux HD Mount   디스크의 구조 1. 물리적 구조
 스핀들 : 디스크는 하나의 스핀들을 기준으로 여러 개의 플래터로 구성되어 있고 스핀들은 여러 개의 플랫터를 회전시키는 역할을 한다. 플래터 : 플래터는 마그네틱으로 코딩되어져 있고 연속으로 구성되어 있다. 헤더 : 회전중인 플래터에 데이터를 읽거나 쓰기 위해서는 엑세스 암에 부착된 헤더를 이용하여 엑세스 한다.   2. 논리적 구조
 섹터 : 플래터의 가장 작은 단위, 일반적으로 1섹터의 크기는 512바이트 트랙 : 섹터가 모여 하나의 원을 구성 실린더 : 트랙의 스택 구조 파티션 : MBR의 파티션 테이블(64바이트)에 정보가 저장, 주 파티션 (16바이트, 4개까지 생성이 가능), 확장 파티션 생성이 가능 논리적 구조 크기 비교 : 섹터 &amp;lt; 트랙 &amp;lt; 실린더 &amp;lt; 실린더 그룹 or 파티션 &amp;lt; 디스크   3.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/system/linux/ls03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/ls03/</guid>
      <description>****   ****           </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/system/linux/ls04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/ls04/</guid>
      <description>****   ****           </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/system/linux/ls05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/ls05/</guid>
      <description>****   ****           </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/system/linux/ls06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/ls06/</guid>
      <description>****   ****           </description>
    </item>
    
    <item>
      <title>CSS 문법</title>
      <link>https://mung0001.github.io/docs/development/web/css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/web/css/</guid>
      <description>#css태그 {스타일}*{}전체선택.클래스명{스타일}&amp;lt;h1 class=&amp;quot;클래스명&amp;quot;&amp;gt;id 선택자#아이디명{스타일}단위: em, ex, px, ptfont-family: &amp;lt;글꼴 이름[,&amp;lt;글꼴 이름&amp;gt;, &amp;lt;글꼴 이름&amp;gt;];font-size: &amp;lt;절대 크기&amp;gt; | &amp;lt;상대 크기&amp;gt; | &amp;lt;크기&amp;gt; | &amp;lt;백분율&amp;gt;font-weight: noraml | bold | bolder | lighter | 100 | 200 ...font-variant: normal | small-capsfont-style: normal | italic | obliquefont: .....#text 스타일color: &amp;lt;색상&amp;gt;rgb(0,200,0). rgba(n,n,n,n), #0000ff, bluetext-decoration: none | underline | overline | line-throughtext-transform: none | capitalize | uppercase | lowercase | full-widthtext-shadow: none | &amp;lt;가로 거리&amp;gt; &amp;lt;세로 거리&amp;gt; &amp;lt;번짐 정도&amp;gt; &amp;lt;색상&amp;gt;white-space: normal | nowrap | pre | pre-line | pre-wrapletter-spacing: normal | &amp;lt;크기&amp;gt;word-spacing: normal | &amp;lt;크기&amp;gt;#문단 스타일direction: ltr | rtlltr 왼쪽에서 오른쪽으로 표시rtl 오른쪽에서 왼쪽으로 표시text-align: start | end | left | right | center | justtify | match-parenttext-justfy: auto | none | inter-word | distributetext-indent: &amp;lt;크기&amp;gt; | &amp;lt;백분율&amp;gt; 들여쓰기text-overflow: clip | ellipsis 너치는 텍스트를 자르기 | .</description>
    </item>
    
    <item>
      <title>DevStack</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/devstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/devstack/</guid>
      <description>DevStack Stein 설치  DevStack   Devbian 계열 ( ex : Ubuntu )의 OpenStack 자동화 설치 툴   DevStack 설치   Update Ubuntu System  $ sudo apt -y update $ sudo apt -y upgrade $ sudo apt -y dist-upgrade # Ubuntu의 시스템 및 패키지를 업데이트 합니다. $ sudo init 6 # 시스템을 재시작합니다.     Add Stack User  $ sudo useradd -s /bin/bash -d /opt/stack -m stack # devstack 설치를 위해 stack 유저를 생성합니다.</description>
    </item>
    
    <item>
      <title>Linux master 개요</title>
      <link>https://mung0001.github.io/docs/system/linux/lm-0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/lm-0/</guid>
      <description>Linux master 개요   Linux master    Linux master란 KAIT에서 실시하는 국가공인 자격증 시험으로, 정보통신기술자격검정 시험입니다.
  기본적으로 Linux 전반에 대한 내용들을 시험보며, 1급, 2급으로 시험이 나누어져 있습니다.
  자격종류
 자격구분 : 공인민간자격 등록번호 : 2008-0268 공인번호 : 과학기술정보통신부 제 2018-10호    시험예약 및 기타 자세한 사항은 KAIT Linux master을 확인해주세요.
     응시료     등급 차수 검정수수료     1급 1차 40.</description>
    </item>
    
    <item>
      <title>서버환경의 기초</title>
      <link>https://mung0001.github.io/docs/system/linux/ls00/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/ls00/</guid>
      <description>Linux Server Management   서버환경의 기초   네트워크의 정의   정보통신 네트어크 : 가장 바깥 쪽의 네트워크로 메일, WWW 등 다양한 애플리케이션의 네트워크가 정보통신 네트워크를 의미
  전송 네트워크 : 중간 층의 네트워크로 허브, 라우터와 같은 통신기기 네트워크를 의미
  통신 회선 네트워크 가장 안쪽이 네트워크로 통신 선로 네트워크로 LAN, WAN, 통신 사업자의 네트워크 서비스 등이 포함
       이론/ 구현/ 운영   이론 : 연구자를 중심으로 연구 개발되는 이론과 각종 표준화 조직, 단체의 기술 사양을 의미</description>
    </item>
    
    <item>
      <title>AWS OwnCloud</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/owncloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/owncloud/</guid>
      <description>Nas-Owncloud 실습    Owncloud를 활용하여 Ec2 Nas 만들기        EC2 생성
&amp;gt; OS : Ubuntu 18.04&amp;gt; Flavor : t2.micro&amp;gt; Storage : 100G ( 원하는 만큼, 차후에 EFS 등으로도 가능합니다. )&amp;gt; VPC : Custop&amp;gt; 보안그룹 : Custop 인스턴스를 생성합니다.      먼저, Owncloud를 사용하기 위해서는 LAMP를 설치해야합니다.  $ sudo apt install -y tasksel $ sudo tasksel install -y lamp-server # LAMP 간편 설치 $ sudo apt install -y apache2 # apache2 설치 $ sudo apt install -y mysql-server # mysql 설치 $ sudo apt install -y php7.</description>
    </item>
    
    <item>
      <title>Linux 일반</title>
      <link>https://mung0001.github.io/docs/system/linux/lm-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/lm-1/</guid>
      <description>리눅스 일반   리눅스의 특징 및 장단점   특징   오픈 소스 운영체제이다.
  멀티유저(다중사용자), 멀티테스킹(다중작업) 운영체제이다.
  다중스레드를 지원하는 네트워크 운영체제이다.
  여러 종류의 파일시스템을 지원하는 운영체제이다.
       장단점   리눅스는 유닉스와 완벽하게 호환 가능하다.
  리눅스는 PC용 운영체제보다 안정적이다.
  하드웨어 기능을 효과적으로 사용한다.
  리눅스는 오픈 소스 운영체제이다.
  공개 운영체제이기 때문에 문제점 발생 시 기술지원을 받기 어렵다.</description>
    </item>
    
    <item>
      <title>Packstack</title>
      <link>https://mung0001.github.io/docs/openstack/openstacktraining/packstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/openstack/openstacktraining/packstack/</guid>
      <description>Packstack Stein 설치  Packstack   Redhat 계열 ( ex : CentOS )의 OpenStack 자동화 설치 툴     Packstack stain 설치   기본적으로 PackStack은 올인원 or 다중노드로 구성할 수 있으며, 여기서는 올인원으로 설치를 진행하며, 다중노드에 대한 설정은 추가하도록 하겠습니다.   설치사양     OS CPU RAM DISK     CenOS7 4/ 2 10240 100G      만약 다중 노드에 경우 소스를 분산시키고 각 노드에 설정을 추가합니다.</description>
    </item>
    
    <item>
      <title>이용 기술</title>
      <link>https://mung0001.github.io/docs/system/linux/ls01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/ls01/</guid>
      <description>Linux Server Management*   telnet, vi, ftp 사용연습  ftp 서버    CentOS7 : L1(192.168.10.50)
  CentOS7 : L2(192.168.10.51)
  $ L1&amp;gt; vi /etc/hostname ... ... L1 $ L1&amp;gt; vi/etc/hosts ... ... 192.168.10.50 L1 192.168.10.51 L2 $ L1&amp;gt; scp /etc/hosts L2:/etc/hosts $ L1&amp;gt; init 6 $ L2&amp;gt; vi/etc/hostname ... ... L2 $ L2&amp;gt; init 6 # 설정 $ L2&amp;gt; touch apple banana peach $ L2&amp;gt; tar -cvf fruit apple banana peach $ L2&amp;gt; ll -rw-r--r--.</description>
    </item>
    
    <item>
      <title>Linux 운영 및 관리</title>
      <link>https://mung0001.github.io/docs/system/linux/lm-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/lm-2/</guid>
      <description>리눅스 일반   권한 및 그룹 설정  리눅스 시스템은 모든 파일과 디렉터리에는 접근권한과 소유권이 부여된다. 명령어 ‘ls –l’ 은 파일 속성을 나타낸다. 속성 필드 중 첫 번째 필드는 파일이나 디렉터리의 허가권, 세번째와 네번째 필드는 파일이나 디렉터리의 소유권을 나타낸다. 파일의 허가권이나 소유권을 설정하는 명령어는 chmod, chown, chgrp, umask 등이 있다.    소유권 관련 명령어  소유권은 임의의 파일 또는 디렉터리에 대한 사용자와 그룹들의 소유 권한을 나타낸 것이다. 그룹은 사용자들의 시스템 운영 특성에 따라 묶어 놓은 것으로, 같은 그룹에 속한 사용자들은 파일 또는 디렉터리에 대해 동일한 소유권과 직접 권한을 갖는다.</description>
    </item>
    
    <item>
      <title>Linux 활용</title>
      <link>https://mung0001.github.io/docs/system/linux/lm-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/lm-3/</guid>
      <description>Linux 일반   X-windows 개념 및 사용법   X-window란 우리가 흔히 사용하고 있는 Window와 같이 GUI 환경을 제공하는 서비스를 의미한다. Ubuntu, CentOS 등의 Redhat, Debian 계열의 Linux 운영체제 또한 GUI 환경으로 설치가 가능하다.     X-윈도우의 특징과 구성 요소   개념과 특징   리눅스 환경의 각종 애플리케이션과 유틸리티에 대해 그래픽 사용자 인터페이스를 제공한다.
  플랫폼과 독립적으로 작동하는 그래픽 시스템이다.
  X-윈도우는 X11, X, X Windows System이라 한다.</description>
    </item>
    
    <item>
      <title>서버도입</title>
      <link>https://mung0001.github.io/docs/system/linux/ls02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/ls02/</guid>
      <description>Linux Server Management   DNS 서버    DNS(Domain Name Server)는 TCP/IP 네트워크에서 이름 해석 서비스를 제공하는 서버 애플리케이션으로 이름 해석이란 호스트 이름과 도메인 이름을 IP 주소로 변환하는, 혹은 반대로 IP 주소에서 호스트 이름이나 도메인 이름으로 변환하는 작업이다.
  DNS 서버는 자신의 도메인 정보를 관리하고 외부 DNS 서버의 문의에 대응하는 기능을 수행하며, DNS 서버가 관리하는 도메인의 범위를 영역(Zoen)이라 한다.
   Domain 이름의 기술 형식    도메인 이름 : 서브도메인 이름 또는 공백</description>
    </item>
    
    <item>
      <title>AWS CloudFormation</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/cloudformation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/cloudformation/</guid>
      <description>AWS CloudFormation    이번 장에서는 CloudFormation의 탬플릿을 사용하여 서버를 자동 구축되도록 생성해보도록 하겠습니다. CloudFormation의 대한 개념은 CloudFormation을 참고하세요.    CloudFormation을 활용한 자동구축     CloudFormation 아키텍처 예시     먼저, AWS에서 CloudFormation 검색 후 클릭합니다.      스택 생성을 클릭합니다.       스택 생성을 위해 아래의 값을 cloudformation_instance.template 을 생성하여 업로드 합니다. 보통 Templates 파일은 S3에 저장된 것을 사용하지만, 여기서는 로컬환경에서 가져와 사용해보도록 하겠습니다.</description>
    </item>
    
    <item>
      <title>AWS 서버리스 사이트 구축</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/noserver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/noserver/</guid>
      <description>AWS 서버리스 사이트 구축    이번 장에서는 S3를 통해 서버가 없는 정적인 사이트를 구현해보도록 하겠습니다. 이와 같이 서버리스의 가장 큰 특징은 EC2처럼 상시 실행 상태 중이 아니여도, 사용자가 요청시에만 실행이 가능하기 때문에 비용면과 운영면에서 효율적이라 할 수 있습니다. AWS에서는 S3에서 웹 호스팅 기능을 제공하고 있어, 이를 통해 구현해보도록 하겠습니다.    AWS 서버리스 사이트 구축      먼저, AWS에 접속하여 S3 서비스를 검색 후, 클릭합니다.</description>
    </item>
    
    <item>
      <title>정리 중</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/ebs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/ebs/</guid>
      <description>AWS Elastic Fire System    EFS      AWS 서비스에서 EFS를 클릭합니다.      스토리지 생성을 위해 파일 시스템 생성을 클릭합니다.      네트워크 엑세스를 구성합니다. 여기서는 기본 VPC에서 가용영역 a, c를 사용하겠습니다.      파일 시스템 설정 구성을 설정합니다. 여기서는 후에 설정을 전부 기본 값을 사용하여 생성합니다.      생성된 내용을 확인합니다.      EFS 사용하기 위해 가용영역 a, c에 인스턴스를 생성합니다.</description>
    </item>
    
    <item>
      <title>AWS Cognito</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/cognito/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/cognito/</guid>
      <description>AWS Cognito    AWS Cognito      Cognito는 기본적으로 모바일에서 인증을 진행 후, 인증 혹은 비인증에 해당하는 리소스에 대한 사용 권한을 부여 받는 형식으로 진행됩니다.      Cognito 서비스 사용을 위해서 먼저, AWS에 접속하여 Cognito를 검색합니다. Cognito에 대한 개념은 Cognito를 참고하세요.      Cognito의 메인 페이지에서 &amp;gt; 자격 증명 풀 관리를 클릭합니다.      새 자격 증명 풀을 생성합니다.</description>
    </item>
    
    <item>
      <title>EC2 동적 사이트 구축</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/ec2site/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/ec2site/</guid>
      <description>EC2 동적 사이트 구축    이번 장에서는 EC2와 WordPress, RDS를 활용해 동적 사이트를 구축해보겠습니다. 이 장에서는 RDS 복제본 사용시 과금이 청구될 수 있습니다. 이를 원치 않는 분들은, RDS 설정 시, Multi-AZ 설정을 하지 않고, 1개의 Master RDS만 생성 후 진행하세요.    EC2 동적 사이트 구축       VPC     VPC 이름 IPv4 CIDR     VPC-WordPress 10.</description>
    </item>
    
    <item>
      <title>Elastic Beanstalk 사이트 구축</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/elasticbeanstalk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/elasticbeanstalk/</guid>
      <description>Elastic Beanstalk 사이트 구축    이번 장에서는 Elastic Beanstalk를 활용해서 WordPress 사이트를 구축해보겠습니다. Elastic Beanstalk가 무엇인지는 Elastic Beanstalk를 참조해주세요.    Elastic Beanstalk 사이트 구축      Elastic Beanstalk는 zip 형식으로 애플리케이션을 압축해서 AWS 상에 업로드 할 수 있습니다. WordPress를 사용하기 위해 WordPress에서 zip 형식으로 다운로드 합니다.      다운로드가 완료되면 AWS에서 Elastic Beanstalk를 검색합니다.      Elastic Beanstalk의 생성을 위해 Create Application을 클릭합니다.</description>
    </item>
    
    <item>
      <title>AWS SES 메일 시스템 구축</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/ses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/ses/</guid>
      <description>AWS SES 메일 시스템 구축    이번 장에서는 SES로 메일을 전송하는 시스템을 구축하여 보겠습니다. 단, SES 사용을 위해서는 버지나이 북부, 오레곤, 아일랜드만이 사용이 가능합니다.    메일 시스템 구축 순서
1. Simple Email Service ( SES ) 사용
2. EC2 인스턴스로 메일 서버를 구축
3. 서드 파티 도구를 사용
   AWS SES 메일 시스템 구축      먼저, SES 서비스를 이용하기 위해 AWS에서 SES를 검색합니다.</description>
    </item>
    
    <item>
      <title>AWS Lambda Crawling</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/aws-lambda-crawling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/aws-lambda-crawling/</guid>
      <description>AWS Lambda Crawling    AWS Lambda Crawling                     $ pip3 install [ Package ] -t . $ pip3 install bs4 -t . $ &amp;#39;[ 7z 경로, 다른 zip도 가능 ]&amp;#39; a &amp;#39;[ 압축할 패키지 이름 ]&amp;#39; &amp;#39;[ 압축할 패키지 경로 ]&amp;#39; $ &amp;#39;C:\Program Files\7-Zip\7z.exe&amp;#39; a &amp;#39;C:\AWSLambda\bs4.zip&amp;#39; &amp;#39;.&amp;#39;                                                                                      예제 1.</description>
    </item>
    
    <item>
      <title>Azure 학생 계정생성</title>
      <link>https://mung0001.github.io/docs/azure/azuretraining/base-copy-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/azure/azuretraining/base-copy-3/</guid>
      <description>Azure 학생 계정생성   Azure 학생 계정생성    이번 장에서는 Azure 서비스의 사용을 위한 계정생성에 대해 알아보도록 하겠습니다.
  기본적으로 Azure의 서비스를 사용할 때에는 계정이 필요하며, 여기서 학생의 신분으로 가입을 진행할 경우 여러 혜택을 받을 수 있습니다.
  윈도우 10 edu
  윈도우 Server 2019
  Visual Studio 2017 Enterprise
  SQL Server 2017 Enterprise
  Azure 100$ 크레딧
    이와 같은 혜택을 받기 위해서는 학교 메일 (ac.</description>
    </item>
    
    <item>
      <title>Cacti</title>
      <link>https://mung0001.github.io/docs/system/linux/cacti01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/cacti01/</guid>
      <description>Cacti : 시스템 네트워크 모니터링 솔루션   Cacti    Cacti는 업계 표준 오픈 소스 데이터 로깅 도구인 RRDtool에 대한 프론트 엔드용 프로그램으로 설계된, 오픈 소스 웹 기반 네트워크 모니터링 및 그래프 도구를 의미
  Cacti는 사용자가 소정의 간격으로 서비스를 폴링하고 그 결과 데이터를 그래프로 표시할 수 있으며, 일반적으로 CPU 가부하 및 네트워크 대역폭 같은 수치를 데이터 그래프로 변환가능
  일반적인 사용은 단순 네트워크 관리 프로토콜 SNMP를 통해 네트워크 스위치 또는 라우터 인터페이스를 폴링하여 네트워크 트래픽을 감시하는 역할을 수행</description>
    </item>
    
    <item>
      <title>EC2 끄투온라인 서버 구축</title>
      <link>https://mung0001.github.io/docs/aws/awstraining/game/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/aws/awstraining/game/</guid>
      <description>AWS 끄투온라인 서버 구축    AWS 끄투온라인 서버 구축      끄투 온라인은 오픈소스의 끝말잇기 게임입니다.      EC2를 생성합니다. EC2 생성은 EC2 생성을 참조해주세요.     OS 유형 disk security group     Ubuntu18.04 t2.mini 8 all-open      인스턴스를 생성 후, 아래와 같이 진행합니다.  $ sudo apt -y update $ sudo apt -y upgrade $ sudo apt -y install node.</description>
    </item>
    
    <item>
      <title>PXE(KickStart) Server</title>
      <link>https://mung0001.github.io/docs/system/linux/ls07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/system/linux/ls07/</guid>
      <description>PXE Server   PXE Server의 정의   PXE는 (Preboot Execution Enviroment)의 약자로 운영체제가 설치되지 않은 컴퓨터가 네트워크를 통해 PXE 서버에 접속해서 부팅도디도록 해주는 인터페이스를 지칭하는 용어를 의미합니다.     PXE 서버설치   PXE 설치 서버는 별도의 패키지가 존재하는 것이 아닌 각각의 서버들이 특정한 역할을 수행한다.     Server 역할     DHCP Server IP 주소를 자동으로 할당   TFTP Server 설치에 필요한 서버 구성 내용과 PXE boot 이미지는 모두 TFTP로 동작   FTP, HTTP, NFS Server CentOS DVD의 설치파일을 전송      간단한 설치순서   아무것도 설치되지 않은 PC에 전원 넣으면 자동으로 PXE 설치 서버를 찾는다.</description>
    </item>
    
    <item>
      <title>Shell Basics</title>
      <link>https://mung0001.github.io/docs/development/shell/shell01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell01/</guid>
      <description>Shell Programming    Shell Basics    Shell의 기본적인 역할은 사용자에게 명령을 입력받아 시행하는 것입니다.
  Sgell은 명령문을 작성할 때 사용할 수 있도록 많은 기능을 제공하므로 실제 명령이 실행되기 전에 Shell에 의해 해석 단계를 거치게 됩니다.
     파일명    Shell에서 제일 처음이자 중요한 개념 중 하나가 파일명입니다.
  파일명은 곧 명령을 실행할 때 사용되는 이름과 같으며, 리눅스에서 사용하고 있는 파일시스템에서는 파일 이름을 NUL, / 두 문자를 제외하고 전부 허용한다고 합니다.</description>
    </item>
    
    <item>
      <title>Quotes</title>
      <link>https://mung0001.github.io/docs/development/shell/shell02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell02/</guid>
      <description>Shell Programming    Quotes    Shell 중요한 핵심 개념 중 하나는 quotes라 할 수 있습니다.
  shell에서 quotes는 숫자나 스트링 값을 구분하기 위한 용도로는 사용하지 않습니다.
  1234, &amp;ldquo;123&amp;rdquo;, &amp;lsquo;123&amp;rsquo;은 모두 동일하며, abc, &amp;ldquo;abc&amp;rdquo;, &amp;lsquo;abc&amp;rsquo; 또한 차이가 없고 모두 스트링 문자열입니다.
  Shell 에서 quotes는 다음과 같은 용도로 사용됩니다.
  공백으로 분리되어 여러 개의 스트링을 하나의 인수로 만들 때(sed, awk 스크립트를 quotes을 이용해 작성하는 이유가 하나의 인수로 만들기 위해서입니다.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://mung0001.github.io/docs/development/shell/shell03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell03/</guid>
      <description>Shell Programming    Variables    변수 이름은 알파벳 (대, 소문자, 숫자, _)로 만들 수 있으며 이름의 첫 문자로 숫자가 올 수는 없다.
  변수이름을 대문자로 사용할 때는 Shell 환경변수와 증복되지 않도록 주의해야 하며, 생성한 변수는 subshell이나 source한 스크립트 내에서 별다른 설정 없이 사용할 수 있으나 child process에서도 사용하려면 export를 수행해야 한다.
  Myfile=Myfile FIRE_PREFIX=$Myfile.split FIRE_PREFIX=$Myfile_._split # &amp;#39;.&amp;#39; or &amp;#39;_&amp;#39;은 변수 이름을 구성하는 데 사용되지 않으므로 위와 같이 사용이 가능 # 결과적으로 FILE_PREFIX 변수 값은 &amp;#39;myfile.</description>
    </item>
    
    <item>
      <title>Fucnctions</title>
      <link>https://mung0001.github.io/docs/development/shell/shell04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell04/</guid>
      <description>Shell Programming    Functions    {;}, ()를 이용해 명령 그룹을 만들게 되면 같은 context에서 실행이 된다. 이것은 명령 그룹전체가 하나의 명령처럼 실행되는 것과 같은 효과가 있다.
  앞에 함수명을 붙여서 함수정의를 하게 되면 일반 명령과 동일하게 사용될 수 있다.
  {;}은 현재 shell에서 ()는 subshell에서 실행되므로 보통 함수를 정의할 때 {;}을 사용하지만 필요하다면 ()을 사용할 수도 있다.
  $ echo hello world | read var; echo &amp;#34;$var&amp;#34; # 파이프로 인해 subshell에서 실행되어 &amp;#34;$var&amp;#34;는 값이 표시되지 않는다.</description>
    </item>
    
    <item>
      <title>Exit Status</title>
      <link>https://mung0001.github.io/docs/development/shell/shell05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell05/</guid>
      <description>Shell Programming    Exit Status    터미널에서 명령을 단계적으로 실행해서 작업을 완성할 때는 여태까지 실행한 명령들이 모두 정상적으로 완료되었기 때문이다.
  만약 특정 과정에서 오류가 발생했는지, 정상적으로 완료되었는 지를 확인해야하는 데, 이를 판단할 수 있는 방법이 종료 상태 값을 확인하는 방법으로, 실제 shell에서의 핵심 개념중 하나가 종료 상태 값(Exit status)이다.
  Shell 에서 실행되는 모든 명령은 빠짐없이 종료 상태 값을 반환하며, if while until &amp;amp;&amp;amp; || 모두 종료 상태 값을 사용해서 참, 거짓을 판단한다.</description>
    </item>
    
    <item>
      <title>Interactive</title>
      <link>https://mung0001.github.io/docs/development/shell/shell06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell06/</guid>
      <description>Shell Programming    Interactive    Shell이 실행되는 환경은 두가지로 사용자로부터 프로프트를 통해 직접 명령을 입력받아 실행시키는 interactive shell과 script 파일을 실행하는 것과 같은 non-interacgtive shell이 있다.
  alais, job control과 같은 기능은 기본적으로 interactive shell에서 사용하기 위한 것으로 script를 실행할 때는 disable 된다.
  case $- in *i*) echo interactive shell ;; *) echo non-interactive shell ;; esac # $- 변수는 set 명령에 의해 설정되어 있는 option flage를 담고 있다.</description>
    </item>
    
    <item>
      <title>etc</title>
      <link>https://mung0001.github.io/docs/development/shell/shell07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell07/</guid>
      <description>Shell Programming    etc  /proc    proc 디렉토리는 현재 시스템에서 실행되는 프로세스들에 대한 정보를 제공하기 위해 OS에서 제공하는 가상의 파일 시스템으로, 실제 파일 시스템이 존재하는 것이 아니다.
  커널이 가지고 있는 정보는 사용자 프로그램에서 직접 접근할 수가 없으므로 system call을 통해 제공하는 방법도 생각해 볼 수 있겠으나 프로스세그 가지는 자료구조를 생각할 때 사용자가 쉽게 사용할 수 있도록 메모리상에 가상의 파일 시스템을 만들어 구조적으로 제공하는 역할을 수행한다.</description>
    </item>
    
    <item>
      <title>Commands</title>
      <link>https://mung0001.github.io/docs/development/shell/shell08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell08/</guid>
      <description>Shell Programming    Commands  외부명령   /usr/bin/find 명령과 같이 시스템 디렉토리에 위치한 명령드롤, 여기에는 ELF 바이너리 실행파일뿐만 아닌, shell 스크립트, perl 스크립트, python 스크립트와 같은 텍스트 실행파일도 다수 포함되어 있으며 GNU coreutils 패키지에는 textutils, shelutils, fileutils 명령들이 포함되어 있다.  $ file /bin/* /usr/bin/* | grep -ic &amp;#34;text executable&amp;#34; 643 $ file /bin/* /usr/bin/* | grep -ic &amp;#34;shell script&amp;#34; 129 $ file /bin/* /usr/bin/* | grep -ic &amp;#34;python[0-9.</description>
    </item>
    
    <item>
      <title>Bourne Shell Builtins</title>
      <link>https://mung0001.github.io/docs/development/shell/shell09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell09/</guid>
      <description>Shell Programming    Functions  </description>
    </item>
    
    <item>
      <title>Bourne Shell Builtins</title>
      <link>https://mung0001.github.io/docs/development/shell/shell10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell10/</guid>
      <description>Shell Programming    Functions  </description>
    </item>
    
    <item>
      <title>Bourne Shell Builtins</title>
      <link>https://mung0001.github.io/docs/development/shell/shell11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell11/</guid>
      <description>Shell Programming    Functions  </description>
    </item>
    
    <item>
      <title>Bourne Shell Builtins</title>
      <link>https://mung0001.github.io/docs/development/shell/shell12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell12/</guid>
      <description>Shell Programming    Bourne Shell Builtins   Shell은 내부에 bultin 되어 제공되는 명령들로 외부에 파일로 존재하지 않으므로 sudo, env, find의 -exec 등으로 실행할 수 없고 shell 환경에서만 사용할 수 있다.     . (dot)    .은 as 어셈블러나 ld 링커에서 현재 위치를 나타내는 데 사용되며, shell 에서는 현재 위치에 filename, include 하는데 사용된다.
  bash 에서는 동일한 기능의 source 명령을 추가로 제공하며, 가령 AA.</description>
    </item>
    
    <item>
      <title>Bourne Shell Builtins</title>
      <link>https://mung0001.github.io/docs/development/shell/shell13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell13/</guid>
      <description>Shell Programming    Functions  </description>
    </item>
    
    <item>
      <title>Bourne Shell Builtins</title>
      <link>https://mung0001.github.io/docs/development/shell/shell16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell16/</guid>
      <description>Shell Programming    Functions  </description>
    </item>
    
    <item>
      <title>Bourne Shell Builtins</title>
      <link>https://mung0001.github.io/docs/development/shell/shell17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell17/</guid>
      <description>Shell Programming    Functions  </description>
    </item>
    
    <item>
      <title>Bourne Shell Builtins</title>
      <link>https://mung0001.github.io/docs/development/shell/shell18/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell18/</guid>
      <description>Shell Programming    Functions  </description>
    </item>
    
    <item>
      <title>Bourne Shell Builtins</title>
      <link>https://mung0001.github.io/docs/development/shell/shell19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell19/</guid>
      <description>Shell Programming    Bourne Shell Builtins  </description>
    </item>
    
    <item>
      <title>Test 연산자</title>
      <link>https://mung0001.github.io/docs/development/shell/shell14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell14/</guid>
      <description>Shell Programming    Test  Test    Shell에는 기본적으로 숫자와 스트링을 구분하는 데이터 타입이 존재하지 않으며, 사칙연산을 위한 연산자도 없다.
  즉, 이를 위해 명령문 상의 모든 문자는 스트링이며 산술연산은 별도의 확장이나 명령을 통해서 제공되고, 기본적으로 명령문에 사용되는 문자는 모두 스트링이다.
  int main(int argc, char **argv) # 명령행의 인수를 스트링으로 받는 C 프로그램의 main 함수 public statis void main(String[] args) # 명령행의 인수를 스트링으로 받는 java 프로그램의 main 함수   즉 Shell에서의 32의 값은 다른 언어와 다르게 &amp;ldquo;32&amp;quot;와 32 간의 차이가 존재하지 않으며 둘다 같은 값을 의미한다.</description>
    </item>
    
    <item>
      <title>SubShells</title>
      <link>https://mung0001.github.io/docs/development/shell/shell15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell15/</guid>
      <description>Shell Programming    SubShells    Shell에서 명령을 실행하면 새로운 프로세스가 생성되어 실행되며, 이 때 명령을 호출한 process가 parent가 되고 새로 실행되는 명령이 child process가 된다.
  다음은 프롬프트 상에서 /bin/sleep외부 명령을 실행한 예이며 현재 bash shell process 아래서 sleep 명령의 child process가 시행되는 것이 확인 가능하다.
  프롬프트에서는 bash child process가 하나 더 생성된 후에 다른 명령이 실행 되는 것을 확인 할 수 있으며 ( ) $( ) \` | &amp;amp;`을 이용하여 명령을 실행시킬 때 생성되는 shell을 subshell이라고 한다.</description>
    </item>
    
    <item>
      <title>awk</title>
      <link>https://mung0001.github.io/docs/development/shell/shell80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell80/</guid>
      <description>Shell Programming    awk    AWK명령어는 Aho + Weinberger + Kernighan이 조합된 이름으로, awk는 파일로부터 레코드(record)를 선택하고, 선택된 레코드에 포함된 값을 조작하거나 데이터화하는 것을 목적으로 하는 프로그램을 의미한다.
  awk 명령의 입력으로 지정된 파일로부터 데이터를 분류한 다음, 분류된 텍스트 데이터를 바탕으로 패턴 매칭 여부를 검사하거나 데이터 조작 및연산 등의 액션을 수행하고, 그 결과를 출력하는 기능을 수행한다.
  awk는 awk programming language라는 프로그래밍 언어로 작성된 프로그램을 실행하며, 리눅스에서 쉘 스크립트로 작성된 파일이 리눅스 쉘에 실행되는 것을 떠올리면 awk가 awk programming language 문법으로 작성된 코드를 실행한다는 이 동일한 맥락이라 볼 수 있다.</description>
    </item>
    
    <item>
      <title>sed</title>
      <link>https://mung0001.github.io/docs/development/shell/shell90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell90/</guid>
      <description>Shell Programming    SED   SED는 Stremlined editor를 의미하며, 해석하면 능률적인 편집기라는 의미     패턴 스페이스(Pattern space)와 홀드스페이스(Hold space)   sed 명령어는 동작시 내부적으로 두개 의 워크스페이스를 사용하는 데, 이 두 버퍼를 패턴 스페이스와 홀드 스페이스라고 한다.     패턴 버퍼
 패턴 버퍼는 sed가 파일으 ㄹ라인단위로 읽을 때 그 읽힌 라인이 저장되는 임시 공간이며, 우리가 sed 명령어로 출력하라 하면 여기있는 버퍼 내용을 출력하는 것이고, 조작을 하면 저장되어 있는 내용을 조작하는 것으로, 원본을 건드는 설저잉 아닌, 현재 내가 담고 있는 정보를 가지고 오겠다는 의미로 해석된다.</description>
    </item>
    
    <item>
      <title>연습문제</title>
      <link>https://mung0001.github.io/docs/development/shell/shell100/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/shell/shell100/</guid>
      <description>Shell Programming    연습문제 정리  구구단 # gugu.sh #!/bin/bash for i in {1..9}; do for j in {1..9}; do echo $i &amp;#34;X&amp;#34; $j &amp;#34;=&amp;#34; `expr $i \* $j` done done    야구게임 #!/bin/bash  Solution(){ Solution=() i=0 while [ $i -le 3 ]; do Solution[$i]=$((RANDOM% 9+1)) if [ $i -eq 3 ]; then if [ ${Solution[3]} -eq ${Solution[0]} -o ${Solution[3]} -eq ${Solution[1]} -o ${Solution[3]} -eq ${Solution[2]} ]; then Solution[$i]=$((RANDOM% 9+1)) else ((i++)) fi fi if [ $i -eq 2 ]; then if [ ${Solution[2]} -eq ${Solution[0]} -o ${Solution[2]} -eq ${Solution[1]} ]; then Solution[$i]=$((RANDOM% 9+1)) else ((i++)) fi fi if [ $i -eq 1 ]; then if [ ${Solution[0]} -eq ${Solution[1]} ]; then Solution[$i]=$((RANDOM% 9+1)) else ((i++)) fi fi if [ $i -eq 0 ]; then ((i++)) fi done echo ${Solution[@]} } Count=0 Score(){ Out=0 Ball=0 Strike=0 if [ $num1 -eq ${Solution[0]} ]; then ((Strike++)) elif [ $num1 -eq ${Solution[1]} -o $num1 -eq ${Solution[2]} -o $num1 -eq ${Solution[3]} ]; then ((Ball++)) else ((Out++)) fi if [ $num2 -eq ${Solution[1]} ]; then ((Strike++)) elif [ $num2 -eq ${Solution[0]} -o $num2 -eq ${Solution[2]} -o $num2 -eq ${Solution[3]} ]; then ((Ball++)) else ((Out++)) fi if [ $num3 -eq ${Solution[2]} ]; then ((Strike++)) elif [ $num3 -eq ${Solution[1]} -o $num3 -eq ${Solution[0]} -o $num3 -eq ${Solution[3]} ]; then ((Ball++)) else ((Out++)) fi if [ $num4 -eq ${Solution[3]} ]; then ((Strike++)) elif [ $num4 -eq ${Solution[1]} -o $num4 -eq ${Solution[2]} -o $num4 -eq ${Solution[0]} ]; then ((Ball++)) else ((Out++)) fi echo &amp;#34; Strike : $Strike&amp;#34; echo &amp;#34; Ball : $Ball&amp;#34; echo &amp;#34; Out : $Out&amp;#34; ((Count++)) if [ $Strike -eq 4 ]; then echo &amp;#34;수고하셨습니다.</description>
    </item>
    
    <item>
      <title>Linux Version 별 차이점</title>
      <link>https://mung0001.github.io/posts/linuxvesion/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/posts/linuxvesion/</guid>
      <description>Linux Version 별 차이점     보통 우리가 흔히 사용하는 CentOS, Ubuntu는 꾸준히 버전이 릴리즈되어 지고 있습니다.
  그렇다면 릴리즈 별 바뀌는 요소가 무엇인지를 알아보도록 하겠습니다.
     Ubuntu*      CentOS </description>
    </item>
    
    <item>
      <title>정보처리기사 합격후기</title>
      <link>https://mung0001.github.io/posts/%EC%A0%95%EC%B2%98%EA%B8%B0/</link>
      <pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/posts/%EC%A0%95%EC%B2%98%EA%B8%B0/</guid>
      <description>정보치리기사 시험합격 후기    정보처리기사 1, 2화 통합 필기   공부기간   약 3개월, 기존 1개월로 잡았으나 코로나로 시험이 반복적으로 미루어져서 공부를 하다말다 하다말다 했습니다.
  전공자라면 1주일도 충분히 가능하고, 비전공자여도 한 달이면 충분히 가능하다 생각됩니다.
       시험내용   기본적으로 시험범위가 상당히 넓어 초독에는 많은 시간이 필요하다 생각됩니다. 그렇기에 핵심키워드 위주로 공부하시고, 다독하시는 걸 추천드립니다.
  개정 후의 시험은 개정전과 많이 다르다고 공시되어 있지만, 또 그렇게 다르지도 않다고 많이들 말씀하셨습니다.</description>
    </item>
    
    <item>
      <title>Lambda</title>
      <link>https://mung0001.github.io/posts/lambda/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/posts/lambda/</guid>
      <description>Lambda   Lambda는 기본적으로 AWS의 서비스 중 하나인 Lambda를 의미하며 일반적으로 서버리스 아키텍처로 사용됩니다.
  여기서 서버리스 아키텍처란 실행을 위해 서버에 직접 접근하지 않는 새로운 종류의 소프트웨어 아키텍처를 의미합니다.
  Lambda는 AWS 기반에서 자바스크립트, 파이썬, C#, 자바로 작성한 코드를 실행하는 컴퓨팅 서비스입로, 소스 코드는 압축되어 메모리, 디스크 공간과 CPU가 할당된 격리된 컨테이너에 배포됩니다.
  그럼 본격적으로 Lambda에 대해 알아보도록 하겠습니다.
     Server or Serverless   Server  상단의 그림은 기본적인 3 tier 애플리케이션의 구조입니다.</description>
    </item>
    
    <item>
      <title>Window 10 무설치 정품인증</title>
      <link>https://mung0001.github.io/posts/window10/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/posts/window10/</guid>
      <description>Window 10 무설치 정품인증    단순히 Window 10의 명령프롬프트를 사용하여 간단하게 윈도우 인증을 완료하는 방법을 알려드리겠습니다.    명령프롬프트를 사용한 정품인증   먼저 검색 or 실행 ( Window 키 + R )에서 dxdiag 또는 winver를 검색 후, 운영체제의 버전을 확인해주세요. 위의 그림은 winver를 통해 확인한 모습입니다.      다음으로는 인증 키의 설정을 위해 위의 그림과 같이 명령 프롬프트를 관리자 권한으로 실행합니다.      아래의 명령어를 입력해주세요.</description>
    </item>
    
    <item>
      <title>클라우드란? (CloudComputing)</title>
      <link>https://mung0001.github.io/posts/cloud/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/posts/cloud/</guid>
      <description>클라우드란?   클라우드 (Cloud)    클라우드의 영어 ‘Cloud’는 우리가 흔히 알고 있는 &amp;lsquo;구름’을 뜻합니다. 컴퓨터 파일을 저장할 때 작업한 컴퓨터 내부에 있는 공간이 아니라 인터넷을 통하여 중앙 컴퓨터에 저장할 수 있는 데 이 공간을 클라우드라 합나다.
  즉, 클라우드를 정의하기는 모호한 면이 있지만, 기본적으로 각각 고유한 기능을 가진 서버의 글로벌 네트워크를 설명하는 데 사용되는 용어입니다.
  클라우드는 실제 엔터티가 아니지만 함께 연결되어 하나의 에코시스템으로 작동하게 되어 있는 ​전 세계에 분산된 원격 서버의 광대한 네트워크로, 이러한 서버는 데이터의 저장 및 관리, 애플리케이션 실행 또는 스트리밍 비디오, 웹 메일, 오피스 생산성 소프트웨어 또는 소셜 미디어와 같은 미디어와 같은 콘텐츠 또는 서비스를 제공하도록 설계되어 있습니다.</description>
    </item>
    
    <item>
      <title>퍼블릭 클라우드 ( Public Cloud )</title>
      <link>https://mung0001.github.io/posts/publiccloud/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/posts/publiccloud/</guid>
      <description>퍼블릭 클라우드 ( Public Cloud )     클라우드는 그 서비스 형태에 따라 퍼블릭( Public Cloud ), 하이브리드 클라우드 (Hybrid Cloud ), 프라이빗 클라우드 ( Pivate Cloud ), 커뮤니티( Community Cloud )로 나뉘어저 있습니다.
  이번에는 그 중 퍼블릭 클라우드 ( Public Cloud )에 대해 알아보겠습니다.
  퍼블릭 클라우드( Publci Cloud )란 외부 클라우드 사업자가 제공하는 서비스를 통해 클라우드를 이용하는 것으로, 우리가 가장 흔히 접할 수 있는 서비스 형태입니다.</description>
    </item>
    
    <item>
      <title>프라이빗 클라우드 (Private Cloud)</title>
      <link>https://mung0001.github.io/posts/privatecloud/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/posts/privatecloud/</guid>
      <description>프라이빗 클라우드 (Private Cloud)     클라우드는 그 서비스 형태에 따라 퍼블릭( Public Cloud ), 하이브리드 클라우드 (Hybrid Cloud ), 프라이빗 클라우드 ( Pivate Cloud ), 커뮤니티( Community Cloud )로 나뉘어저 있습니다.
  이번에는 그 중 프라이빗 클라우드 ( Private Cloud )에 대해 알아보겠습니다.
  프라이빗 클라우드란 기업이 직접 클라우드 환경을 구축하고 이를 기업 내부에서 활용하거나 또는 계열사에 공개하는 것을 뜻합니다.
     프라이빗 클라우드의 개념   프라이빗 클라우드의 개념     외부 클라우드 사업자의서비스를 이용하지 않고 서비스를 위한 인프라를 직접 구축한다는 점에서 프라이빗 클라우드는 자체 인프라 구축과 동일하다고 할 수 있습니다.</description>
    </item>
    
    <item>
      <title>하이브리드 클라우드 ( Hybrid Cloud )</title>
      <link>https://mung0001.github.io/posts/hybridcloud/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/posts/hybridcloud/</guid>
      <description>하이브리드 클라우드 ( Hybrid Cloud )     클라우드는 그 서비스 형태에 따라 퍼블릭( Public Cloud ), 하이브리드 클라우드 (Hybrid Cloud ), 프라이빗 클라우드 ( Pivate Cloud ), 커뮤니티( Community Cloud )로 나뉘어저 있습니다.
  이번에는 그 중 하이브리드 클라우드 ( Hybrid Cloud )에 대해 알아보겠습니다.
  하이브리드 클라우드는 퍼블릭 클라우드( Public Cloud )와 프라이빗 클라우드 ( Pivate Cloud )를 결합하여 데이터와 애플리케이션을 공유할 수 있는 컴퓨팅 환경으로, 하이브리드 컴퓨팅은 컴퓨팅 및 처리 요구가 변동될 때 타사 데이터 센터에서 데이터 전체에 엑세스하지 않고도 온-프레미스 공용 클라우드로 원할하게 확장하여 오버플로를 처리할 수 있는 기능을 기업에게 제공하는 것을 뜻합니다.</description>
    </item>
    
    <item>
      <title>테스트</title>
      <link>https://mung0001.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/development/git/hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/development/git/hugo/</guid>
      <description>Hugo  휴고 다운로드
   So cutey
  Hugo는 Go언어를 기반으로 Go 언어를 이용한 프로그램 사용 및 수정
  Markdown으로 글을 작성
  git을 활용한 글 관리 및 버전 관리
     Hugo 적용    Hugo 환경변수 등록
  휴고 사이트 시작
  hugo new site testproject cd testproject hugo server -D   테마 적용    Hugo 테마 다운로드</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/docs/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/docs/hidden/</guid>
      <description>This page is hidden in menu Quondam non pater est dignior ille Eurotas Latent te facies Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.
 Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona O fallor in sustinui iussorum equidem.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/hidden/</guid>
      <description>This page is hidden in menu Quondam non pater est dignior ille Eurotas Latent te facies Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.
 Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona O fallor in sustinui iussorum equidem.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mung0001.github.io/posts/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mung0001.github.io/posts/base/</guid>
      <description>****          **** </description>
    </item>
    
  </channel>
</rss>
